=== Μεταβλητές περιβάλλοντος

Το Git τρέχει πάντα μέσα σε ένα κέλυφος `bash` και χρησιμοποιεί διάφορες μεταβλητές περιβάλλοντος κελύφους για να καθορίσει πώς συμπεριφέρεται.
Περιστασιακά, είναι χρήσιμο να μάθουμε τι είναι αυτά και πώς μπορούν να χρησιμοποιηθούν για να κάνουν το Git να συμπεριφέρεται όπως θέλουμε.
Δεν πρόκειται για μια εξαντλητική λίστα με όλες τις μεταβλητές περιβάλλοντος που το Git δίνει προσοχή, αλλά θα καλύψουμε τις πιο χρήσιμες.

Git always runs inside a `bash` shell, and uses a number of shell environment variables to determine how it behaves.
Occasionally, it comes in handy to know what these are, and how they can be used to make Git behave the way you want it to.
This isn't an exhaustive list of all the environment variables Git pays attention to, but we'll cover the most useful.


==== Παγκόσμια Συμπεριφορά

Ορισμένες από τη γενική συμπεριφορά του Git ως πρόγραμμα υπολογιστή εξαρτώνται από μεταβλητές περιβάλλοντος.

Some of Git's general behavior as a computer program depends on environment variables.

*`GIT_EXEC_PATH`* determines where Git looks for its sub-programs (like `git-commit`, `git-diff`, and others).
  You can check the current setting by running `git --exec-path`.

* Το `GIT_EXEC_PATH` * καθορίζει πού αναζητά τα υποπρογράμματα του Git (όπως` git-commit`, `git-diff` και άλλα).
  Μπορούμε να ελέγξουμε την τρέχουσα ρύθμιση εκτελώντας το `git --exec - path`.

* Το `` HOME` * δεν θεωρείται συνήθως προσαρμόσιμο (πάρα πολλά άλλα εξαρτώνται από αυτό), αλλά είναι όπου το Git ψάχνει για το παγκόσμιο αρχείο διαμόρφωσης.
  Εάν θέλουμε μια πραγματικά φορητή εγκατάσταση Git, συμπληρωμένη με παγκόσμια διαμόρφωση, μπορούμε να αντικαταστήσουμε το `HOME 'στο προφίλ του φορητού Git.

*`HOME`* isn't usually considered customizable (too many other things depend on it), but it's where Git looks for the global configuration file.
  If you want a truly portable Git installation, complete with global configuration, you can override `HOME` in the portable Git's shell profile.

*`PREFIX`* is similar, but for the system-wide configuration.
  Git looks for this file at `$PREFIX/etc/gitconfig`.

* 'PREFIX' * είναι παρόμοια, αλλά για τη διαμόρφωση σε όλο το σύστημα.
  Το Git αναζητά αυτό το αρχείο στο `$ PREFIX / etc / gitconfig`.

* 'GIT_CONFIG_NOSYSTEM` *, αν έχει οριστεί, απενεργοποιεί τη χρήση του αρχείου ρυθμίσεων σε όλο το σύστημα.
  Αυτό είναι χρήσιμο εάν η ρύθμιση του συστήματός μας παρεμβάλλεται στις εντολές μας, αλλά δεν έχουμε πρόσβαση στην αλλαγή ή την κατάργησή της.

*`GIT_CONFIG_NOSYSTEM`*, if set, disables the use of the system-wide configuration file.
  This is useful if your system config is interfering with your commands, but you don't have access to change or remove it.

*`GIT_PAGER`* controls the program used to display multi-page output on the command line.
If this is unset, `PAGER` will be used as a fallback.

* Το `GIT_PAGER` * ελέγχει το πρόγραμμα που χρησιμοποιείται για την εμφάνιση εξόδου πολλών σελίδων στη γραμμή εντολών.
Αν αυτό είναι απενεργοποιημένο, το `PAGER` θα χρησιμοποιηθεί ως εναλλακτική λύση.

* `GIT_EDITOR` * είναι ο επεξεργαστής Git θα ξεκινήσει όταν ο χρήστης χρειάζεται να επεξεργαστεί κάποιο κείμενο (για παράδειγμα ένα μήνυμα αποστολής).
Εάν είναι απενεργοποιημένη, θα χρησιμοποιηθεί `EDITOR`.

*`GIT_EDITOR`* is the editor Git will launch when the user needs to edit some text (a commit message, for example).
If unset, `EDITOR` will be used.


==== Τοποθεσίες αποθετηρίων

Το Git χρησιμοποιεί διάφορες μεταβλητές περιβάλλοντος για να καθορίσει τον τρόπο με τον οποίο συνδέεται με την τρέχουσα αποθήκη.

* 'GIT_DIR` * είναι η θέση του φακέλου `.git`.
Εάν αυτό δεν έχει καθοριστεί, το Git περνάει πάνω στο δέντρο του καταλόγου μέχρι να φτάσει στο `~` ή `/`, αναζητώντας έναν κατάλογο `.git` σε κάθε βήμα.

Git uses several environment variables to determine how it interfaces with the current repository.

*`GIT_DIR`* is the location of the `.git` folder.
If this isn't specified, Git walks up the directory tree until it gets to `~` or `/`, looking for a `.git` directory at every step.

*`GIT_CEILING_DIRECTORIES`* controls the behavior of searching for a `.git` directory.
If you access directories that are slow to load (such as those on a tape drive, or across a slow network connection), you may want to have Git stop trying earlier than it might otherwise, especially if Git is invoked when building your shell prompt.

* Το `GIT_CEILING_DIRECTORIES` * ελέγχει τη συμπεριφορά αναζήτησης ενός καταλόγου` .git`.
Εάν αποκτήσουμε πρόσβαση σε καταλόγους με αργούς ρυθμούς φόρτωσης (όπως σε μονάδες μαγνητοταινίας ή σε αργή σύνδεση δικτύου), ίσως να θέλουμε να σταματήσουμε να δοκιμάζουμε το Git νωρίτερα από ό, τι θα μπορούσε διαφορετικά, ειδικά αν το Git είναι ενεργοποιημένη κατά τη δημιουργία της εντολής του κελύφους .

*`GIT_WORK_TREE`* is the location of the root of the working directory for a non-bare repository.
If not specified, the parent directory of `$GIT_DIR` is used.

* 'GIT_WORK_TREE` * είναι η θέση της ρίζας του καταλόγου εργασίας για ένα μη γυμνό αποθετήριο.
Εάν δεν έχει καθοριστεί, χρησιμοποιείται ο γονικός κατάλογος του `$ GIT_DIR`.

**`GIT_INDEX_FILE`* is the path to the index file (non-bare repositories only).

*`GIT_OBJECT_DIRECTORY`* can be used to specify the location of the directory that usually resides at `.git/objects`.

* 'GIT_OBJECT_DIRECTORY` * μπορεί να χρησιμοποιηθεί για να καθορίσει τη θέση του καταλόγου που συνήθως βρίσκεται στο `.git / objects'.

* `GIT_ALTERNATE_OBJECT_DIRECTORIES` * είναι μια λίστα με διαχωρισμό του παχέος εντέρου (μορφοποιημένη όπως` / dir / one: / dir / two: ... `), η οποία λέει στο Git πού να ελέγξει για αντικείμενα αν δεν είναι στο` GIT_OBJECT_DIRECTORY`.
Αν τυχαίνει να έχουμε πολλά έργα με μεγάλα αρχεία που έχουν ακριβώς το ίδιο περιεχόμενο, αυτό μπορεί να χρησιμοποιηθεί για να αποφευχθεί η αποθήκευση πάρα πολλών αντιγράφων τους.

*`GIT_ALTERNATE_OBJECT_DIRECTORIES`* is a colon-separated list (formatted like `/dir/one:/dir/two:…`) which tells Git where to check for objects if they aren't in `GIT_OBJECT_DIRECTORY`.
If you happen to have a lot of projects with large files that have the exact same contents, this can be used to avoid storing too many copies of them.


==== Pathspecs

Ένα `` pathspec '' αναφέρεται στον τρόπο καθορισμού των διαδρομών στα πράγματα στο Git, συμπεριλαμβανομένης της χρήσης μπαλαντέρ.
Αυτά χρησιμοποιούνται στο αρχείο `.gitignore`, αλλά και στη γραμμή εντολών (` git add * .c`).

A ``pathspec'' refers to how you specify paths to things in Git, including the use of wildcards.
These are used in the `.gitignore` file, but also on the command-line (`git add *.c`).

* `GIT_GLOB_PATHSPECS` και` GIT_NOGLOB_PATHSPECS` * ελέγχουν την προεπιλεγμένη συμπεριφορά των μπαλαντέρ στα pathspecs.
Αν ο χαρακτήρας "GIT_GLOB_PATHSPECS" έχει οριστεί σε 1, οι χαρακτήρες μπαλαντέρ δρουν ως μπαλαντέρ (η οποία είναι η προεπιλογή). αν ο χαρακτήρας "GIT_NOGLOB_PATHSPECS" έχει οριστεί σε 1, οι χαρακτήρες μπαλαντέρ ταιριάζουν μόνοι τους, κάτι που σημαίνει ότι κάτι σαν '* .c' θα αντιστοιχούσε μόνο σε ένα αρχείο _named_ `` * .c '', αντί σε οποιοδήποτε αρχείο του οποίου το όνομα τελειώνει με `.
Μπορούμε να παρακάμψουμε αυτό σε μεμονωμένες περιπτώσεις ξεκινώντας το pathspec με `: (glob)` ή `: (literal)`, όπως στο `: (glob) *. C`.

*`GIT_GLOB_PATHSPECS` and `GIT_NOGLOB_PATHSPECS`* control the default behavior of wildcards in pathspecs.
If `GIT_GLOB_PATHSPECS` is set to 1, wildcard characters act as wildcards (which is the default); if `GIT_NOGLOB_PATHSPECS` is set to 1, wildcard characters only match themselves, meaning something like `*.c` would only match a file _named_ ``*.c'', rather than any file whose name ends with `.c`.
You can override this in individual cases by starting the pathspec with `:(glob)` or `:(literal)`, as in `:(glob)*.c`.

*`GIT_LITERAL_PATHSPECS`* disables both of the above behaviors; no wildcard characters will work, and the override prefixes are disabled as well.

* 'GIT_LITERAL_PATHSPECS` * απενεργοποιεί και τις δύο παραπάνω συμπεριφορές. δεν θα λειτουργούν χαρακτήρες μπαλαντέρ και τα προθέματα παράκαμψης θα απενεργοποιηθούν επίσης.

* 'GIT_ICASE_PATHSPECS` * ορίζει όλα τα pathspecs να λειτουργούν με τρόπο ανύπαρκτο.

*`GIT_ICASE_PATHSPECS`* sets all pathspecs to work in a case-insensitive manner.


==== Committing

Η τελική δημιουργία ενός αντικειμένου υποβολής Git γίνεται συνήθως με το `git-commit-tree`, το οποίο χρησιμοποιεί αυτές τις μεταβλητές περιβάλλοντος ως την κύρια πηγή πληροφόρησης, που επιστρέφει στις τιμές διαμόρφωσης μόνο αν αυτές δεν υπάρχουν.

The final creation of a Git commit object is usually done by `git-commit-tree`, which uses these environment variables as its primary source of information, falling back to configuration values only if these aren't present.

*`GIT_AUTHOR_NAME`* is the human-readable name in the ``author'' field.

* Το "GIT_AUTHOR_NAME" * είναι το όνομα που μπορεί να αναγνωστεί από τον άνθρωπο στο πεδίο "συγγραφέας".

* 'GIT_AUTHOR_EMAIL` * είναι το email για το πεδίο `` συγγραφέας' '.

*`GIT_AUTHOR_EMAIL`* is the email for the ``author'' field.

*`GIT_AUTHOR_DATE`* is the timestamp used for the ``author'' field.

* Το "GIT_AUTHOR_DATE" * είναι το χρονικό σημάδι που χρησιμοποιείται για το πεδίο `` author ''.

* 'GIT_COMMITTER_NAME` * ορίζει το ανθρώπινο όνομα για το πεδίο `` committer' '.

*`GIT_COMMITTER_NAME`* sets the human name for the ``committer'' field.

*`GIT_COMMITTER_EMAIL`* is the email address for the ``committer'' field.

* 'GIT_COMMITTER_EMAIL` * είναι η διεύθυνση ηλεκτρονικού ταχυδρομείου για το πεδίο `` committer' '.

* 'GIT_COMMITTER_DATE` * χρησιμοποιείται για τη χρονική σήμανση στο πεδίο `` committer' '.

**`GIT_COMMITTER_DATE`* is used for the timestamp in the ``committer'' field.

*`EMAIL`* is the fallback email address in case the `user.email` configuration value isn't set.
If _this_ isn't set, Git falls back to the system user and host names.

* Το `EMAIL` * είναι η διεύθυνση ηλεκτρονικού ταχυδρομείου εναλλαγής σε περίπτωση που δεν έχει οριστεί η τιμή διαμόρφωσης` user.email`.
Εάν το _this_ δεν έχει οριστεί, το Git επιστρέφει στο όνομα του χρήστη και του συστήματος.


==== Networking

Git uses the `curl` library to do network operations over HTTP, so *`GIT_CURL_VERBOSE`* tells Git to emit all the messages generated by that library.
This is similar to doing `curl -v` on the command line.

Το Git χρησιμοποιεί τη βιβλιοθήκη `curl` για να κάνει λειτουργίες δικτύου μέσω HTTP, έτσι * * GIT_CURL_VERBOSE` * λέει στο Git να εκπέμπει όλα τα μηνύματα που δημιουργούνται από αυτήν τη βιβλιοθήκη.
Αυτό είναι παρόμοιο με το `curl -v` στη γραμμή εντολών.

* 'GIT_SSL_NO_VERIFY` * λέει στο Git να μην επαληθεύει τα πιστοποιητικά SSL.
Αυτό μπορεί μερικές φορές να είναι απαραίτητο αν χρησιμοποιούμε πιστοποιητικό που έχει υπογράψει αυτομάτως για να προβάλλουμε αποθετήρια Git μέσω HTTPS ή είστε στη μέση της δημιουργίας ενός διακομιστή Git αλλά δεν έχουμε εγκαταστήσει ακόμα ένα πλήρες πιστοποιητικό.

*`GIT_SSL_NO_VERIFY`* tells Git not to verify SSL certificates.
This can sometimes be necessary if you're using a self-signed certificate to serve Git repositories over HTTPS, or you're in the middle of setting up a Git server but haven't installed a full certificate yet.

If the data rate of an HTTP operation is lower than *`GIT_HTTP_LOW_SPEED_LIMIT`* bytes per second for longer than *`GIT_HTTP_LOW_SPEED_TIME`* seconds, Git will abort that operation.
These values override the `http.lowSpeedLimit` and `http.lowSpeedTime` configuration values.

Εάν ο ρυθμός δεδομένων μιας λειτουργίας HTTP είναι μικρότερος από * * GIT_HTTP_LOW_SPEED_LIMIT` * bytes ανά δευτερόλεπτο για περισσότερο από * * δευτερόλεπτα, το Git θα ακυρώσει αυτή τη λειτουργία.
Αυτές οι τιμές υπερισχύουν των τιμών διαμόρφωσης `http.lowSpeedLimit` και` http.lowSpeedTime`.

* 'GIT_HTTP_USER_AGENT` * ορίζει τη συμβολοσειρά χρήστη-παράγοντα που χρησιμοποιείται από το Git κατά την επικοινωνία μέσω HTTP.
Η προεπιλογή είναι μια τιμή όπως `git / 2.0.0`.

*`GIT_HTTP_USER_AGENT`* sets the user-agent string used by Git when communicating over HTTP.
The default is a value like `git/2.0.0`.


==== Diff και συγχώνευση

*`GIT_DIFF_OPTS`* is a bit of a misnomer.
The only valid values are `-u<n>` or `--unified=<n>`, which controls the number of context lines shown in a `git diff` command.

* 'GIT_DIFF_OPTS` * είναι ένα κομμάτι μιας εσφαλμένης ονομασίας.
Οι μόνο έγκυρες τιμές είναι `-u <n>` ή `--unified = <n>`, που ελέγχει τον αριθμό των γραμμών περιβάλλοντος που εμφανίζονται σε μια εντολή `git diff`.

* 'GIT_EXTERNAL_DIFF` * χρησιμοποιείται ως αντικατάσταση για την τιμή διαμόρφωσης `diff.external`.
Εάν έχει οριστεί, το Git θα επικαλεσθεί αυτό το πρόγραμμα όταν καλείται `git diff`.

*`GIT_EXTERNAL_DIFF`* is used as an override for the `diff.external` configuration value.
If it's set, Git will invoke this program when `git diff` is invoked.

*`GIT_DIFF_PATH_COUNTER`* and *`GIT_DIFF_PATH_TOTAL`* are useful from inside the program specified by `GIT_EXTERNAL_DIFF` or `diff.external`.
The former represents which file in a series is being diffed (starting with 1), and the latter is the total number of files in the batch.

* 'GIT_DIFF_PATH_COUNTER` * και * `GIT_DIFF_PATH_TOTAL` * είναι χρήσιμα από το εσωτερικό του προγράμματος που καθορίζεται από το` GIT_EXTERNAL_DIFF` ή' diff.external`.
Το πρώτο αντιπροσωπεύει ποιο αρχείο σε μια σειρά διαφέρει (ξεκινώντας από το 1), και το τελευταίο είναι ο συνολικός αριθμός αρχείων της παρτίδας.

* Το `GIT_MERGE_VERBOSITY` * ελέγχει την έξοδο για τη στρατηγική αναδρομικής συγχώνευσης.
Οι επιτρεπόμενες τιμές είναι οι εξής:

*`GIT_MERGE_VERBOSITY`* controls the output for the recursive merge strategy.
The allowed values are as follows:

* 0 δεν εξάγει τίποτα, εκτός πιθανώς από ένα μήνυμα σφάλματος.
* 1 δείχνει μόνο συγκρούσεις.
* 2 εμφανίζει επίσης αλλαγές αρχείων.
* 3 δείχνει πότε παραλείπονται τα αρχεία επειδή δεν έχουν αλλάξει.
* 4 δείχνει όλα τα μονοπάτια κατά την επεξεργασία τους.
* 5 και πάνω δείχνουν λεπτομερείς πληροφορίες αποσφαλμάτωσης.

Η προεπιλεγμένη τιμή είναι η 2.

==== Αποσφαλμάτωση

Θέλουμε να μάθουμε τι _πραγματικά_ κάνει το Git;
Το Git έχει μια αρκετά ολοκληρωμένη σειρά ενσωματωμένων ιχνών και το μόνο που χρειάζεται να κάνουμε είναι να τα ενεργοποιήσουμε.
Οι πιθανές τιμές αυτών των μεταβλητών είναι οι εξής:

Want to _really_ know what Git is up to?
Git has a fairly complete set of traces embedded, and all you need to do is turn them on.

* ``true'', ``1'' ή ``2'' --η κατηγορία ΧΧΧtraceXXX ίχνους γράφεται στην stderr.
* Μια απόλυτη διαδρομή που αρχίζει με `/` --η έξοδος ΧΧΧ trace XXX ίχνους θα γραφτεί σε αυτό το αρχείο.

H *`GIT_TRACE`* ελέγχει γενικά XXX traces XXX ίχνη, τα οποία δεν ταιριάζουν σε κάποια συγκεκριμένη κατηγορία.
Αυτό περιλαμβάνει την επέκταση των ψευδώνυμων (aliases) και την ανάθεση σε άλλα υποπρογράμματα.

[source,console]
----
$ GIT_TRACE=true git lga
20:12:49.877982 git.c:554               trace: exec: 'git-lga'
20:12:49.878369 run-command.c:341       trace: run_command: 'git-lga'
20:12:49.879529 git.c:282               trace: alias expansion: lga => 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.879885 git.c:349               trace: built-in: git 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.899217 run-command.c:341       trace: run_command: 'less'
20:12:49.899675 run-command.c:192       trace: exec: 'less'
----

* 'GIT_TRACE_PACK_ACCESS` * ελέγχει τον εντοπισμό της πρόσβασης packfile.
Το πρώτο πεδίο είναι το πακέτο packfile στο οποίο έχουμε πρόσβαση, το δεύτερο είναι η μετατόπιση μέσα σε αυτό το αρχείο:

*`GIT_TRACE_PACK_ACCESS`* controls tracing of packfile access.
The first field is the packfile being accessed, the second is the offset within that file:

[source,console]
----
$ GIT_TRACE_PACK_ACCESS=true git status
20:10:12.081397 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 12
20:10:12.081886 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 34662
20:10:12.082115 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 35175
# […]
20:10:12.087398 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 56914983
20:10:12.087419 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 14303666
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

* Το `GIT_TRACE_PACKET` * επιτρέπει τον εντοπισμό σε επίπεδο πακέτου για λειτουργίες δικτύου.

[source,console]
----
$ GIT_TRACE_PACKET=true git ls-remote origin
20:15:14.867043 pkt-line.c:46           packet:          git< # service=git-upload-pack
20:15:14.867071 pkt-line.c:46           packet:          git< 0000
20:15:14.867079 pkt-line.c:46           packet:          git< 97b8860c071898d9e162678ea1035a8ced2f8b1f HEAD\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress include-tag multi_ack_detailed no-done symref=HEAD:refs/heads/master agent=git/2.0.4
20:15:14.867088 pkt-line.c:46           packet:          git< 0f20ae29889d61f2e93ae00fd34f1cdb53285702 refs/heads/ab/add-interactive-show-diff-func-name
20:15:14.867094 pkt-line.c:46           packet:          git< 36dc827bc9d17f80ed4f326de21247a5d1341fbc refs/heads/ah/doc-gitk-config
# […]
----

* Το στοιχείο `GIT_TRACE_PERFORMANCE` * ελέγχει την καταγραφή δεδομένων απόδοσης.
Η έξοδος δείχνει πόσο καιρό κάθε συγκεκριμένη επίκληση git παίρνει.

*`GIT_TRACE_PERFORMANCE`* controls logging of performance data.
The output shows how long each particular git invocation takes.

[source,console]
----
$ GIT_TRACE_PERFORMANCE=true git gc
20:18:19.499676 trace.c:414             performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune'
20:18:19.845585 trace.c:414             performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all'
Counting objects: 170994, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (43413/43413), done.
Writing objects: 100% (170994/170994), done.
Total 170994 (delta 126176), reused 170524 (delta 125706)
20:18:23.567927 trace.c:414             performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack'
20:18:23.584728 trace.c:414             performance: 0.000910000 s: git command: 'git' 'prune-packed'
20:18:23.605218 trace.c:414             performance: 0.017972000 s: git command: 'git' 'update-server-info'
20:18:23.606342 trace.c:414             performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago'
Checking connectivity: 170994, done.
20:18:25.225424 trace.c:414             performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago'
20:18:25.232403 trace.c:414             performance: 0.001051000 s: git command: 'git' 'rerere' 'gc'
20:18:25.233159 trace.c:414             performance: 6.112217000 s: git command: 'git' 'gc'
----

* Το `GIT_TRACE_SETUP` * εμφανίζει πληροφορίες για το τι ανακάλυψε το Git σχετικά με το χώρο αποθήκευσης και το περιβάλλον με το οποίο αλληλεπιδρά.

*`GIT_TRACE_SETUP`* shows information about what Git is discovering about the repository and environment it's interacting with.

[source,console]
----
$ GIT_TRACE_SETUP=true git status
20:19:47.086765 trace.c:315             setup: git_dir: .git
20:19:47.087184 trace.c:316             setup: worktree: /Users/ben/src/git
20:19:47.087191 trace.c:317             setup: cwd: /Users/ben/src/git
20:19:47.087194 trace.c:318             setup: prefix: (null)
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

==== Miscellaneous

*`GIT_SSH`*, if specified, is a program that is invoked instead of `ssh` when Git tries to connect to an SSH host.
It is invoked like `$GIT_SSH [username@]host [-p <port>] <command>`.
Note that this isn't the easiest way to customize how `ssh` is invoked; it won't support extra command-line parameters, so you'd have to write a wrapper script and set `GIT_SSH` to point to it.
It's probably easier just to use the `~/.ssh/config` file for that.

* 'GIT_SSH` *, αν ορίζεται, είναι ένα πρόγραμμα που καλείται αντί του `ssh` όταν το Git προσπαθεί να συνδεθεί με έναν κεντρικό υπολογιστή SSH.
Ονομάζεται "$ GIT_SSH [username @] κεντρικός υπολογιστής [-p <port>] <command>.
Σημειώστε ότι αυτό δεν είναι ο ευκολότερος τρόπος για να προσαρμόσουμε τον τρόπο που καλείται `ssh`. δεν θα υποστηρίζει επιπλέον παραμέτρους γραμμής εντολών, οπότε θα πρέπει να γράψουμε ένα σενάριο περιτυλίγματος και να ορίσουμε το `GIT_SSH` για να το δείξουμε.
Ίσως είναι πιο εύκολο να χρησιμοποιήσουμε το αρχείο ~~ / .ssh / config για αυτό.

* 'GIT_ASKPASS` * είναι μια παράκαμψη για την τιμή διαμόρφωσης `core.askpass`.
Αυτό είναι το πρόγραμμα που καλείται κάθε φορά που το Git χρειάζεται να ζητήσει από το χρήστη διαπιστευτήρια, τα οποία μπορούν να αναμένουν μια ερώτηση κειμένου ως επιχειρήματα γραμμής εντολών και θα πρέπει να επιστρέψουν την απάντηση στο `stdout`.
(Δούμε << _ credential_caching >> για περισσότερα σχετικά με αυτό το υποσύστημα.)

*`GIT_ASKPASS`* is an override for the `core.askpass` configuration value.
This is the program invoked whenever Git needs to ask the user for credentials, which can expect a text prompt as a command-line argument, and should return the answer on `stdout`.
(See <<_credential_caching>> for more on this subsystem.)

*`GIT_NAMESPACE`* controls access to namespaced refs, and is equivalent to the `--namespace` flag.
This is mostly useful on the server side, where you may want to store multiple forks of a single repository in one repository, only keeping the refs separate.

* Το `GIT_NAMESPACE` * ελέγχει την πρόσβαση στις αναφορές των ονομάτων και είναι ισοδύναμη με τη σημαία` --namespace`.
Αυτό είναι ως επί το πλείστον χρήσιμο στην πλευρά του διακομιστή, όπου μπορεί να θέλουμε να αποθηκεύσουμε πολλαπλές πιρούνες ενός αποθετηρίου σε ένα αποθετήριο, διατηρώντας μόνο τους φακέλους ξεχωριστά.

* Το 'GIT_FLUSH` * μπορεί να χρησιμοποιηθεί για να αναγκάσει το Git να χρησιμοποιήσει I / O χωρίς buffery όταν γράφει σταδιακά στο stdout.
Μια τιμή του 1 προκαλεί την εκκαθάριση του Git πιο συχνά, μια τιμή 0 προκαλεί την προσωρινή αποθήκευση όλων των εξόδων.
Η προεπιλεγμένη τιμή (εάν αυτή η μεταβλητή δεν έχει οριστεί) είναι να επιλέξουμε ένα κατάλληλο πρόγραμμα προσωρινής αποθήκευσης, ανάλογα με τη δραστηριότητα και τη λειτουργία εξόδου.

*`GIT_FLUSH`* can be used to force Git to use non-buffered I/O when writing incrementally to stdout.
A value of 1 causes Git to flush more often, a value of 0 causes all output to be buffered.
The default value (if this variable is not set) is to choose an appropriate buffering scheme depending on the activity and the output mode.

* 'GIT_REFLOG_ACTION` * μας επιτρέπει να καθορίσουμε το περιγραφικό κείμενο που γράφτηκε στο reflog.
Ακολουθεί ένα παράδειγμα:

*`GIT_REFLOG_ACTION`* lets you specify the descriptive text written to the reflog.
Here's an example:

[source,console]
----
$ GIT_REFLOG_ACTION="my action" git commit --allow-empty -m 'my message'
[master 9e3d55a] my message
$ git reflog -1
9e3d55a HEAD@{0}: my action: my message
----
