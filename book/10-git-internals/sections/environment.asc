=== Environment Variables
===Mga Variable sa Kapaligiran
Git always runs inside a `bash` shell, and uses a number of shell environment variables to determine how it behaves.
Occasionally, it comes in handy to know what these are, and how they can be used to make Git behave the way you want it to.
This isn't an exhaustive list of all the environment variables Git pays attention to, but we'll cover the most useful.
Laging tumatakbo ang Git sa loob ng isang bash shell, at gumagamit ng isang bilang ng mga variable ng kapaligiran ng shell upang matukoy kung paano ito kumikilos. Paminsan-minsan, ito ay madaling gamitin upang malaman kung ano ang mga ito, at kung paano sila maaaring magamit upang gawing kumilos ang Git sa paraang gusto mo. Ito ay hindi isang malawakan na listahan ng lahat ng mga variable ng kapaligiran Git ay binabayaran ng pansin, ngunit tutugunan namin ang pinakamahalaga.


==== Global Behavior
==== Ugali ng Global

Some of Git's general behavior as a computer program depends on environment variables.
Ang ilan sa pangkalahatang pag-uugali ng Git bilang isang programa sa computer ay depende sa mga variable ng kapaligiran.

*`GIT_EXEC_PATH`* determines where Git looks for its sub-programs (like `git-commit`, `git-diff`, and others).
  You can check the current setting by running `git --exec-path`.
  Tinutukoy ng 'GIT_EXEC_PATH' kung saan hinahanap ng Git ang mga sub-program (tulad ng git-commit, git-diff, at iba pa). Maaari mong suriin ang kasalukuyang setting sa pamamagitan ng pagtakbo ng git -exec-path.


*`HOME`* isn't usually considered customizable (too many other things depend on it), but it's where Git looks for the global configuration file.
  If you want a truly portable Git installation, complete with global configuration, you can override `HOME` in the portable Git's shell profile.
  Ang 'HOME' ay hindi karaniwang itinuturing na napapasadyang (masyadong maraming iba pang mga bagay na nakasalalay dito), ngunit ito ay kung saan hinahanap ng Git ang pandaigdigang configuration file. Kung nais mo ang isang tunay na portable na pag-install ng Git, kumpleto sa pandaigdigang pagsasaayos, maaari mong i-override ang HOME sa profile ng shell ng portable Git.

*`PREFIX`* is similar, but for the system-wide configuration.
  Git looks for this file at `$PREFIX/etc/gitconfig`.
  Ang 'PREFIX' ay katulad, ngunit para sa pagsasaayos ng buong sistema. Tinitingnan ng Git ang file na ito sa '$ PREFIX / etc / gitconfig'.

*`GIT_CONFIG_NOSYSTEM`*, if set, disables the use of the system-wide configuration file.
  This is useful if your system config is interfering with your commands, but you don't have access to change or remove it.
  Ang 'GIT_CONFIG_NOSYSTEM', kung nakatakda, ay hindi pinapagana ang paggamit ng buong file na configuration ng system. Ito ay kapaki-pakinabang kung ang config ng iyong system ay nakakasagabal sa iyong mga utos, ngunit wala kang access upang baguhin o alisin ito.

*`GIT_PAGER`* controls the program used to display multi-page output on the command line.
If this is unset, `PAGER` will be used as a fallback.
Kinokontrol ng 'GIT_PAGER' ang programang ginagamit upang ipakita ang output ng multi-page sa command line. Kung ito ay hindi naka-set, ang PAGER ay gagamitin bilang fallback.

*`GIT_EDITOR`* is the editor Git will launch when the user needs to edit some text (a commit message, for example).
If unset, `EDITOR` will be used.
Ang 'GIT_EDITOR' ay ilulunsad ng editor Git kapag kailangan ng user na i-edit ang ilang teksto (isang mensahe ng gumawa, halimbawa). Kung hindi magamit, ang EDITOR ay gagamitin.

==== Repository Locations
==== Mga Lokasyon ng Repository

Git uses several environment variables to determine how it interfaces with the current repository.
Gumagamit ang Git ng maraming mga variable ng kapaligiran upang matukoy kung paano ito nakikipag-ugnayan sa kasalukuyang repository.

*`GIT_DIR`* is the location of the `.git` folder.
If this isn't specified, Git walks up the directory tree until it gets to `~` or `/`, looking for a `.git` directory at every step.
Ang 'GIT_DIR' ay ang lokasyon ng .git na folder. Kung hindi ito tinukoy, ang Git ay naglalakad sa puno ng direktoryo hanggang sa nakakakuha ito sa ~ o /, naghahanap ng isang .git na direktoryo sa bawat hakbang.

*`GIT_CEILING_DIRECTORIES`* controls the behavior of searching for a `.git` directory.
If you access directories that are slow to load (such as those on a tape drive, or across a slow network connection), you may want to have Git stop trying earlier than it might otherwise, especially if Git is invoked when building your shell prompt.
Kinokontrol ng 'GIT_CEILING_DIRECTORIES' ang pag-uugali ng paghahanap sa isang .git na direktoryo. Kung ma-access mo ang mga direktoryo na mabagal na i-load (tulad ng mga nasa isang tape drive, o sa isang mabagal na koneksyon sa network), maaaring gusto mong huminto ang Git na sinusubukan nang mas maaga kaysa sa kung hindi man, lalo na kung ang Git ay mahihingi kapag ang pagtatayo ng iyong shell prompt .

*`GIT_WORK_TREE`* is the location of the root of the working directory for a non-bare repository. If --git-dir or GIT_DIR is specified but none of --work-tree, GIT_WORK_TREE and core.worktree is specified, the current working directory is regarded as the top level of your working tree.
Ang 'GIT_WORK_TREE' ay ang lokasyon ng ugat ng direktoryo ng nagtatrabaho para sa isang di-hubad lalagyan. Kung ang - git-dir o GIT_DIR ay tinukoy ngunit wala sa - gawa-puno, GIT_WORK_TREE at core.worktree ay tinukoy, ang kasalukuyang gumaganang direktoryo ay itinuturing na ang pinakamataas na antas ng iyong gumaganang puno.

*`GIT_INDEX_FILE`* is the path to the index file (non-bare repositories only).
Ang 'GIT_INDEX_FILE' ay ang landas sa index na file (hindi naiiwan lamang na mga repositoryo).

*`GIT_OBJECT_DIRECTORY`* can be used to specify the location of the directory that usually resides at `.git/objects`.
Maaaring gamitin ang 'GIT_OBJECT_DIRECTORY' upang tukuyin ang lokasyon ng direktoryo na kadalasang namamalagi sa .git / mga bagay.

*`GIT_ALTERNATE_OBJECT_DIRECTORIES`* is a colon-separated list (formatted like `/dir/one:/dir/two:â€¦`) which tells Git where to check for objects if they aren't in `GIT_OBJECT_DIRECTORY`.
If you happen to have a lot of projects with large files that have the exact same contents, this can be used to avoid storing too many copies of them.
Ang 'GIT_ALTERNATE_OBJECT_DIRECTORIES' ay isang listahan na pinaghihiwalay ng colon (na-format tulad ng / dir / isa: / dir / two: ...) na nagsasabi sa Git kung saan mag-check para sa mga bagay kung wala sila sa GIT_OBJECT_DIRECTORY. Kung mangyari mong magkaroon ng maraming mga proyekto na may malalaking file na may eksaktong parehong mga nilalaman, maaari itong magamit upang maiwasan ang pag-iimbak ng napakaraming mga kopya ng mga ito.

==== Pathspecs
==== Mga Pathspec

A ``pathspec'' refers to how you specify paths to things in Git, including the use of wildcards.
These are used in the `.gitignore` file, but also on the command-line (`git add *.c`).
Ang isang `pathspec '' ay tumutukoy sa kung paano mo tinukoy ang mga landas sa mga bagay sa Git, kabilang ang paggamit ng mga wildcard. Ang mga ito ay ginagamit sa `.gitignore na file, ngunit din sa command-line (git add * .c).

*`GIT_GLOB_PATHSPECS` and `GIT_NOGLOB_PATHSPECS`* control the default behavior of wildcards in pathspecs.
If `GIT_GLOB_PATHSPECS` is set to 1, wildcard characters act as wildcards (which is the default); if `GIT_NOGLOB_PATHSPECS` is set to 1, wildcard characters only match themselves, meaning something like `*.c` would only match a file _named_ ``*.c'', rather than any file whose name ends with `.c`.
You can override this in individual cases by starting the pathspec with `:(glob)` or `:(literal)`, as in `:(glob)*.c`.
Kinokontrol ng GIT_GLOB_PATHSPECS at GIT_NOGLOB_PATHSPECS ang default na pag-uugali ng mga wildcard sa mga pathspec. Kung ang GIT_GLOB_PATHSPECS ay nakatakda sa 1, ang mga karakter na wildcard ay kumikilos bilang mga wildcard (na siyang default); kung ang GIT_NOGLOB_PATHSPECS ay naka-set sa 1, ang mga wildcard na character ay tumutugma lamang sa kanilang sarili, ibig sabihin isang bagay na tulad ng .c ay tumutugma lamang sa isang file na pinangalanan `.c '', sa halip na anumang file na ang pangalan ay nagtatapos sa` .c. Maaari mong i-override ito sa mga indibidwal na kaso sa pamamagitan ng pagsisimula ng pathspec sa: (glob) o: (literal), tulad ng sa: (glob) *. C.

*`GIT_LITERAL_PATHSPECS`* disables both of the above behaviors; no wildcard characters will work, and the override prefixes are disabled as well.
Ang 'GIT_LITERAL_PATHSPECS' ay hindi pinapagana ang parehong mga pag-uugali sa itaas; walang mga wildcard character ang gagana, at ang mga prefix na override ay hindi pinagana.

*`GIT_ICASE_PATHSPECS`* sets all pathspecs to work in a case-insensitive manner.
Ang 'GIT_ICASE_PATHSPECS' ay nagtatakda ng lahat ng mga pathspec na magtrabaho sa isang case-insensitive na paraan.


==== Committing
==== Nagsasagawa

The final creation of a Git commit object is usually done by `git-commit-tree`, which uses these environment variables as its primary source of information, falling back to configuration values only if these aren't present.
Ang pangwakas na paglikha ng isang Git na bagay na gagawin ay kadalasang ginagawa ng git-commit-tree, na gumagamit ng mga variable ng kapaligiran na ito bilang pangunahing pinagmumulan ng impormasyon, na bumabalik sa mga halaga ng configuration lamang kung wala ito.

*`GIT_AUTHOR_NAME`* is the human-readable name in the ``author'' field.
Ang 'GIT_AUTHOR_NAME' ay ang pangalan ng tao na nababasa sa field ng `` may-akda '.

*`GIT_AUTHOR_EMAIL`* is the email for the ``author'' field.
Ang 'GIT_AUTHOR_EMAIL' ay ang email para sa field ng `` may-akda '.

*`GIT_AUTHOR_DATE`* is the timestamp used for the ``author'' field.
Ang 'GIT_AUTHOR_DATE' ay ang timestamp na ginamit para sa field ng `` may-akda '.

*`GIT_COMMITTER_NAME`* sets the human name for the ``committer'' field.
Itinatakda ng GIT_COMMITTER_NAME ang pangalan ng tao para sa field ng `` komitista '.

*`GIT_COMMITTER_EMAIL`* is the email address for the ``committer'' field.
Ang 'GIT_COMMITTER_EMAIL' ay ang email address para sa patlang na `` komitment ''.
*`GIT_COMMITTER_DATE`* is used for the timestamp in the ``committer'' field.
Ginagamit ang 'GIT_COMMITTER_DATE' para sa timestamp sa patlang na `` komitment ''.

*`EMAIL`* is the fallback email address in case the `user.email` configuration value isn't set.
If _this_ isn't set, Git falls back to the system user and host names.
Ang 'EMAIL' ay ang email address ng fallback kung ang halaga ng configuration ng user.email ay hindi nakatakda. Kung hindi ito nakatakda, ang Git ay babalik sa mga gumagamit ng system at mga pangalan ng host.


==== Networking
==== Networking

Git uses the `curl` library to do network operations over HTTP, so *`GIT_CURL_VERBOSE`* tells Git to emit all the messages generated by that library.
This is similar to doing `curl -v` on the command line.
Ginagamit ng Git ang 'curl' library upang magawa ang mga pagpapatakbo ng network sa HTTP, kaya 'GIT_CURL_VERBOSE' ay nagsasabi sa Git na humalimuyak ang lahat ng mga mensahe na binuo ng library na iyon. Ito ay katulad ng paggawa ng 'curl -v' sa command line.

*`GIT_SSL_NO_VERIFY`* tells Git not to verify SSL certificates.
This can sometimes be necessary if you're using a self-signed certificate to serve Git repositories over HTTPS, or you're in the middle of setting up a Git server but haven't installed a full certificate yet.
Ang 'GIT_SSL_NO_VERIFY' ay nagsasabi sa Git na huwag i-verify ang mga sertipiko ng SSL. Minsan ito ay kinakailangan kung gumagamit ka ng self-signed certificate upang maghatid ng mga repository ng Git sa HTTPS, o ikaw ay nasa gitna ng pag-set up ng isang Git server ngunit hindi pa naka-install ang buong certificate.


If the data rate of an HTTP operation is lower than *`GIT_HTTP_LOW_SPEED_LIMIT`* bytes per second for longer than *`GIT_HTTP_LOW_SPEED_TIME`* seconds, Git will abort that operation.
These values override the `http.lowSpeedLimit` and `http.lowSpeedTime` configuration values.
Kung ang rate ng data ng isang pagpapatakbo ng HTTP ay mas mababa kaysa sa GIT_HTTP_LOW_SPEED_LIMIT byte bawat segundo para sa mas mahaba kaysa sa 'GIT_HTTP_LOW_SPEED_TIME' na mga segundo, Git ay buburahin ang operasyon na iyon. Ang mga halagang ito ay pinapalitan ang http.lowSpeedLimit at http.lowSpeedTime na mga halaga ng configuration.

*`GIT_HTTP_USER_AGENT`* sets the user-agent string used by Git when communicating over HTTP.
The default is a value like `git/2.0.0`.
Itinatakda ng 'GIT_HTTP_USER_AGENT' ang string ng user-agent na ginagamit ng Git kapag nakikipag-usap sa HTTP. Ang default ay isang halaga tulad ng git / 2.0.0.

==== Diffing and Merging
==== Diffing at Pagsasama

*`GIT_DIFF_OPTS`* is a bit of a misnomer.
The only valid values are `-u<n>` or `--unified=<n>`, which controls the number of context lines shown in a `git diff` command.
Ang 'GIT_DIFF_OPTS' ay isang bit ng isang maling pangalan. Ang tanging balidong halaga ay -u <n> o --unified = <n>, na kumokontrol sa bilang ng mga linya ng konteksto na ipinapakita sa isang 'git diff' na utos.

*`GIT_EXTERNAL_DIFF`* is used as an override for the `diff.external` configuration value.
If it's set, Git will invoke this program when `git diff` is invoked.
Ginagamit ang 'GIT_EXTERNAL_DIFF' bilang isang override para sa halaga ng diff.external configuration. Kung ito ay naka-set, Git ay tatawagin ang program na ito kapag ang git diff ay nananawagan.
*`GIT_DIFF_PATH_COUNTER`* and *`GIT_DIFF_PATH_TOTAL`* are useful from inside the program specified by `GIT_EXTERNAL_DIFF` or `diff.external`.
The former represents which file in a series is being diffed (starting with 1), and the latter is the total number of files in the batch.
Ang 'GIT_DIFF_PATH_COUNTER' at 'GIT_DIFF_PATH_TOTAL' ay kapaki-pakinabang mula sa loob ng program na tinukoy ng 'GIT_EXTERNAL_DIFF' o 'diff.externa'l. Ang dating kumakatawan sa kung saan ang file sa isang serye ay diffed (simula sa 1), at ang huli ay ang kabuuang bilang ng mga file sa batch.

*`GIT_MERGE_VERBOSITY`* controls the output for the recursive merge strategy.
The allowed values are as follows:
Kinokontrol ng 'GIT_MERGE_VERBOSITY' ang output para sa rekursibong pagsasanib na diskarte. Ang mga pinahihintulutang halaga ay ang mga sumusunod

* 0 outputs nothing, except possibly a single error message.
0 ay walang output, maliban posibleng isang solong mensahe ng error.
* 1 shows only conflicts.
1 ay nagpapakita lamang ng mga salungatan.
* 2 also shows file changes.
2 ay nagpapakita rin ng mga pagbabago sa file.
* 3 shows when files are skipped because they haven't changed.
3 ay nagpapakita kung kailan lumaktaw ang mga file dahil hindi sila nagbago.
* 4 shows all paths as they are processed.
4 ay nagpapakita ng lahat ng landas habang pinoproseso ang mga ito.
* 5 and above show detailed debugging information.
5 at sa itaas ay nagpapakita ng detalyadong impormasyon sa pag-debug.

The default value is 2.
Ang default na halaga ay 2.

==== Debugging
==== Pag-debug 

Want to _really_ know what Git is up to?
Git has a fairly complete set of traces embedded, and all you need to do is turn them on.
The possible values of these variables are as follows:
Gustong malaman kung ano talaga ang Git? Ang Git ay may isang kumpletong kumpletong hanay ng mga bakas na naka-embed, at ang kailangan mong gawin ay i-on ito. Ang mga posibleng halaga ng mga variable na ito ay ang mga sumusunod: 

* ``true'', ``1'', or ``2'' â€“ the trace category is written to stderr.
* An absolute path starting with `/` â€“ the trace output will be written to that file.
totoo '', 1 '', o `` 2 '' - ang kategorya ng bakas ay isinulat sa stderr. Isang ganap na landas na nagsisimula sa '/' - ang bakas na output ay isusulat sa file na iyon.
*`GIT_TRACE`* controls general traces, which don't fit into any specific category.
This includes the expansion of aliases, and delegation to other sub-programs.
Kinokontrol ng 'GIT_TRACE' ang mga pangkalahatang bakas, na hindi magkasya sa anumang partikular na kategorya. Kabilang dito ang pagpapalawak ng mga alyas, at pagtatalaga sa iba pang mga sub-program.

[source,console]
----
$ GIT_TRACE=true git lga
20:12:49.877982 git.c:554               trace: exec: 'git-lga'
20:12:49.878369 run-command.c:341       trace: run_command: 'git-lga'
20:12:49.879529 git.c:282               trace: alias expansion: lga => 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.879885 git.c:349               trace: built-in: git 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.899217 run-command.c:341       trace: run_command: 'less'
20:12:49.899675 run-command.c:192       trace: exec: 'less'
----

*`GIT_TRACE_PACK_ACCESS`* controls tracing of packfile access.
The first field is the packfile being accessed, the second is the offset within that file:
Kinokontrol ng 'GIT_TRACE_PACK_ACCESS' ang pagsunod sa pag-access sa packfile. Ang unang field ay ang accessfile na na-access, ang pangalawang ay ang offset sa loob ng file na iyon:
[source,console]
----
$ GIT_TRACE_PACK_ACCESS=true git status
20:10:12.081397 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 12
20:10:12.081886 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 34662
20:10:12.082115 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 35175
# [â€¦]
20:10:12.087398 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 56914983
20:10:12.087419 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 14303666
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

*`GIT_TRACE_PACKET`* enables packet-level tracing for network operations.
Kinokontrol ng 'GIT_TRACE_PACK_ACCESS' ang pagsunod sa pag-access sa packfile. Ang unang field ay ang accessfile na na-access, ang pangalawang ay ang offset sa loob ng file na iyon:

[source,console]
----
$ GIT_TRACE_PACKET=true git ls-remote origin
20:15:14.867043 pkt-line.c:46           packet:          git< # service=git-upload-pack
20:15:14.867071 pkt-line.c:46           packet:          git< 0000
20:15:14.867079 pkt-line.c:46           packet:          git< 97b8860c071898d9e162678ea1035a8ced2f8b1f HEAD\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress include-tag multi_ack_detailed no-done symref=HEAD:refs/heads/master agent=git/2.0.4
20:15:14.867088 pkt-line.c:46           packet:          git< 0f20ae29889d61f2e93ae00fd34f1cdb53285702 refs/heads/ab/add-interactive-show-diff-func-name
20:15:14.867094 pkt-line.c:46           packet:          git< 36dc827bc9d17f80ed4f326de21247a5d1341fbc refs/heads/ah/doc-gitk-config
# [â€¦]
----

*`GIT_TRACE_PERFORMANCE`* controls logging of performance data.
The output shows how long each particular `git` invocation takes.
Kinokontrol ng 'GIT_TRACE_PERFORMANCE' ang pag-log ng data ng pagganap. Ang output ay nagpapakita kung gaano katagal ang bawat partikular na invocation git tumatagal.
[source,console]
----
$ GIT_TRACE_PERFORMANCE=true git gc
20:18:19.499676 trace.c:414             performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune'
20:18:19.845585 trace.c:414             performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all'
Counting objects: 170994, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (43413/43413), done.
Writing objects: 100% (170994/170994), done.
Total 170994 (delta 126176), reused 170524 (delta 125706)
20:18:23.567927 trace.c:414             performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack'
20:18:23.584728 trace.c:414             performance: 0.000910000 s: git command: 'git' 'prune-packed'
20:18:23.605218 trace.c:414             performance: 0.017972000 s: git command: 'git' 'update-server-info'
20:18:23.606342 trace.c:414             performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago'
Checking connectivity: 170994, done.
20:18:25.225424 trace.c:414             performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago'
20:18:25.232403 trace.c:414             performance: 0.001051000 s: git command: 'git' 'rerere' 'gc'
20:18:25.233159 trace.c:414             performance: 6.112217000 s: git command: 'git' 'gc'
----

*`GIT_TRACE_SETUP`* shows information about what Git is discovering about the repository and environment it's interacting with.
Ang 'GIT_TRACE_SETUP' ay nagpapakita ng impormasyon tungkol sa kung ano ang natutuklasan ng Git tungkol sa imbakan at kapaligiran na nakikipag-ugnay sa.

[source,console]
----
$ GIT_TRACE_SETUP=true git status
20:19:47.086765 trace.c:315             setup: git_dir: .git
20:19:47.087184 trace.c:316             setup: worktree: /Users/ben/src/git
20:19:47.087191 trace.c:317             setup: cwd: /Users/ben/src/git
20:19:47.087194 trace.c:318             setup: prefix: (null)
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

==== Miscellaneous
==== Miscellaneous

*`GIT_SSH`*, if specified, is a program that is invoked instead of `ssh` when Git tries to connect to an SSH host.
It is invoked like `$GIT_SSH [username@]host [-p <port>] <command>`.
Note that this isn't the easiest way to customize how `ssh` is invoked; it won't support extra command-line parameters, so you'd have to write a wrapper script and set `GIT_SSH` to point to it.
It's probably easier just to use the `~/.ssh/config` file for that.
Ang GIT_SSH, kung tinukoy, ay isang programa na hinihiling sa halip na ssh kapag sinusubukan ng Git na kumonekta sa isang SSH host. Ito ay tinatawag na $ GIT_SSH [username @] host [-p <port>] <command>. Tandaan na hindi ito ang pinakamadaling paraan upang i-customize kung paano ang tawag ay ssh; ito ay hindi sumusuporta sa dagdag na mga parameter ng command line, kaya kailangan mong magsulat ng balot script at itakda ang GIT_SSH upang ituro ito. Marahil ay madali lang gamitin ang ~ / .ssh / config na file para sa na.

*`GIT_ASKPASS`* is an override for the `core.askpass` configuration value.
This is the program invoked whenever Git needs to ask the user for credentials, which can expect a text prompt as a command-line argument, and should return the answer on `stdout`.
(See <<ch07-git-tools#_credential_caching>> for more on this subsystem.)
Ang 'GIT_ASKPASS' ay isang override para sa halaga ng configuration ng core.askpass. Ito ang programa na sinasabihan tuwing kailangan ng Git na tanungin ang gumagamit para sa mga kredensyal, na maaaring umasa ng isang text prompt bilang argumento ng command-line, at dapat ibalik ang sagot sa stdout. (Tingnan ang _git_tools.asc para sa higit pa sa subsystem na ito.)

*`GIT_NAMESPACE`* controls access to namespaced refs, and is equivalent to the `--namespace` flag.
This is mostly useful on the server side, where you may want to store multiple forks of a single repository in one repository, only keeping the refs separate.
Kinokontrol ng 'GIT_NAMESPACE' ang pag-access sa mga ref para sa namespaced, at katumbas ng --namespace na bandila. Ito ay halos kapaki-pakinabang sa gilid ng server, kung saan maaari mong iimbak ang maraming mga forks ng isang repository sa isang repositoryo, tanging pinapanatiling hiwalay ang mga ref.

*`GIT_FLUSH`* can be used to force Git to use non-buffered I/O when writing incrementally to stdout.
A value of 1 causes Git to flush more often, a value of 0 causes all output to be buffered.
The default value (if this variable is not set) is to choose an appropriate buffering scheme depending on the activity and the output mode.
Maaaring gamitin ang 'GIT_FLUSH 'upang pilitin ang Git na gamitin ang di-buffered I / O kapag sumusulat nang incrementally sa stdout. Ang isang halaga ng 1 ay nagiging sanhi ng Git upang mapaliit nang mas madalas, ang isang halaga ng 0 ay nagiging sanhi ng lahat ng output na buffered. Ang default na halaga (kung hindi nakatakda ang variable na ito) ay pumili ng naaangkop na buffering scheme depende sa aktibidad at output mode.
*`GIT_REFLOG_ACTION`* lets you specify the descriptive text written to the reflog.
Here's an example:
Ang 'GIT_REFLOG_ACTION' ay nagbibigay-daan sa iyong tukuyin ang mapaglarawang teksto na nakasulat sa reflog. Narito ang isang halimbawa:

[source,console]
----
$ GIT_REFLOG_ACTION="my action" git commit --allow-empty -m 'my message'
[master 9e3d55a] my message
$ git reflog -1
9e3d55a HEAD@{0}: my action: my message
----
