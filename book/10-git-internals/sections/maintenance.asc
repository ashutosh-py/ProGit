=== Συντήρηση και ανάκτηση δεδομένων

Περιστασιακά, ίσως χρειαστεί να κάνουμε κάποια εκκαθάριση - να καταστήσουμε ένα αποθετήριο πιο συμπαγές, να καθαρίσουμε ένα εισαγόμενο αποθετήριο ή να ανακτήσουμε τη χαμένη εργασία.
Αυτή η ενότητα θα καλύψει ορισμένα από αυτά τα σενάρια.

[[_git_gc]]
==== Συντήρηση

Περιστασιακά, το Git εκτελεί αυτόματα μια εντολή που ονομάζεται `` auto gc ''.
Τις περισσότερες φορές, αυτή η εντολή δεν κάνει τίποτα.
Ωστόσο, αν υπάρχουν πάρα πολλά χαλαρά αντικείμενα (αντικείμενα που δεν περιέχονται σε packfile) ή πάρα πολλά packfiles, το Git ξεκινά μια πλήρη εντολή `git gc`.
Το `` gc '' σημαίνει συλλογή σκουπιδιών και η εντολή κάνει πολλά πράγματα: συγκεντρώνει όλα τα χαλαρά αντικείμενα και τα τοποθουμεί σε πακέτα πακέτων, ενοποιεί πακέτα packfiles σε ένα μεγάλο packfile και αφαιρεί αντικείμενα που δεν είναι προσβάσιμα από οποιαδήποτε υποβολή και έχουν ηλικία λίγων μηνών.

Occasionally, Git automatically runs a command called ``auto gc''.
Most of the time, this command does nothing.
However, if there are too many loose objects (objects not in a packfile) or too many packfiles, Git launches a full-fledged `git gc` command.
The ``gc'' stands for garbage collect, and the command does a number of things: it gathers up all the loose objects and places them in packfiles, it consolidates packfiles into one big packfile, and it removes objects that aren't reachable from any commit and are a few months old.

Μπορούμε να εκτελέσουμε την `auto gc` αυτόματα ως εξής:

[source,console]
----
$ git gc --auto
----

Again, this generally does nothing.
You must have around 7,000 loose objects or more than 50 packfiles for Git to fire up a real gc command.
You can modify these limits with the `gc.auto` and `gc.autopacklimit` config settings, respectively.

Και πάλι, αυτό γενικά δεν κάνει τίποτα.
Πρέπει να έχουμε περίπου 7.000 χαλαρά αντικείμενα ή περισσότερα από 50 πακέτα για το Git να πυροβολήσει μια πραγματική εντολή gc.
Μπορούμε να τροποποιήσουμε αυτά τα όρια με τις ρυθμίσεις "gc.auto" και "gc.autopacklimit" αντίστοιχα.

Το άλλο πράγμα `gc` θα κάνει είναι να συσκευάσει τις αναφορές μας σε ένα μόνο αρχείο.
Ας υποθέσουμε ότι η αποθήκη μας περιέχει τους ακόλουθους κλάδους και ετικέτες:

The other thing `gc` will do is pack up your references into a single file.
Suppose your repository contains the following branches and tags:

[source,console]
----
$ find .git/refs -type f
.git/refs/heads/experiment
.git/refs/heads/master
.git/refs/tags/v1.0
.git/refs/tags/v1.1
----

Αν εκτελέσουμε το `git gc`, δεν θα έχουμε πλέον αυτά τα αρχεία στον κατάλογο` refs`.
Το Git θα τα μετακινήσει για λόγους αποτελεσματικότητας σε ένα αρχείο με όνομα `.git / packed-refs` που μοιάζει με αυτό:

If you run `git gc`, you'll no longer have these files in the `refs` directory.
Git will move them for the sake of efficiency into a file named `.git/packed-refs` that looks like this:

[source,console]
----
$ cat .git/packed-refs
# pack-refs with: peeled fully-peeled
cac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment
ab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master
cac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0
9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1
^1a410efbd13591db07496601ebc7a059dd55cfe9
----

Εάν ενημερώσουμε μια αναφορά, το Git δεν επεξεργάζεται αυτό το αρχείο, αλλά γράφει ένα νέο αρχείο σε `refs / heads '.
Για να αποκτήσει το κατάλληλο SHA-1 για μια δεδομένη αναφορά, το Git ελέγχει αυτή την αναφορά στον κατάλογο `refs` και στη συνέχεια ελέγχει το αρχείο` packed-refs` ως εναλλακτική λύση.
Ωστόσο, αν δεν μπορούμε να βρούμε μια αναφορά στον κατάλογο `refs`, πιθανότατα πρόκειται για το αρχείο` packed-refs`.

If you update a reference, Git doesn't edit this file but instead writes a new file to `refs/heads`.
To get the appropriate SHA-1 for a given reference, Git checks for that reference in the `refs` directory and then checks the `packed-refs` file as a fallback.
However, if you can't find a reference in the `refs` directory, it's probably in your `packed-refs` file.

Παρατηρήστε την τελευταία γραμμή του αρχείου, η οποία αρχίζει με ένα `^`.
Αυτό σημαίνει ότι η ετικέτα ακριβώς πάνω είναι μια ετικέτα σχολιασμένη και ότι η γραμμή είναι η υποβολή στην οποία αναφέρεται η ετικέτα σχολιασμού.

Notice the last line of the file, which begins with a `^`.
This means the tag directly above is an annotated tag and that line is the commit that the annotated tag points to.

[[_data_recovery]]
==== Ανάκτηση δεδομένων

Σε κάποιο σημείο του ταξιδιού μας στο Git, ενδέχεται να χάσουμε τυχαία μια υποβολή.
Γενικά, αυτό συμβαίνει επειδή επιβάλλουμε-διαγράψτε έναν κλάδο που είχε δουλειά σε αυτό, και αποδεικνύεται ότι ήθελε τον κλάδο μετά από όλα? ή να επαναφέρουμε σκληρά έναν κλάδο, εγκαταλείποντας έτσι υποβολές από τις οποίες θέλαμε κάτι.
Αν υποθέσουμε ότι συμβαίνει αυτό, πώς μπορούμε να πάρουμε τις υποβολές μας πίσω;

At some point in your Git journey, you may accidentally lose a commit.
Generally, this happens because you force-delete a branch that had work on it, and it turns out you wanted the branch after all; or you hard-reset a branch, thus abandoning commits that you wanted something from.
Assuming this happens, how can you get your commits back?

Ακολουθεί ένα παράδειγμα που επαναφέρει σκληρά τον κύριο κλάδο στην αποθήκη δοκιμής μας σε μια παλαιότερη υποβολή και στη συνέχεια ανακτά τις χαμένες υποβολές.
Αρχικά, ας ανασκοπήσουμε πού βρίσκεται το αποθετήριο μας:

Here's an example that hard-resets the master branch in your test repository to an older commit and then recovers the lost commits.
First, let's review where your repository is at this point:

[source,console]
----
$ git log --pretty=oneline
ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit
484a59275031909e19aadb7c92262719cfcdf19a added repo.rb
1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

Τώρα, μετακινούμε τον κλάδο `master` πίσω στη μεσαία υποβολή:

[source,console]
----
$ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9
HEAD is now at 1a410ef third commit
$ git log --pretty=oneline
1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

You've effectively lost the top two commits – you have no branch from which those commits are reachable.
You need to find the latest commit SHA-1 and then add a branch that points to it.
The trick is finding that latest commit SHA-1 – it's not like you've memorized it, right?

Ουσιαστικά έχουμε χάσει τις δύο πρώτες υποβολές --δεν έχουμε κλάδο από τον οποίο οι υποβολές αυτές είναι προσβάσιμες.
Πρέπει να βρούμε τον τελευταίο SHA-1 και στη συνέχεια να προσθέσουμε έναν κλάδο που δείχνει σε αυτό.
Το κόλπο βρίσκει ότι το τελευταίο σμήνος SHA-1 - δεν είναι σαν να το έχουμε απομνημονεύσει, έτσι;

Συχνά, ο πιο γρήγορος τρόπος είναι να χρησιμοποιήσουμε ένα εργαλείο που ονομάζεται `git reflog`.
Καθώς δουλεύουμε, το Git καταγράφει σιωπηλά τι είναι το HEAD μας κάθε φορά που το αλλάζουμε.
Κάθε φορά που υποβάλλουμε ή αλλάζουμε κλάδους, το reflog ενημερώνεται.
Το reflog ενημερώνεται επίσης από την εντολή `git update-ref`, που είναι ένας άλλος λόγος για να το χρησιμοποιήσουμε αντί να γράψουμε την τιμή SHA-1 στα αρχεία ref μας, όπως καλύψαμε στο << _git_refs >>.
Μπορούμε να δούμε πού πήγαμε ανά πάσα στιγμή εκτελώντας το `git reflog`:

Often, the quickest way is to use a tool called `git reflog`.
As you're working, Git silently records what your HEAD is every time you change it.
Each time you commit or change branches, the reflog is updated.
The reflog is also updated by the `git update-ref` command, which is another reason to use it instead of just writing the SHA-1 value to your ref files, as we covered in <<_git_refs>>.
You can see where you've been at any time by running `git reflog`:

[source,console]
----
$ git reflog
1a410ef HEAD@{0}: reset: moving to 1a410ef
ab1afef HEAD@{1}: commit: modified repo.rb a bit
484a592 HEAD@{2}: commit: added repo.rb
----

Εδώ μπορούμε να δούμε τις δύο υποβολές που είχαμε ελέγξει έξω, ωστόσο δεν υπάρχουν πολλές πληροφορίες εδώ.
Για να δούμε τις ίδιες πληροφορίες με πολύ πιο χρήσιμο τρόπο, μπορούμε να εκτελέσουμε το `git log -g`, το οποίο θα μας δώσει μια κανονική έξοδο καταγραφής για το reflog μας.

Here we can see the two commits that we have had checked out, however there is not much information here.
To see the same information in a much more useful way, we can run `git log -g`, which will give you a normal log output for your reflog.

[source,console]
----
$ git log -g
commit 1a410efbd13591db07496601ebc7a059dd55cfe9
Reflog: HEAD@{0} (Scott Chacon <schacon@gmail.com>)
Reflog message: updating HEAD
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:22:37 2009 -0700

		third commit

commit ab1afef80fac8e34258ff41fc1b867c702daa24b
Reflog: HEAD@{1} (Scott Chacon <schacon@gmail.com>)
Reflog message: updating HEAD
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri May 22 18:15:24 2009 -0700

       modified repo.rb a bit
----

Φαίνεται ότι το κατώτατο όριο είναι αυτό που χάσατε, έτσι μπορούμε να το ανακτήσουμε δημιουργώντας έναν νέο κλάδο σε αυτήν τη υποβολή.
Για παράδειγμα, μπορούμε να ξεκινήσουμε έναν κλάδο που ονομάζεται `recover-branch` σε αυτή τη υποβολή (ab1afef):

It looks like the bottom commit is the one you lost, so you can recover it by creating a new branch at that commit.
For example, you can start a branch named `recover-branch` at that commit (ab1afef):

[source,console]
----
$ git branch recover-branch ab1afef
$ git log --pretty=oneline recover-branch
ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit
484a59275031909e19aadb7c92262719cfcdf19a added repo.rb
1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
cac0cab538b970a37ea1e769cbbde608743bc96d second commit
fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit
----

Μια ομορφιά, Τώρα έχουμε έναν κλάδο που ονομάζεται `recover-branch` όπου είναι ο κλάδος `master` που χρησιμοποιείται για να γίνει, καθιστώντας τις δύο πρώτες υποβολές προσπελάσιμες και πάλι.
Στη συνέχεια, ας υποθέσουμε ότι η απώλειά μας ήταν για κάποιο λόγο όχι στο reflog - μπορούμε να το προσομοιώσουμε αφαιρώντας το `recover-branch` και διαγράφοντας το reflog.
Τώρα, οι δύο πρώτες υποβολές δεν είναι προσπελάσιμες από τίποτα:

Cool – now you have a branch named `recover-branch` that is where your `master` branch used to be, making the first two commits reachable again.
Next, suppose your loss was for some reason not in the reflog – you can simulate that by removing `recover-branch` and deleting the reflog.
Now the first two commits aren't reachable by anything:

[source,console]
----
$ git branch -D recover-branch
$ rm -Rf .git/logs/
----

Επειδή τα δεδομένα reflog αποθηκεύονται στον κατάλογο `.git / logs /`, δεν έχουμε ουσιαστικά κανένα reflog.
Πώς μπορούμε να ανακτήσουμε αυτή τη υποβολή σε αυτό το σημείο;
Ένας τρόπος είναι να χρησιμοποιήσουμε το βοηθητικό πρόγραμμα `git fsck`, το οποίο ελέγχει τη βάση δεδομένων μας για ακεραιότητα.
Εάν το εκτελέσουμε με την επιλογή `--full`, θα εμφανίζονται όλα τα αντικείμενα που δεν υποδεικνύονται από άλλο αντικείμενο:

Because the reflog data is kept in the `.git/logs/` directory, you effectively have no reflog.
How can you recover that commit at this point?
One way is to use the `git fsck` utility, which checks your database for integrity.
If you run it with the `--full` option, it shows you all objects that aren't pointed to by another object:

[source,console]
----
$ git fsck --full
Checking object directories: 100% (256/256), done.
Checking objects: 100% (18/18), done.
dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4
dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b
dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9
dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293
----

Σε αυτήν την περίπτωση, μπορούμε να δούμε τη δέσμευσή μας που λείπει μετά από τη συμβολοσειρά `` dangling commit ''.
Μπορούμε να το ανακτήσουμε με τον ίδιο τρόπο, προσθέτοντας έναν κλάδο που δείχνει σε αυτόν το SHA-1.

In this case, you can see your missing commit after the string ``dangling commit''.
You can recover it the same way, by adding a branch that points to that SHA-1.

[[_removing_objects]]
==== Διαγραφή αντικειμένων

There are a lot of great things about Git, but one feature that can cause issues is the fact that a `git clone` downloads the entire history of the project, including every version of every file.
This is fine if the whole thing is source code, because Git is highly optimized to compress that data efficiently.
However, if someone at any point in the history of your project added a single huge file, every clone for all time will be forced to download that large file, even if it was removed from the project in the very next commit.
Because it's reachable from the history, it will always be there.

Υπάρχουν πολλά σπουδαία πράγματα για το Git, αλλά ένα χαρακτηριστικό που μπορεί να προκαλέσει προβλήματα είναι το γεγονός ότι ένας «κλώνος git» κατεβάζει ολόκληρο το ιστορικό του έργου, συμπεριλαμβανομένης κάθε έκδοσης κάθε αρχείου.
Αυτό είναι καλό αν το όλο θέμα είναι πηγαίο κώδικα, επειδή το Git είναι εξαιρετικά βελτιστοποιημένο για να συμπιέζει αποτελεσματικά τα δεδομένα.
Ωστόσο, εάν κάποιος σε οποιοδήποτε σημείο της ιστορίας του έργου μας έχει προσθέσει ένα και μόνο τεράστιο αρχείο, κάθε κλώνος για πάντα θα αναγκαστεί να κάνει λήψη αυτού του μεγάλου αρχείου, ακόμα και αν αφαιρεθεί από το έργο κατά την επόμενη υποβολή.
Επειδή είναι προσβάσιμο από την ιστορία, θα είναι πάντα εκεί.

Αυτό μπορεί να είναι ένα τεράστιο πρόβλημα όταν μετατρέπουμε τα αποθετήρια Subversion ή Perforce στο Git.
Επειδή δεν κάνουμε λήψη ολόκληρου του ιστορικού σε αυτά τα συστήματα, αυτός ο τύπος προσθήκης έχει ελάχιστες συνέπειες.
Εάν πραγματοποιήσαμε εισαγωγή από άλλο σύστημα ή διαφορετικά διαπιστώσαμε ότι το αποθετήριο μας είναι πολύ μεγαλύτερο από αυτό που πρέπει να είναι, μπορούμε να βρούμε και να αφαιρέσουμε μεγάλα αντικείμενα.

This can be a huge problem when you're converting Subversion or Perforce repositories into Git.
Because you don't download the whole history in those systems, this type of addition carries few consequences.
If you did an import from another system or otherwise find that your repository is much larger than it should be, here is how you can find and remove large objects.

*Be warned: this technique is destructive to your commit history.*
It rewrites every commit object since the earliest tree you have to modify to remove a large file reference.
If you do this immediately after an import, before anyone has started to base work on the commit, you're fine – otherwise, you have to notify all contributors that they must rebase their work onto your new commits.

* Να είστε προειδοποιημένοι: αυτή η τεχνική είναι καταστροφική για την ιστορία μας.
Επαναδιαγράφει κάθε αντικείμενο υποβολής από το αρχικό δέντρο που πρέπει να τροποποιήσουμε για να καταργήσουμε μια μεγάλη αναφορά αρχείου.
Εάν το κάνουμε αυτό αμέσως μετά την εισαγωγή, πριν κάποιος αρχίσει να βασίζει τις εργασίες για την υποβολή, είστε εντάξει - αλλιώς, θα πρέπει να ενημερώσουμε όλους τους συνεισφέροντες ότι πρέπει να αναδιοργανώσουν την εργασία τους στις νέες υποβολές μας.

Για να αποδείξουμε, θα προσθέσουμε ένα μεγάλο αρχείο στο αποθετήριο δοκιμών, θα το αφαιρέσουμε στην επόμενη υποβολή, θα το βρούμε και θα τον απομακρύνουμε μόνιμα από την αποθήκη.
Αρχικά, προσθέστε ένα μεγάλο αντικείμενο στο ιστορικό μας:

To demonstrate, you'll add a large file into your test repository, remove it in the next commit, find it, and remove it permanently from the repository.
First, add a large object to your history:

[source,console]
----
$ curl https://www.kernel.org/pub/software/scm/git/git-2.1.0.tar.gz > git.tgz
$ git add git.tgz
$ git commit -m 'add git tarball'
[master 7b30847] add git tarball
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 git.tgz
----

Ωχ --δεν θέλουμε να προσθέσουμε ένα τεράστιο tarball στο έργο μας.
Καλύτερα να το ξεφορτωθούμε:

[source,console]
----
$ git rm git.tgz
rm 'git.tgz'
$ git commit -m 'oops - removed large tarball'
[master dadf725] oops - removed large tarball
 1 file changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 git.tgz
----

Τώρα, κάνουμε `gc` στη βάση δεδομένων μας και βλέπουμε πόσο χώρο χρησιμοποιούμε:

[source,console]
----
$ git gc
Counting objects: 17, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (13/13), done.
Writing objects: 100% (17/17), done.
Total 17 (delta 1), reused 10 (delta 0)
----

Μπορούμε να εκτελέσουμε την εντολή `count-objects` για να δούμε γρήγορα πόσο χώρο χρησιμοποιείτε:

[source,console]
----
$ git count-objects -v
count: 7
size: 32
in-pack: 17
packs: 1
size-pack: 4868
prune-packable: 0
garbage: 0
size-garbage: 0
----

The `size-pack` entry is the size of your packfiles in kilobytes, so you're using almost 5MB.
Before the last commit, you were using closer to 2K – clearly, removing the file from the previous commit didn't remove it from your history.
Every time anyone clones this repository, they will have to clone all 5MB just to get this tiny project, because you accidentally added a big file.
Let's get rid of it.

Η καταχώριση μεγέθους πακέτου είναι το μέγεθος των πακέτων μας σε kilobytes, επομένως χρησιμοποιούμε σχεδόν 5MB.
Πριν από την τελευταία υποβολή, χρησιμοποιούσαμε πιο κοντά στο 2Κ - σαφώς, η κατάργηση του αρχείου από την προηγούμενη υποβολή δεν την κατήργησε από το ιστορικό μας.
Κάθε φορά που κάποιος κλωνοποιεί αυτό το αποθετήριο, θα πρέπει να κλωνοποιήσει όλα τα 5MB μόνο για να πάρει αυτό το μικροσκοπικό έργο, επειδή προσθέσαμε κατά λάθος ένα μεγάλο αρχείο.
Ας απαλλαγούμε από αυτό.

Πρώτα πρέπει να το βρείτε.
Σε αυτή την περίπτωση, ξέρουμε ήδη τι αρχείο είναι.
Αλλά υποθέστε ότι δεν έχουμε? πώς θα προσδιορίζαμε ποιο αρχείο ή αρχεία καταλάμβαναν τόσο μεγάλο χώρο;
Αν εκτελέσουμε το `git gc`, όλα τα αντικείμενα βρίσκονται σε ένα packfile. μπορούμε να προσδιορίσουμε τα μεγάλα αντικείμενα, τρέχοντας μια άλλη εντολή υδραυλικής εγκατάστασης που ονομάζεται `git verify-pack` και ταξινομώντας το τρίτο πεδίο στην έξοδο, το οποίο είναι μέγεθος αρχείου.
Μπορούμε επίσης να το διοχετεύσουμε μέσω της εντολής `tail`, επειδή ενδιαφέρεστε μόνο για τα τελευταία μερικά μεγαλύτερα αρχεία:

First you have to find it.
In this case, you already know what file it is.
But suppose you didn't; how would you identify what file or files were taking up so much space?
If you run `git gc`, all the objects are in a packfile; you can identify the big objects by running another plumbing command called `git verify-pack` and sorting on the third field in the output, which is file size.
You can also pipe it through the `tail` command because you're only interested in the last few largest files:

[source,console]
----
$ git verify-pack -v .git/objects/pack/pack-29…69.idx \
  | sort -k 3 -n \
  | tail -3
dadf7258d699da2c8d89b09ef6670edb7d5f91b4 commit 229 159 12
033b4468fa6b2a9547a70d88d1bbe8bf3f9ed0d5 blob   22044 5792 4977696
82c99a3e86bb1267b236a4b6eff7868d97489af1 blob   4975916 4976258 1438
----

Το μεγάλο αντικείμενο βρίσκεται στο κάτω μέρος: 5MB.
Για να μάθουμε ποιο αρχείο είναι, θα χρησιμοποιήσουμε την εντολή `rev-list`, την οποία χρησιμοποιήσαμε για λίγο στο << _ enforcing_commit_message_format >>.
Εάν περάσουμε τα `` αντικείμενα '' στην `` rev-list`, εμφανίζονται όλα τα commit SHA-1s και τα blob SHA-1s με τις διαδρομές αρχείων που σχετίζονται με αυτά.
Μπορούμε να χρησιμοποιήσουμε αυτό για να βρούμε το όνομα του blob μας:

The big object is at the bottom: 5MB.
To find out what file it is, you'll use the `rev-list` command, which you used briefly in <<_enforcing_commit_message_format>>.
If you pass `--objects` to `rev-list`, it lists all the commit SHA-1s and also the blob SHA-1s with the file paths associated with them.
You can use this to find your blob's name:

[source,console]
----
$ git rev-list --objects --all | grep 82c99a3
82c99a3e86bb1267b236a4b6eff7868d97489af1 git.tgz
----

Τώρα, πρέπει να διαγράψουμε αυτό το αρχείο από όλα τα δέντρα στο παρελθόν μας.
Μπορούμε εύκολα να δούμε ποιες υποβολές τροποποίησε αυτό το αρχείο:

[source,console]
----
$ git log --oneline --branches -- git.tgz
dadf725 oops - removed large tarball
7b30847 add git tarball
----

Πρέπει να ξαναγράψουμε όλες τις υποβολές κατάντη από το `7b30847` για να καταργήσουμε πλήρως αυτό το αρχείο από το ιστορικό του Git.
Για να το κάνουμε αυτό, χρησιμοποιούμε το `filter-branch`, το οποίο χρησιμοποιήσαμε στο << _ rewriting_history >>:

You must rewrite all the commits downstream from `7b30847` to fully remove this file from your Git history.
To do so, you use `filter-branch`, which you used in <<_rewriting_history>>:

[source,console]
----
$ git filter-branch --index-filter \
  'git rm --ignore-unmatch --cached git.tgz' -- 7b30847^..
Rewrite 7b30847d080183a1ab7d18fb202473b3096e9f34 (1/2)rm 'git.tgz'
Rewrite dadf7258d699da2c8d89b09ef6670edb7d5f91b4 (2/2)
Ref 'refs/heads/master' was rewritten
----

Η επιλογή `--index-filter 'είναι παρόμοια με την επιλογή` --tree-filter` που χρησιμοποιείται στο << _ rewriting_history >>, με την εξαίρεση ότι αντί να περάσει μια εντολή που τροποποιεί τα αρχεία που έχουν ελεγχθεί στο δίσκο, τροποποιούμε τη σταδιοποίηση περιοχή ή δείκτη κάθε φορά.

The `--index-filter` option is similar to the `--tree-filter` option used in <<_rewriting_history>>, except that instead of passing a command that modifies files checked out on disk, you're modifying your staging area or index each time.

Rather than remove a specific file with something like `rm file`, you have to remove it with `git rm --cached` – you must remove it from the index, not from disk.
The reason to do it this way is speed – because Git doesn't have to check out each revision to disk before running your filter, the process can be much, much faster.
You can accomplish the same task with `--tree-filter` if you want.
The `--ignore-unmatch` option to `git rm` tells it not to error out if the pattern you're trying to remove isn't there.
Finally, you ask `filter-branch` to rewrite your history only from the `7b30847` commit up, because you know that is where this problem started.
Otherwise, it will start from the beginning and will unnecessarily take longer.

Αντί να απομακρύνουμε ένα συγκεκριμένο αρχείο με κάτι σαν `rm file`, θα πρέπει να το αφαιρέσουμε με` git rm - cached` - πρέπει να το αφαιρέσουμε από το ευρετήριο, όχι από το δίσκο.
Ο λόγος για να το κάνουμε αυτό είναι η ταχύτητα - επειδή το Git δεν χρειάζεται να ελέγξει κάθε αναθεώρηση του δίσκου πριν να εκτελέσει το φίλτρο μας, η διαδικασία μπορεί να είναι πολύ, πολύ πιο γρήγορα.
Μπορούμε να ολοκληρώσουμε την ίδια εργασία με `--tree-filter` αν θέλουμε.
Η επιλογή `--ignore-unmatch 'στο` git rm` μας λέει ότι δεν θα σφάλλει εάν το μοτίβο που προσπαθούμε να καταργήσουμε δεν υπάρχει.
Τέλος, ρωτάμε το `filter-branch` για να ξαναγράψουμε το ιστορικό μας μόνο από τη διαδικασία` 7b30847`, επειδή ξέρουμε ότι είναι αυτό που ξεκίνησε αυτό το πρόβλημα.
Διαφορετικά, θα ξεκινήσει από την αρχή και θα χρειαστεί περιττή διάρκεια.

Το ιστορικό μας δεν περιέχει πλέον αναφορά στο συγκεκριμένο αρχείο.
Ωστόσο, το reflog μας και ένα νέο σύνολο αναφορών που πρόσθεσε το Git όταν κάναμε το `filter-branch 'κάτω από το` .git / refs / original` εξακολουθεί να το κάνει, οπότε θα πρέπει να τα αφαιρέσουμε και στη συνέχεια να ανασυστήσουμε τη βάση δεδομένων.
Πρέπει να απαλλαγούμε από οτιδήποτε έχει ένα δείκτη σε αυτές τις παλιές υποβολές προτού να ανασυστήσουμε:

Your history no longer contains a reference to that file.
However, your reflog and a new set of refs that Git added when you did the `filter-branch` under `.git/refs/original` still do, so you have to remove them and then repack the database.
You need to get rid of anything that has a pointer to those old commits before you repack:

[source,console]
----
$ rm -Rf .git/refs/original
$ rm -Rf .git/logs/
$ git gc
Counting objects: 15, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (15/15), done.
Total 15 (delta 1), reused 12 (delta 0)
----

Ας δούμε πόσο χώρο έχουμε γλιτώσει.

[source,console]
----
$ git count-objects -v
count: 11
size: 4904
in-pack: 15
packs: 1
size-pack: 8
prune-packable: 0
garbage: 0
size-garbage: 0
----

Το μέγεθος του αποθηκευμένου αποθετηρίου είναι κάτω από 8K, το οποίο είναι πολύ καλύτερο από τα 5MB.
Μπορούμε να δούμε από την τιμή μεγέθους ότι το μεγάλο αντικείμενο βρίσκεται ακόμα στα χαλαρά αντικείμενα μας, οπότε δεν έχει φύγει. αλλά δεν θα μεταφερθεί σε ώθηση ή σε επόμενο κλώνο, κάτι που είναι σημαντικό.
Εάν θέλουμε πραγματικά, θα μπορούσαμε να αφαιρέσουμε το αντικείμενο εντελώς τρέχοντας `git prune` με την επιλογή `--expire`:

The packed repository size is down to 8K, which is much better than 5MB.
You can see from the size value that the big object is still in your loose objects, so it's not gone; but it won't be transferred on a push or subsequent clone, which is what is important.
If you really wanted to, you could remove the object completely by running `git prune` with the `--expire` option:

[source,console]
----
$ git prune --expire now
$ git count-objects -v
count: 0
size: 0
in-pack: 15
packs: 1
size-pack: 8
prune-packable: 0
garbage: 0
size-garbage: 0
----
