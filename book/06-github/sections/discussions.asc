=== Discussions

(((GitHub, discussions)))
Pull Requests and Issues both fall under the heading of "`discussions.`"
These discussions have some interesting features that make them especially useful when working on software.
Let's take a look at when you should use each one, and how best to use them.

[[_github_pull_requests]]
==== Pull Requests and Issues

Pull Requests and Issues seem like completely different things, but in reality they're the same.
A Pull Request is actually just an Issue with a Git branch attached.
Apart from that, they are identical; both have a title, description, and comments; both can belong to a Milestone; both trigger notifications; and so on.
They're used for very different things, however.

An Issue is used to report a problem, or post a reminder for work to be done later, or just to ask a question.
Pull Requests, on the other hand, are used to propose a change.
These lines aren't cut into stone, however; some of the most effective bug reports are Pull Requests that include a test that isolates the problem.

==== Markdown

(((Markdown)))
One of the features that all discussions share is Markdown.
Markdown is a way of decorating plain text that adds emphasis and structure.
It's designed to be readable without any extra processing, but also to be translated into richly formatted HTML.

An example might help.
Markdown looks like this:

[source,markdown]
----
*Italics* and **bold text** are possible. So are [links][github].

[github]: http://github.com/
----

That block of text renders in a GitHub description or comment like this:

////////////////////////////////////////////////////////////////
Yeah, I'm cheating. Sue me.
////////////////////////////////////////////////////////////////
====
_Italics_ and *bold text* are possible. So are http://github.com/[links].
====

In addition to the basics, GitHub includes Markdown features that are tailored to the needs of developers.
A good example of this is fenced code blocks, which look like this:

[source,markdown]
----
```ruby
puts "Hello, Markdown!"
```
----

The text between the triple-backquote markers (+```+) will be treated as code, and ignored by Markdown.
GitHub will try to detect what language the code snippet is in and provide syntax highlighting; you can give it a hint as to the language with a name just after the opening block (+```ruby+ above).

(((emoji)))
Another sometimes-useful, sometimes silly feature is Emoji integration.
If a picture is worth a thousand words, an Emoji can sometimes be worth five or ten.
GitHub translates the text +:sheep::dash:+ into a pictorial representation that looks like this:

.+:sheep::dash:+ rendered.
image::images/emoji.png[+:sheep::dash:+ rendered.]

GitHub-flavored Markdown can do even more than this, including tables, checklists, and autolinks.
Take a look at https://help.github.com/articles/github-flavored-markdown[] for a complete description.

==== Notifications

(((GitHub, notifications)))
In order to contribute to or manage a project, you need to know what's going on.
GitHub keeps you informed through a mechanism called notifications.
You'll receive notifications for event streams in several kinds of situations.
If you're "`watching`" a repository, you'll get notified of new issues and pull requests; comments on issues, pull requests, and commits; and newly published releases.
If you're not watching a repository, you'll only be subscribed to a discussion if you're the target of an `@mention`, if an issue is assigned to you, if you've commented on a thread, or if a comment is added to something you made (a commit, or discussion).

An `@mention` is a handy way to get someone's attention.
If you include `@john` in a comment, the user named `john` is notified of your comment, and automatically subscribed to the discussion thread that comment is on.
This is a great way of managing your notification volume; large teams can generate a lot of them, so you can control when you participate.

==== Email

Notifications arrive through two channels: the notifications view at https://github.com/notifications[], and via email.
This is controlled by the settings at https://github.com/settings/notifications[].

.Notification settings.
image::images/notifications.png[Notification settings.]

The email notifications have a couple of unique features.
First, you can simply reply to an email, and your comment will show up in the discussion thread, almost as though you went to the website and typed it in.
The main difference is that email replies won't be Markdown-formatted.

The emails are also designed to dovetail with Gmail's "`mute`" feature:

* If you're subscribed to a discussion that you're not actively participating in, and that you're not interested in, you can mute the thread in Gmail.
* If you are then summoned with an `@mention` in the thread, the email notification will have you in the `cc` field, which bypasses the mute filter and shows you the email thread again.

==== Autolinked Discussions

Just one more thing before we leave discussions behind.
GitHub's Markdown parser can also link to other discussions.
Writing text like `this is just like #49` will change "`#49`" into a link to the issue or pull request whose number is 49.
A back-link will also be inserted into the discussion thread on the target discussion (though this doesn't trigger a notification).

This is a great way of networking discussions together, but it has another benefit.
If you write something like `fixes #7` or `closes #739` in a pull request description or commit message, the target issue will be closed whenever the PR is merged, or the commit becomes reachable from the `master` branch.
This is really great for fixing bugs or managing user stories.

Next, let's talk about how to match up repositories and people.
