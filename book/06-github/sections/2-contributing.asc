=== Συνεισφορά σε έργο

Τώρα που ο λογαριασμός μας έχει ρυθμιστεί, ας δούμε κάποιες λεπτομέρειες που θα μπορούσαν να μας βοηθήσουν να συμβάλλουμε σε ένα υπάρχον έργο.

==== Αποσχισμένα έργα

(((απόσχιση)))
Εάν θέλουμε να συνεισφέρουμε σε ένα υπάρχον έργο στο οποίο δεν έχουμε πρόσβαση ώθησης, μπορούμε να ``αποσχίσουμε'' το έργο.
Αυτό σημαίνει ότι το GitHub θα κάνει ένα αντίγραφο του έργου που είναι εξ ολοκλήρου δικό μας· ζει στον ονοματοχώρο του χρήστη που είμαστε και μπορούμε να ωθήσουμε σε αυτό.

[ΣΗΜΕΙΩΣΗ]
====
Ιστορικά, ο όρος ``διχάλα'' είχε αρνητική χροιά, σήμαινε ότι κάποιος πήρε ένα έργο ανοιχτού κώδικα προς μια διαφορετική κατεύθυνση, δημιουργώντας μερικές φορές ένα ανταγωνιστικό έργο και χωρίζοντας τους συνεισφέροντες.
Στο GitHub, μία ``διχάλα'' είναι απλά το ίδιο έργο στον δικό μας ονοματοχώρο, που μας επιτρέπει να κάνουμε αλλαγές σε ένα έργο δημοσίως, ένας τρόπος να συμβάλλουμε με έναν πιο ανοιχτό τρόπο.
====

Με αυτόν τον τρόπο, τα έργα δεν χρειάζεται να ανησυχούν για την προσθήκη χρηστών ως συνεργατών για να τους δώσουν πρόσβαση ώθησης.
Οι άνθρωποι μπορούν να αποσχίσουν ένα έργο, να ωθήσουν σε αυτό και να συμβάλουν τις αλλαγές τους στο αρχικό αποθετήριο δημιουργώντας αυτό που ονομάζεται _αίτημα ελκυσμού_ (push request), το οποίο θα καλύψουμε στη συνέχεια.
Αυτό ανοίγει ένα νήμα συζήτησης με αναθεώρηση κώδικα και ο ιδιοκτήτης και ο συνεισφέρων μπορούν στη συνέχεια να επικοινωνούν σχετικά με την αλλαγή μέχρι ο ιδιοκτήτης να είναι ικανοποημένος με αυτές, οπότε ο ιδιοκτήτης μπορεί να τις συγχωνεύσει.

Για να αποσχίσουμε ένα έργο, επισκεφτόμαστε τη σελίδα του έργου και κάνουμε κλικ στο κουμπί ``Fork'' στο πάνω δεξιό μέρος της σελίδας.

.Το κουμπί ``Fork''.
image::images/forkbutton.png[Το κουμπί ``Fork''.]

Μετά από λίγα δευτερόλεπτα, θα μεταφερθούμε στη νέα, δική μας σελίδα του έργου, με το δικό μας αντίγραφο του κώδικα στο οποίο έχουμε δικαίωμα εγγραφής.


[[_github_flow]]
==== Η ροή εργασίας του GitHub

(((GitHub, ροή)))
Το GitHub είναι σχεδιασμένο γύρω από μια συγκεκριμένη συνεργατική ροή εργασίας, με επίκεντρο τα αιτήματα ελκυσμού.
Αυτή η ροή λειτουργεί είτε συνεργαζόμαστε με μια ομάδα με μεγάλη συνοχή σε ένα κοινό αποθετήριο είτε μια παγκοσμίως κατανεμημένη εταιρεία ή δίκτυο αγνώστων μεταξύ τους που συμβάλλουν σε ένα έργο μέσω δεκάδων διχαλών.
Στο επίκεντρό της έχει τη ροή εργασιών <<_topic_branch>> που καλύπτεται στο κεφάλαιο <<_git_branching>>.

Ας δούμε πώς λειτουργεί γενικά:

1. Δημιουργούμε έναν θεματικό κλάδο από τον κλάδο `master`.
2. Κάνουμε ορισμένες υποβολές ώστε αν βελτιώσουμε το έργο.
3. Ωθούμε αυτόν τον κλάδο στο έργο του GitHub.
4. Υποβάλλουμε ένα αίτημα ελκυσμού στο GitHub.
5. Συζητάμε και, προαιρετικά, συνεχίζουμε να υποβάλλουμε.
6. Ο ιδιοκτήτης του έργου συγχωνεύει τον κλάδο ή κλείνει το αίτημα ελκυσμού.

Αυτή είναι βασικά η ροή εργασίας με διαχειριστή ενσωμάτωσης που καλύπτεται στο <<_integration_manager>> αλλά αντί να χρησιμοποιήσουμε το ηλεκτρονικό ταχυδρομείο για να επικοινωνήσουν και να αναθεωρήσουν τις αλλαγές, οι ομάδες χρησιμοποιούν τα εργαλεία της ιστοσελίδας του GitHub.

Ας δούμε ένα παράδειγμα πρότασης αλλαγής σε ένα έργο ανοιχτού κώδικα που φιλοξενείται στο GitHub χρησιμοποιώντας αυτήν τη ροή.

===== Δημιουργία αιτήματος ελκυσμού

Ο Tony ψάχνει κώδικα για να τρέξει στον προγραμματιζόμενο μικροελεγκτή του, Arduino και βρήκε ένα εξαιρετικό πρόγραμμα στο GitHub στη διεύθυνση https://github.com/schacon/blink[].

.Το έργο στο οποίο θέλουμε να συμβάλουμε.
image::images/blink-01-start.png[Το έργο στο οποίο θέλουμε να συμβάλουμε.]

Το μόνο πρόβλημα είναι ότι ο ρυθμός αναλαμπής είναι πολύ γρήγορος, πιστεύει ότι είναι πολύ καλύτερο να περιμένει 3 δευτερόλεπτα αντί για 1 μεταξύ κάθε αλλαγής κατάστασης.
Ας βελτιώσουμε λοιπόν το πρόγραμμα και να υποβάλουμε στο έργο ως μια προτεινόμενη αλλαγή.

Πρώτα, κάνουμε κλικ στο κουμπί 'Fork', όπως αναφέρθηκε προηγουμένως, για να λάβουμε το δικό μας αντίγραφο του έργου.
Το όνομα χρήστη εδώ είναι ``tonychacon'', οπότε το αντίγραφο αυτού του έργου είναι στην διεύθυνση `https://github.com/tonychacon/blink` και εκεί μπορούμε να το επεξεργαστούμε.
Θα το κλωνοποιήσουμε τοπικά, θα δημιουργήσουμε έναν θεματικό κλάδο, θα κάνουμε αλλαγές στον κώδικα και τέλος θα ωθήσουμε αυτή την αλλαγή πίσω στο GitHub.

[source,console]
----
$ git clone https://github.com/tonychacon/blink <1>
Cloning into 'blink'...

$ cd blink
$ git checkout -b slow-blink <2>
Switched to a new branch 'slow-blink'

$ sed -i '' 's/1000/3000/' blink.ino <3>

$ git diff --word-diff <4>
diff --git a/blink.ino b/blink.ino
index 15b9911..a6cc5a5 100644
--- a/blink.ino
+++ b/blink.ino
@@ -18,7 +18,7 @@ void setup() {
// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
}

$ git commit -a -m 'three seconds is better' <5>
[slow-blink 5ca509d] three seconds is better
 1 file changed, 2 insertions(+), 2 deletions(-)

$ git push origin slow-blink <6>
Username for 'https://github.com': tonychacon
Password for 'https://tonychacon@github.com':
Counting objects: 5, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 340 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
To https://github.com/tonychacon/blink
 * [new branch]      slow-blink -> slow-blink
----

<1> Κλωνοποιούμε την διχάλα του έργου σε τοπικό επίπεδο
<2> Δημιουργούμε έναν περιγραφικό θεματικό κλάδο
<3> Κάνουμε την αλλαγή που θέλουμε στον κώδικα
<4> Ελέγχουμε ότι η αλλαγή είναι καλή
<5> Υποβάλλουμε την αλλαγή στον θεματικό κλάδο
<6> Ωθούμε τον νέο θεματικό κλάδο στην διχάλα μας στο GitHub

Τώρα, αν επιστρέψουμε στην διχάλα μας στο GitHub, μπορούμε να δούμε ότι το GitHub παρατήρησε ότι ωθήσαμε έναν νέο θεματικό κλάδο και μας εμφανίζει ένα μεγάλο πράσινο κουμπί για να ελέγξουμε (checkout) τις αλλαγές μας και να υποβάλουμε ένα αίτημα ελκυσμού στο αρχικό έργο.

Μπορούμε εναλλακτικά να μεταβούμε στη σελίδα ``Branches'' στη διεύθυνση `https://github.com/<user>/<project>/branches` για να εντοπίσουμε τον κλάδο μας και να υποβάλουμε ένα νέο αίτημα ελκυσμού από εκεί.

.Κουμπί ``αίτημα ελκυσμού''
image::images/blink-02-pr.png[Κουμπί ``αίτημα ελκυσμού''.]

(((GitHub, αιτήματα ελκυσμού)))
Αν κάνουμε κλικ σε αυτό το πράσινο κουμπί, θα δούμε μια οθόνη που μας επιτρέπει να δημιουργήσουμε έναν τίτλο και μια περιγραφή για την αλλαγή που θα θέλαμε να αιτηθούμε, ώστε ο ιδιοκτήτης του έργου να έχει καλό λόγο να την εξετάσει. Είναι γενικά καλή ιδέα να ξοδέψουμε κάποια προσπάθεια καθιστώντας αυτήν την περιγραφή όσο το δυνατόν πιο χρήσιμη, ώστε ο συντάκτης να γνωρίζει γιατί αυτό προτείνεται και γιατί θα ήταν μια πολύτιμη αλλαγή για να αποδεχτεί.

Επίσης, βλέπουμε μια λίστα των υποβολών μας στον θεματικό κλάδο μας που ``προηγείται'' από του κλάδου `master` (στην περίπτωση αυτή, μόνο κατά μία υποβολή) και ένα ενοποιημένο diff όλων των αλλαγών που θα γίνουν σε περίπτωση που αυτός ο κλάδος συγχωνευτεί από τον ιδιοκτήτη του έργου.

.Σελίδα δημιουργίας αιτήματος ελκυσμού
image::images/blink-03-pull-request-open.png[Σελίδα δημιουργίας αιτήματος ελκυσμού.]

Όταν πατήσουμε το κουμπί ``Δημιουργία αιτήματος ελκυσμού'' σε αυτήν την οθόνη, ο ιδιοκτήτης του έργου, από το οποίο αποσχιστήκαμε θα λάβει ειδοποίηση ότι κάποιος προτείνει μια αλλαγή και θα συνδεθεί με μια σελίδα που περιέχει όλες αυτές τις πληροφορίες.

[ΣΗΜΕΙΩΣΗ]
====
Παρόλο που οι αιτήσεις ελκυσμού χρησιμοποιούνται συνήθως για δημόσια έργα όπως αυτό, στο οποίο ο συνεισφέρων έχει μια πλήρη αλλαγή έτοιμη να υλοποιηθεί, επίσης συχνά χρησιμοποιείται σε εσωτερικά έργα _στην αρχή_ του κύκλου ανάπτυξης. Επειδή μπορούμε να συνεχίσουμε να ωθούμε στον θεματικό κλάδο *ακόμα και μετά* από το άνοιγμα του αιτήματος ελκυσμού, αυτό συχνά ανοίγει νωρίς και χρησιμοποιείται ως ένας τρόπος για να επαναλάβουμε την εργασία ως ομάδα μέσα σε ένα πλαίσιο, αντί να ανοίξει στο τέλος της διαδικασίας.
====

===== Επανάληψη αιτήματος ελκυσμού

Σε αυτό το σημείο, ο ιδιοκτήτης του έργου μπορεί να εξετάσει την προτεινόμενη αλλαγή και να τη συγχωνεύσει, να την απορρίψει ή να τη σχολιάσει. Ας πούμε ότι του αρέσει η ιδέα, αλλά θα προτιμούσε λίγο το φως να είναι σβησμένο για περισσότερο χρόνο από όσο είναι ανσμμένο.

Ενώ αυτή η συζήτηση πραγματοποιείται μέσω email στις ροές εργασίας που παρουσιάζονται στην ενότητα <<_distributed_git>>, στο GitHub αυτό συμβαίνει στο διαδίκτυο. Ο ιδιοκτήτης του έργου μπορεί να ελέγξει το ενοποιημένο diff και να αφήσει ένα σχόλιο κάνοντας κλικ σε οποιαδήποτε από τις γραμμές.

.Σχόλιο σε οποιαδήποτε γραμμή του κώδικα σε αίτημα ελκυσμού
image::images/blink-04-pr-comment.png[Σχόλιο σε γραμμή κατά το αίτημα ελκυσμού]

Μόλις ο διαχειριστής κάνει αυτό το σχόλιο, ο χρήστης που άνοιξε το αίτημα ελκυσμού (όπως και οποιοσδήποτε άλλος παρακολουθεί το αποθετήριο) θα λάβει μια ειδοποίηση. Θα δούμε πώς αυτό είναι δυνατό να προσωποποιηθεί αργότερα, αλλά εάν είχε ενεργοποιημένες τις ειδοποιήσεις μέσω email, ο Tony θα λάμβανε ένα μήνυμα όπως αυτό:

[[_email_notification]]
.Σχόλια που στέλνονται ειδοποιήσεις email
image::images/blink-04-email.png[Σχόλια που στέλνονται ειδοποιήσεις email]

Οποιοσδήποτε μπορεί να αφήσει γενικά σχόλια για το αίτημα ελκυσμού. Στην <<_pr_discussion>> μπορούμε να δούμε ένα παράδειγμα ενός ιδιοκτήτη του έργου που σχολιάζει μια γραμμή κώδικα και στη συνέχεια αφήνει ένα γενικό σχόλιο στο τμήμα συζήτησης. Μπορούμε να δούμε ότι τα σχόλια του κώδικα συμπεριλαμβάνονται και στη συνομιλία.

[[_pr_discussion]]
.Σελίδα συζήτησης αιτήματος
image::images/blink-05-general-comment.png[Σελίδα συζήτησης αιτήματος]

Τώρα ο συνεισφέρων μπορεί να δει τι πρέπει να κάνει για να γίνει αποδεκτή η αλλαγή του. Ευτυχώς αυτό είναι επίσης πολύ απλό να γίνει. Ενώ μέσω ηλεκτρονικού ταχυδρομείου θα χρειαζόταν να αναιρέσουμε τη σειρά αλλαγών και να την ξαναϋποβάλουμε εκ νέου στη ηλεκτρονική λίστα αλληλογραφίας, με το GitHub απλά ξαναϋποβάλουμε τον θεματικό κλάδο και τον ξαναωθούμε.

Αν ο συνεισφέρων το κάνει αυτό, τότε ο κάτοχος του έργου θα ενημερωθεί ξανά και όταν επισκεφθεί τη σελίδα θα δει ότι το σχόλιό του έχει ληφθεί υπόψη. Μάλιστα, επειδή έχει αλλάξει μια γραμμή κώδικα στην οποία υπήρχε σχόλιο, το GitHub το παρατηρεί ότι και καταρρέει την παρωχημένη διαφορά.

[[_pr_final]]
.αίτημα ελκυσμού final
image::images/blink-06-final.png[PR final]

Κάτι ενδιαφέρον που πρέπει να παρατηρήσουμε είναι ότι αν κάνουμε κλικ στην καρτέλα ``Files Changed'' σε αυτό το αίτημα ελκυσμού, θα πάρουμε την ``ενοποιημένη'' diff --δηλαδή, τη συνολική αθροιστικά διαφορά που θα εισαγόταν στον κύριο κλάδο αν αυτός ο θεματικός κλάδος συγχωνευόταν. Με όρους `git diff`, ουσιαστικά μας δείχνει αυτόματα `git diff master...<branch>` για τον κλάδο στον οποίο βασίζεται αυτό το αίτημα ελκυσμού. Περισσότερες πληροφορίες σχετικά με αυτό το είδος diff υπάρχουν στην ενότητα <<_what_is_introduced>> για  διαφοράς.

Το άλλο που πρέπει να παρατηρήσουμε είναι ότι το GitHub ελέγχει εάν το αίτημα ελκυσμού συγχωνεύεται παστρικά και παρέχει ένα κουμπί για να κάνει τη συγχώνευση για εμάς στον διακομιστή. Αυτό το κουμπί εμφανίζεται μόνο αν έχουμε πρόσβαση εγγραφής στο αποθετήριο και μια τετριμμένη συγχώνευση είναι πιθανή. Εάν κάνουμε κλικ σ' αυτό, το GitHub θα εκτελέσει μια συγχώνευση ``non-fast forward'', κάτι που σημαίνει ότι ακόμα και αν η συγχώνευση *θα μπορούσε* να είναι ταχυπροώθηση, θα δημιουργήσει μια υποβολή συγχώνευσης.

Αν προτιμάμε, μπορούμε απλά να ελκύσουμε τον κλάδο μας στον υπολογιστή μας και τον  συγχωνεύσουμε τοπικά. Εάν συγχωνεύσουμε αυτόν τον κλάδο στον κλάδο `master` και τον ωθήσουμε στο GitHub, το αίτημα ελκυσμού θα κλείσει αυτόματα.

Αυτή είναι η βασική ροή εργασίας που χρησιμοποιούν τα περισσότερα έργα του GitHub. Οι κλάδοι θεμάτων δημιουργούνται, ανοίγουν τα αιτήματα ελκυσμού, ακολουθεί συζήτηση, ενδεχομένως γίνεται περισσότερη δουλειά στον κλάδο και τελικά το αίτημα είτε κλείνει είτε συγχωνεύεται.

[ΣΗΜΕΙΩΣΗ]
.Όχι μόνον απόσχιση
====
Είναι σημαντικό να σημειώσουμε ότι μπορούμε επίσης να ανοίξουμε ένα αίτημα ελκυσμού μεταξύ δύο κλάδων στο ίδιο αποθετήριο. Εάν εργαζόμαστε σε ένα χαρακτηριστικό με κάποιον και έχουμε και οι δύο πρόσβαση για εγγραφή στο έργο, μπορούμε να ωθήσουμε έναν θεματικό κλάδο στο αποθετήριο και να ανοίξουμε μία αίτηση ελκυσμού του από τον κλάδο `master` του ίδιου έργου για να ξεκινήσει η αναθεώρηση κώδικα και η διαδικασία συζήτησης. Δεν είναι απαραίτητη η απόσχιση.
====

==== Προχωρημένα αιτήματα ελκυσμού

Τώρα που καλύψαμε τα βασικά στοιχεία της συνεισφοράς σε ένα έργο στο GitHub, ας καλύψουμε μερικές ενδιαφέρουσες συμβουλές και κόλπα σχετικά με τα αιτήματα ελκυσμού, ώστε να μπορούμε να είμαστε πιο αποτελεσματικοί στη χρήση τους.

===== Αιτήματα ελκυσμού ως επιδιορθώσεις κώδικα

Είναι σημαντικό να καταλάβουμε ότι πολλά έργα όσον αφορά στα αιτήματα ελκυσμού δεν βλέπουν ουρές τέλειων επιδιορθώσεων που πρέπει να εφαρμόζουν παστρικά η μία μετά την άλλη, καθώς τα περισσότερα έργα που βασίζονται σε ηλεκτρονική λίστα αλληλογραφίας βλέπουν συνεισφορές από σειρές επιδιορθώσεων. Τα περισσότερα έργα του GitHub σκέφτονται τους κλάδους σε αιτήματα ελκυσμού ως επαναληπτικές συνομιλίες γύρω από μια προτεινόμενη αλλαγή, με αποκορύφωμα μια ενοποιημένη diff που εφαρμόζεται με τη συγχώνευση.

Αυτή είναι μια σημαντική διάκριση, διότι γενικά η αλλαγή προτείνεται προτού ο κώδικας θεωρηθεί τέλειος, κάτι που είναι πολύ σπάνιο με τις συνεισφορές σειρών επιδιορθώσεων με βάση ηλεκτρονικές λίστες αλληλογραφίας. Αυτό επιτρέπει μια προηγούμενη συζήτηση με τους διαχειριστές συνεπώς η επίτευξη της σωστής λύσης είναι κατά μείζοντα λόγο μια προσπάθεια της κοινότητας. Όταν ο κώδικας προτείνεται με ένα αίτημα ελκυσμού και οι συντηρητές ή η κοινότητα προτείνουν μια αλλαγή, η σειρά των επιδιορθώσεων γενικά δεν επαναφέρεται· αντίθετα η διαφορά ωθείται ως νέα υποβολή στον κλάδο, αφενός προωθώντας τη συνομιλία, αφετέρου αφήνοντας τo υπόλοιπο πλαίσιο άθικτο.

Για παράδειγμα, αν δούμε ξανά το <<_pr_final>>, θα παρατηρήσουμε ότι ο συνεισφέρων δεν επανατοποθέτησε την υποβολή του και έστειλε άλλο αίτημα ελκυσμού. Αντίθετα, πρόσθεσε νέες υποβολές και τις ώθησε στον υφιστάμενο κλάδο. Με αυτόν τον τρόπο, αν επανέλθουμε και θα εξετάσουμε αυτό το αίτημα ελκυσμού στο μέλλον, μπορούμε εύκολα να βρούμε όλο το πλαίσιο όσον αφορά στο γιατί λήφθησαν οι αποφάσεις. Πατώντας το κουμπί ``Merge'' δημιουργεί σκόπιμα μια υποβολή συγχώνευσης που αναφέρεται στο αίτημα ελκυσμού έτσι ώστε να είναι εύκολο να επιστρέψουμε και να διερευνήσουμε την αρχική συνομιλία, εφόσον χρειαστεί.

===== Keeping up with Upstream

Αν η ερώτησή μας για το αίτημα ελκυσμού δεν είναι ενημερωμένη ή δεν συγχωνεύεται παστρικά για κάποιον άλλο λόγο, θα θελήσουμε να το διορθώσουμε, έτσι ώστε ο συντηρητής να μπορεί να το συγχωνεύσει εύκολα. Το GitHub θα το δοκιμάσει αυτό και θα μας ενημερώσει στο κάτω μέρος κάθε αιτήματος ελκυσμού εάν η συγχώνευση είναι τετριμμένη ή όχι.

[[_pr_fail]]
.Το αίτημα ελκυσμού δεν συγχωνεύεται παστρικά.
image::images/pr-01-fail.png[Αποτυχία συγχώνευσης αιτήματος ελκυσμού.]

Εάν δούμε κάτι σαν <<_pr_fail>>, θα θελήσουμε να διορθώσουμε τον κλάδο μας έτσι ώστε να ο κλάδος να γίνει πράσινος και ο συντηρητής να μην χρειάζεται να κάνει επιπλέον εργασία.

Έχουμε δύο κύριες επιλογές για να το κάνουμε αυτό. Μπορούμε είτε να επανατοποθετήσουμε τον κλάδο μας πάνω από τον κλάδο-προορισμό, όποιος κι αν είναι αυτός (συνήθως ο κλάδος `master` του αποθετηρίου μας) ή μπορούμε να συγχωνεύσουμε τον κλάδο-προορισμό στον κλάδο μας.

Οι περισσότεροι προγραμματιστές στο GitHub θα επιλέξουν να κάνουν το τελευταίο, για τους ίδιους λόγους που αναφέραμε στην προηγούμενη ενότητα. Αυτό που έχει σημασία είναι το ιστορικό και η τελική συγχώνευση, οπότε η επανατοποθέτηση δεν μας προσφέρει τίποτα άλλο από ένα κάπως καθαρότερο ιστορικό και σε αντάλλαγμα είναι *πολύ* πιο δύσκολη και επιρρεπής σε σφάλματα.

Εάν θέλουμε να συγχωνεύσουμε τον κλάδο-προορισμό, ώστε να καταστήσουμε το αίτημα ελκυσμού συγχωνεύσιμο, θα προσθέσουμε το αρχικό αποθετήριο ως νέο απομακρυσμένο, θα το παραλάβουμε (fetch), θα συγχωνεύσουμε τον κύριο κλάδο αυτού του αποθετηρίου στον θεματικό κλάδο μας, θα διορθώσουμε τυχόν προβλήματα και τελικά θα τον ωθήσουμε στον ίδιο κλάδο στον οποίο ανοίξαμε το αίτημα ελκυσμού.

Για παράδειγμα, ας πούμε ότι στο παράδειγμα ``tonychacon'' που χρησιμοποιούσαμε πριν, ο αρχικός συγγραφέας έκανε μια αλλαγή που θα δημιουργούσε μια σύγκρουση στο αίτημα ελκυσμού. Ας δούμε αυτά τα βήματα.

[source,console]
----
$ git remote add upstream https://github.com/schacon/blink <1>

$ git fetch upstream <2>
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
Unpacking objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
From https://github.com/schacon/blink
 * [new branch]      master     -> upstream/master

$ git merge upstream/master <3>
Auto-merging blink.ino
CONFLICT (content): Merge conflict in blink.ino
Automatic merge failed; fix conflicts and then commit the result.

$ vim blink.ino <4>
$ git add blink.ino
$ git commit
[slow-blink 3c8d735] Merge remote-tracking branch 'upstream/master' \
    into slower-blink

$ git push origin slow-blink <5>
Counting objects: 6, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 682 bytes | 0 bytes/s, done.
Total 6 (delta 2), reused 0 (delta 0)
To https://github.com/tonychacon/blink
   ef4725c..3c8d735  slower-blink -> slow-blink
----

<1> Add the original repository as a remote named ``upstream''
<2> Fetch the newest work from that remote
<3> Merge the main branch into your topic branch
<4> Fix the conflict that occurred
<5> Push back up to the same topic branch

<1> Προσθέτουμε το αρχικό αποθετήριο ως απομακρυσμένο με όνομα ``upstream''
<2> Λαμβάνουμε τη νεότερη έκδοση του απομακρυσμένου αποθετηρίου
<3> Συγχωνεύουμε τον κύριο κλάδο στον θεματικό κλάδο
<4> Διορθώνουμε τη σύγκρουση που συνέβη
<5> Ωθούμε ξανά στον ίδιο θεματικό κλάδο.

Μόλις το κάνουμε αυτό, το αίτημα ελκυσμού θα ενημερωθεί αυτόματα και θα επανελεγχθεί για να διαπιστωθεί εάν συγχωνεύεται καθαρά.

[[_pr_merge_fix]]
.Το αίτημα ελκυσμού τώρα συγχωνεύεται παστρικά
image::images/pr-02-merge-fix.png[Το αίτημα ελκυσμού τώρα συγχωνεύεται παστρικά]

Ένα από τα σπουδαία πράγματα σχετικά με το Git είναι ότι μπορούμε να το κάνουμε αυτό συνεχώς. Εάν έχουμε ένα πολύ μακρόβιο έργο, μπορούμε εύκολα να συγχωνευθούμε από τον κλάδο-προορισμό ξανά και ξανά και μόνο να αντιμετωπίσουμε τις συγκρούσεις που έχουν προκύψει από την τελευταία φορά που συγχωνεύθήκαμε, κάνοντας τη διαδικασία πολύ διαχειρίσιμη.

Εάν θέλουμε οπωσδήποτε να επανατοποθετήσουμε τον κλάδο για να τον καθαρίσουμε, μπορούμε σίγουρα να το κάνουμε αλλά είναι συνιστάται έντονα να μην εξαναγκάσουμε την ώθηση του κλάδου στον οποίο βασίζεται το αίτημα ελκυσμού. Εάν άλλοι συνεργάτες τον έχουν ελκύσει και κάνουν άλλη δουλειά σε αυτόν, θα συναντήσουμε σε όλα τα θέματα που περιγράφονται στην ενότητα <<_rebase_peril>>. Αντίθετα, συνιστάται να ωθήσουμε τον επανατοποθετημένο κλάδο σε έναν νέο κλάδο στο GitHub και να ανοίξουμε ένα καινούργιο αίτημα ελκυσμού αναφέροντας το παλιό και στη συνέχεια να κλείσουμε το αρχικό.

===== Αναφορές

Η επόμενη ερώτησή μας μπορεί να είναι ``Πώς μπορώ να αναφερθώ στο παλιό αίτημα ελκυσμού;'' Αποδεικνύεται ότι υπάρχουν πολλοί, πολλοί τρόποι να αναφερόμαστε σε άλλα πράγματα, σχεδόν οπουδήποτε μπορούμε να γράψουμε στο GitHub.

Ας ξεκινήσουμε με το πώς μπορούμε να αναφερθούμε σε κάποιο άλλο ζήτημα ή αίτημα ελκυσμού. Σε όλα τα ζητήματα και τα αιτήματα ελκυσμού έχουν εκχωρηθεί αριθμοί που είναι μοναδικοί στο πλαίσιο του έργου. Για παράδειγμα, δεν μπορούμε να έχουμε το αίτημα ελκυσμού #3 και το ζήτημα #3. Αν θέλουμε να αναφερθούμε σε οποιοδήποτε αίτημα ελκυσμού ή ζήτημα από οποιοδήποτε άλλο, απλά να γράφουμε `#<num> σε οποιοδήποτε σχόλιο ή περιγραφή. Μπορούμε επίσης να είμαστε πιο συγκεκριμένοι αν το αίτημα ελκυσμού ή ή ζήτημα βρίσκεται κάπου αλλού· γράφουμε `username#<num>` αν αναφερόμαστε σε ένα αίτημα ελκυσμού ή ζήτημα σε μια διχάλα του αποθετηρίου στο οποίο βρισκόμαστε ή `username/repo#<num>` για να αναφερθούμε σε κάτι που βρίσκεται σε άλλο αποθετήριο.

Ας δούμε ένα παράδειγμα. Ας υποθέσουμε ότι επανατοποθετήσαμε τον κλάδο στο προηγούμενο παράδειγμα, δημιουργήσαμε ένα νέο αίτημα ελκυσμού για αυτό και τώρα θέλουμε να αναφερθούμε στο παλιό αίτημα ελκυσμού από το νέο. Θέλουμε επίσης να αναφερθούμε σε ένα ζήτημα στη διχάλα του αποθετηρίου και ένα ζήτημα σε ένα εντελώς διαφορετικό έργο. Μπορούμε να συμπληρώσουμε την περιγραφή ακριβώς όπως στην <<_pr_references>>.

[[_pr_references]]
.Αναφορές σε αιτήματα ελκυσμού.
image::images/mentions-01-syntax.png[Αναφορές σε αιτήματα ελκυσμού.]

Όταν υποβάλουμε αυτό το αίτημα ελκυσμού, θα δούμε όλα αυτά να αποδίδονται όπως στην <<_pr_references_render>>.

When we submit this pull request, we'll see all of that rendered like <<_pr_references_render>>.

[[_pr_references_render]]
.Απόδοση αναφορών σε αίτημα ελκυσμού
image::images/mentions-02-render.png[Απόδοση αναφορών σε αίτημα ελκυσμού.]

Παρατηρήστε ότι η πλήρης διεύθυνση URL του GitHub που βάλουμε εκεί συντομεύτηκε μόνο στις απαραίτητες πληροφορίες.

Τώρα, αν ο Tony επιστρέψει και κλείσει το αρχικό αίτημα ελκυσμού, μπορούμε να δούμε ότι επειδή το έχουμε αναφέρει το στο νέο, το GitHub δημιούργησε αυτόματα ένα συμβάν trackback στο χρονολόγιο του αιτήματος ελκυσμού. Αυτό σημαίνει ότι όποιος επισκέπτεται αυτό το αίτημα ελκυσμού και βλέπει ότι είναι κλειστό, μπορεί εύκολα να συνδεθεί με εκείνον που την αντικατέστησε. Ο σύνδεσμος θα μοιάζει με το <<_pr_closed>>.

[[_pr_closed]]
.Απόδοση αναφορών σε κλειστό αίτημα ελκυσμού
image::images/mentions-03-closed.png[Απόδοση αναφορών σε κλειστό αίτημα ελκυσμού]

Εκτός από τον αριθμό έκδοσης, μπορούμε επίσης να αναφερθούμε σε μια συγκεκριμένη υποβολή με τον αριθμό SHA-1. Πρέπει να χρησιμοποιήσουμε και τους 40 χαρακτήρες του SHA-1 αλλά εάν το GitHub το δει σε ένα σχόλιο, θα συνδεθεί άμεσα με την υποβολή. Επαναλαμβάνουμε ότι μπορούμε να αναφερθούμε σε υποβολές σε διχάλες ή άλλα αποθετήρια με τον ίδιο τρόπο που κάναμε με τα ζητήματα.

==== Markdown

Η σύνδεση με άλλα θέματα είναι μόνο ένα από τα πολλά ενδιαφέροντα πράγματα που μπορούμε να κάνουμε με σχεδόν οποιοδήποτε πλαίσιο κειμένου στο GitHub. Στις περιγραφές των ζητημάτων και αιτημάτων ελκυσμού, τα σχόλια, τα σχόλια κώδικα και πολλά άλλα, μπορούμε να χρησιμοποιήσουμε αυτό που ονομάζεται ``Markdown με άρωμα GitHub''. Η Markdown είναι σαν να γράφουμε απλό κείμενο, το οποίο όμως αποδίδεται πλούσια μορφοποίηση.

Βλ. <<_example_markdown>> για ένα παράδειγμα του πώς μπορούν να γραφτούν σχόλια ή κείμενο και στη συνέχεια να αποδοθούν χρησιμοποιώντας την Markdown.

[[_example_markdown]]
.Παράδειγμα της Markdown: γραφή και απόδοση
image::images/markdown-01-example.png[Παράδειγμα της Markdown: γραφή και απόδοση]

===== Markdown με άρωμα GitHub

Η Markdown με άρωμα GitHub προσθέτει περισσότερα πράγματα που μπορούμε να κάνουμε πέρα από τη βασική σύνταξη Markdown. Όλα αυτά μπορούν να είναι πραγματικά χρήσιμα όταν δημιουργούμε αιτήματα ελκυσμού, σχόλια ή περιγραφές.

====== Λίστες καθηκόντων

Η πρώτη πραγματικά χρήσιμη λειτουργία της Markdown ειδικά GitHub, ειδικά για χρήση σε αιτήματα ελκυσμού, είναι η λίστα εργασιών. Μια λίστα εργασιών είναι μια λίστα πλαισίων επιλογής πραγμάτων που θέλουμε να υλοποιηθούν. Η τοποθέτησή τους σε ένα ζήτημα ή αίτημα ελκυσμού συνήθως υποδεικνύει κάτι που θέλουμε να γίνει πριν να θεωρήσουμε ότι το στοιχείο ολοκληρώθηκε.

Μπορούμε να δημιουργήσουμε μια λίστα εργασιών όπως αυτή:

[source]
----
- [X] Write the code
- [ ] Write all the tests
- [ ] Document the code
----

Αν συμπεριλάβουμε αυτό στην περιγραφή ενός αιτήματος ελκυσμού ή ενός ζητήματος μας, θα το δούμε να αποδίδεται σαν την <<_task_lists>>.

[[_task_lists]]
.λίστα καθηκόντων όπως αποδίδεδται σε σχόλιο Markdown
image::images/markdown-02-tasks.png[Παράδειγμα λίστας καθηκόντων.]

Αυτό χρησιμοποιείται συχνά στα αιτήματα ελκυσμού για να υποδείξουμε τι θα επιθυμούσαμε να γίνει στον κλάδο πριν το αίτημα ελκυσμού να συγχωνευτεί. Το πολύ ωραίο είναι ότι μπορεί κανείς να κάνει κλικ στα πλαίσια ελέγχου για να ενημερώσουμε το σχόλιο --δεν χρειάζεται να επεξεργαστούμε άμεσα την Markdown για να τσεκάρουμε ή ξετσεκάρουμε αυτά τα καθήκοντα.

Επιπλέον το GitHub θα ψάξει για λίστες καθηκόντων στα ζητήματά μας και τα αιτήματα ελκυσμού και θα τα δείξει ως μεταδεδομένα στις σελίδες που τα παραθέτουν. Για παράδειγμα, εάν έχουμε ένα αίτημα ελκυσμού με εργασίες και κοιτάζουμε τη σελίδα επισκόπησης όλων των αιτημάτων ελκυσμού, μπορούμε να δούμε σε τι βαθμό έχουν υλοποιηθεί. Αυτό βοηθά τον κόσμο να σπάσει το αίτημα ελκυσμού σε υποκαθήκοντα και βοηθά τους υπόλοιπους να παρακολουθούν την πρόοδο του κλάδου. Μπορούμε να δούμε ένα παράδειγμα αυτού στο <<_task_list_progress>>.

What's more, GitHub will look for task lists in your Issues and αιτήματα ελκυσμού and show them as metadata on the pages that list them out. For example, if you have a αίτημα ελκυσμού with tasks and you look at the overview page of all αιτήματα ελκυσμού, you can see how far done it is. This helps people break down αιτήματα ελκυσμού into subtasks and helps other people track the progress of the branch. You can see an example of this in <<_task_list_progress>>.

[[_task_list_progress]]
.περίληψη λίστας καθηκόντων σε αίτημα ελκυσμού
image::images/markdown-03-task-summary.png[Παράδειγμα λίστας καθηκόντων]

Αυτά είναι εξαιρετικά χρήσιμα όταν ανοίγουμε νωρίς ένα αίτημα ελκυσμού και το χρησιμοποιούμε για να παρακολουθούμε την πρόοδο υλοποίησης του.

====== Αποσπάσματα κώδικα

Μπορούμε επίσης να προσθέσουμε αποσπάσματα κώδικα σε σχόλια. Αυτό είναι ιδιαίτερα χρήσιμο εάν θέλουμε να παρουσιάσουμε κάτι που _θα μπορούσαμε_ να προσπαθήσουμε να κάνουμε, πριν να το υλοποιήσουμε ως υποβολή στον κλάδο μας. Αυτό χρησιμοποιείται επίσης συχνά για να προσθέσουμε παραδείγματα κώδικα για το τι δεν λειτουργεί ή για το τι θα μπορούσε να υλοποιήσει αυτό το αίτημα ελκυσμού.

Για να προσθέσουμε ένα κομμάτι κώδικα, πρέπει να το περικλείσουμε σε βαρείες.

[source]
----
```java
for(int i=0 ; i < 5 ; i++)
{
   System.out.println("i is : " + i);
}
```
----

Εάν προσθέσουμε ένα όνομα γλώσσας όπως κάναμε εκεί με το 'java', το GitHub θα προσπαθήσει επίσης να επισημάνει συντακτικά το απόσπασμα. Στην περίπτωση του παραπάνω παραδείγματος, θα καταλήξει σαν το <<_md_code>>.

[[_md_code]]
.Παράδειγμα απόδοσης κώδικα περικλεισμένου σε βαρείες
image::images/markdown-04-fenced-code.png[Παράδειγμα απόδοσης κώδικα περικλεισμένου σε βαρείες]

====== Παράθεμα

Εάν απαντάμε σε ένα μικρό κομμάτι ενός μακροσκελούς σχολίου, μπορούμε να κάνουμε επιλεκτική παράθεση από το άλλο σχόλιο ξεκινώντας τις γραμμές με τον χαρακτήρα `>`. Στην πραγματικότητα, αυτό είναι τόσο κοινό και τόσο χρήσιμο ώστε υπάρχει συντόμευση πληκτρολογίου για αυτό. Εάν επιλέξουμε κείμενο σε ένα σχόλιο στο οποίο θέλουμε να απαντήσουμε άμεσα και πατήσουμε το πλήκτρο `r`, θα παρατεθεί αυτό το κείμενο στο πλαίσιο σχολίων.

Τα παραθέματα μοιάζουν με το παρακάτω:

[source]
----
> Whether 'tis Nobler in the mind to suffer
> The Slings and Arrows of outrageous Fortune,

How big are these slings and in particular, these arrows?
----

Μόλις αποδοθεί, το σχόλιο θα μοιάζει με <<_md_quote>>.

[[_md_quote]]
.Παράδειγμα απόδοσης παραθέματος
image::images/markdown-05-quote.png[Απόδοση παραθέματος]

====== Emoji

Finally, you can also use emoji in your comments. This is actually used quite extensively in comments you see on many GitHub Issues and αιτήματα ελκυσμού. There is even an emoji helper in GitHub. If you are typing a comment and you start with a `:` character, an autocompleter will help you find what you're looking for.

Τέλος, μπορούμε επίσης να χρησιμοποιήσουμε emoji στα σχόλιά μας. Τα emoji χρησιμοποιούνται πραγματικά πολύ εκτενώς στα σχόλια που βλέπουμε σε πολλά ζητήματα και αιτήματα ελκυσμού στο GitHub. Υπάρχει ακόμα ένας βοηθός emoji στο GitHub. Αν πληκτρολογούμε ένα σχόλιο και ξεκινάμε με ένα χαρακτήρα `:`, μία λίστα αυτόματης συμπλήρωσης θα μας βοηθήσει να βρούμε αυτό που ψάχνουμε.

[[_md_emoji_auto]]
.Λίστα αυτόματης συμπλήρωσης emoji.
image::images/markdown-06-emoji-complete.png[Λίστα αυτόματης συμπλήρωσης emoji]

Τα emoji έχουν τη μορφή `:<name>:` οπουδήποτε στο σχόλιο. Για παράδειγμα, θα μπορούσαμε να γράψουμε κάτι σαν αυτό:

[source]
----
I :eyes: that :bug: and I :cold_sweat:.

:trophy: for :microscope: it.

:+1: and :sparkles: on this :ship:, it's :fire::poop:!

:clap::tada::panda_face:
----

Όταν αποδίδεται, θα φαίνεται σαν << _md_emoji>>.


[[_md_emoji]]
.Σχολιασμός με πολλά emoji
image::images/markdown-07-emoji.png[Emoji]

Δεν είναι δα και ό,τι πιο χρήσιμο αλλά προσθέτει ένα στοιχείο διασκέδασης και συναισθήματος σε ένα μέσο στο οποίο είναι δύσκολο να μεταφέρει κανείς συναισθήματα με άλλον τρόπο.

[ΣΗΜΕΙΩΣΗ]
====
Στην πραγματικότητα υπάρχουν αρκετές διαδικτυακές υπηρεσίες που κάνουν χρήση των χαρακτήρων emoji σήμερα. Ένα εξαιρετικό σκονάκι με emoji υπάρχει στο:

http://www.emoji-cheat-sheet.com[]
====

====== Εικόνες

Το παρακάτω τεχνικά δεν είναι Markdown με άρωμα GitHub αλλά είναι εξαιρετικά χρήσιμο. Εκτός από την προσθήκη συνδέσμων εικόνων Markdown σε σχόλια, τα οποία μπορεί να είναι δύσκολο να βρεθούν και να ενσωματωθούν οι διευθύνσεις URL τους, το GitHub μάς επιτρέπει να μεταφέρουμε εικόνες σε περιοχές κειμένου και να τις ενσωματώσουμε με μεταφορά-και-απόθεση.

[[_md_drag]]
.Μεταφορά-και-απόθεση εικόνων για μεταφόρτωσή και αυτόματη ενσωμάτωσή τους
image::images/markdown-08-drag-drop.png[Μεταφορά-και-απόθεση εικόνων.]

Αν ανατρέξουμε στο <<_pr_references>>, μπορούμε να δούμε μια μικρή συμβουλή ``Parsed as Markdown'' πάνω από την περιοχή κειμένου. Κάνοντας κλικ σε αυτό θα μας δοθεί ένα πλήρες σκονάκι με ό,τι μπορούμε να κάνουμε με την Markdown στο GitHub.
