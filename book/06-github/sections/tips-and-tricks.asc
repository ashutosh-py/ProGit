=== Tips and Tricks

Now that you know the basics, let's cover some smaller topics that will make your time with GitHub easier and more enjoyable.

==== Importing

(((GitHub, importing)))
If you're currently using another version-control system and you want to move your project to GitHub, start by converting your project's history to Git.
See <<_migrating>> for details on this, and come back to this section when you're done.

So you have a Git repository that you'd like to host on GitHub.
First, create the destination project on GitHub, but don't add a readme, license, or `.gitignore` file.
It's important that the destination be an empty repository.
Next, do this in a shell:

[source,shell]
----
$ git clone --bare <oldrepourl> github_import.git
$ cd github_import.git
$ git push --mirror https://github.com/<namespace>/<project>
----

The first command creates a bare clone of the old repository, partly to validate the data that you expect to be sending, and partly to ensure that a working directory doesn't interfere.
The third command pushes *all* of the refs in the repository to their new home.
This transfers all of the branches, tags, and other references to the project on GitHub.

==== Working with Subversion

(((GitHub, Subversion and)))(((Subversion)))
GitHub has a Subversion bridge that lets you work on GitHub projects using a Subversion client.
To get started, do this:

[source,shell]
----
$ svn checkout --depth empty https://github.com/user/project
$ cd project
$ svn up --depth empty branches
$ svn up trunk
----

This creates the `branches` directory (where you can checkout or create branches) and checks out the remote HEAD to the `trunk` directory.
From here, you can do almost anything you'd normally do with Subversion: create new branches, check changes in, change ignore settings, and so on.

The thing to remember is that the repository really is Git underneath.
Try this:

[source,shell]
----
$ svn propget git-commit --revprop -r 123
----

This gets the Git SHA-1 hash for the Git commit that corresponds to Subversion commit 123.

==== `gh`

(((gh)))
`gh` is a tool that teaches command-line git about GitHub.
If you work frequently with GitHub-hosted projects, `gh` can save you a lot of typing and browsing and clicking.
Here are some of the tricks it knows:

* *Project Creation* – `gh create foo` will create a new project named `foo` in your user's namespace, and add it as a remote.
* *Easy Cloning* – `gh clone github/hubot` translates to `git clone git://github.com/github/hubot`.
* *Pull Requests* – `gh pull-request` creates a new PR from the current branch to `master`, opening up your default editor for the title and description. It can even attach a branch to an existing issue with the `-i` flag, converting that issue into a pull request.
* *Situational Awareness* – Say your username is `john`, and your current directory is `project` (which is a Git repository).
  `gh remote add origin` translates to `git remote add -f origin git://github.com/john/project`.
* *Project Networks* – if you're currently working on `john/project`, doing `gh fetch jane` will add `git://github.com/jane/project` as a remote named "`jane`" and fetch from it.
* *Browsing* – `gh browse` opens the current branch on the GitHub website.
* *Other APIs* – GitHub allows continuous-integration systems to set a pass-or-fail status on a branch.
  You can fetch this value for the current branch with `gh ci-status`.
* …and many more.

Installing it is fairly easy; just download a binary from https://github.com/jingweno/gh/releases[], and put it somewhere in your PATH.
Probably the best way to integrate it is to alias `git` to `gh` in your shell; `gh` acts like an augmentation layer over native Git commands.
Put a line like this somewhere in your shell initialization file:

[source,shell]
----
eval "$(gh alias -s)"
----

From now on, you can use `gh` commands as though they were Git commands.

==== Pull-Request Refs

GitHub provides a way for you to fetch the work submitted on a pull request directly to your local repository.
To fetch a specific pull request, do this:

[source,shell]
----
$ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -> FETCH_HEAD
----

This tells Git, "`Connect to the `origin` remote, and download the ref named `refs/pull/958/head`.`"
Git happily obeys, and downloads everything you need to construct that ref, and puts a pointer to the commit you want under `.git/FETCH_HEAD`.
You can follow all that up with `git checkout FETCH_HEAD`, but this leaves your HEAD in a detached state.
Also, if you're reviewing a *lot* of pull requests, this gets tedious.

There's also a way to fetch _all_ of the pull requests, and keep them up to date whenever you connect to the remote.
Open up `.git/config` in your favorite editor, and look for the `origin` remote.
It should look a bit like this:

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
----

That line that begins with `fetch =` is a "`refspec.`"
It's a way of mapping names on the remote with names in your local `.git` directory.
This particular one tells Git, "the things on the remote that are under `refs/heads` should go in my local repository under `refs/remotes/origin`."
If you modify this section to add another refspec:

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
----

[NOTE]
====
This is a bit of an advanced trick.
If you're confused, flip to <<_refspec>> for more details.
====

That last line tells Git, "`All the refs that look like `refs/pull/123/head` should be stored locally like `refs/pull/origin/123`.`"
Save that file, and do a `git fetch`:

[source,shell]
----
$ git fetch
# …
 * [new ref]         refs/pull/958/head -> origin/pr/958
 * [new ref]         refs/pull/959/head -> origin/pr/959
 * [new ref]         refs/pull/96/head -> origin/pr/96
 * [new ref]         refs/pull/961/head -> origin/pr/961
# …
----

Now all of the remote pull requests are represented locally with refs that act much like tracking branches; they're read-only, and they update when you do a fetch.
This makes it super easy to try the code from a pull request locally:

[source,shell]
----
$ git checkout pr/958
Checking out files: 100% (3769/3769), done.
Branch pr/958 set up to track remote branch pr/958 from origin.
Switched to a new branch 'pr/958'
----

The eagle-eyed among you would note the `head` on the end of the remote portion of the refspec.
There's also a `refs/pull/#/merge` ref on the GitHub side, which represents the commit that would result if the pull request had been merged.


==== Keyboard Shortcuts

GitHub has many features and screens, but some are more commonly-used than others.
These have been augmented with keyboard shortcuts.
The list of them is always expanding, but here's a cheat-sheet of the most valuable:

[cols="2,4",options="header"]
|==========
| Key  | Notes
| `?`  | Displays the keyboard-shortcuts help.
| `/`  | Sets the focus to the search/command bar.
| `gn` | Goes to the Notifications view.
| `gi` | From a repository, goes to the Issues view.
| `gp` | From a repository, goes to the Pull Requests view.
| `⌘+enter` | Submit the comment, issue, or pull request you're currently editing.
| `⌘+shift+p` | Toggle the rendered-Markdown preview.
| `t`  | From the Code view, enters a fuzzy-file-finder mode.
| `r`  | From within an Issue or Pull Request, focuses on the comment-authoring field, and adds the highlighted text as a quotation.
| `y`  | Go to the "`canonical`" url for this view (see below).
|==========

(((GitHub, canonical URLs)))
What's a canonical URL, you ask?
Many GitHub URLs for file contents look like this:

    https://github.com/user/repo/blob/master/directory/file

This URL isn't stable, because the contents you'll find there will change when the `master` branch is updated.
A canonical URL looks more like this:

    https://github.com/user/repo/blob/<SHA>/directory/file

Note the SHA-1 hash in the URL – that URL points to a specific version of the file.
It's a lot less readable, but the contents will _always_ be the same.
This is useful when discussing a bug, because presumably the files and lines involved will be changed once the bug has been fixed.


==== Ignore Whitespace

When you're reviewing a Pull Request that's mostly formatting changes, it can be difficult to see if there are any actual code or logic changes mixed in.
Adding `?w=1` to the end of a URL that shows a diff turns on the `-w` (or `--ignore-all-space`) to `git diff`, which can result in a much cleaner diff view.
This works for Pull Requests:

    https://github.com/user/repo/pulls/123/files?w=1

As well as compare views:

    https://github.com/user/repo/compare/feature1...master?w=1


==== Rev-Parse Specs

Much like Git itself, GitHub accepts a rev-parse expression in many places where a version or refname is expected.
For example, this URL shows the tree view of the `master` branch:

    https://github.com/user/repo/tree/master

But you can also refer to that tree view by SHA-1 hash:

    https://github.com/user/repo/tree/2d3a8eee86df27446177a4c4254b71eb109a472c

But the magic here is that GitHub accepts an expression that unambiguously describes what you're looking for.
For example, the grandparent of the `feature1` branch:

    https://github.com/user/repo/tree/feature1~2

This also works for specifying endpoints for a Compare view:

    https://github.com/user/repo/compare/master~3...master^2

If this is all Greek to you, check out <<_revparse>> for more on this expression language.


==== Commits by Author

To see a particular person's contributions to a repository, you can list only their commits:

    https://github.com/user/repo/commits/master?author=jane

That view will show all the commits reachable from `master` which have an email address that belongs to the `jane` user.

==== Diffs as `.patch`

GitHub generates nice human-readable unified-diff views, but you can't just copy and paste these to a command line to apply the diff.
Luckily, GitHub can help you out: just append `.diff` or `.patch` to the end of the URL of any pull request, commit, or compare view, and you'll get the plain-text view of what that page is showing.


==== Line Linking

If you're looking at a file or commit, you should know that the line numbers on the left-hand side are links.
If you click one, GitHub highlights that line.
If you then shift-click another, GitHub will highlight the range of lines between the two.
The highlighted lines are encoded in the URL, so you can bring a colleague to the exact snippet of code you want them to look at.

==== Command Bar

The "`search`" bar at the top of the screen is hiding a lot of power.
Here's a small sample of its capabilities:

* `@user` takes you to a user page
* The autocompletion for `user/` shows you that user's repositories.
* Autocomplete for `user/project #` shows you that project's issues and pull requests.

As you can see, this is more of a command-line interface than a search bar (though full-text search is also one of its functions).
Click on the "`?`" icon at the right side of the bar to show more examples.
