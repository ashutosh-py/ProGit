[[_maintaining_gh_project]]
=== Συντήρηση ενός έργου

Τώρα που συμβάλλουμε άνετα σε ένα έργο, ας δούμε την άλλη πλευρά: τη δημιουργία, τη συντήρηση και τη διαχείριση του δικού σας έργου.

Now that we're comfortable contributing to a project, let's look at the other side: creating, maintaining and administering your own project.

==== Δημιουργία νέου αποθετηρίου

Ας δημιουργήσουμε ένα νέο αποθετήριο για να μοιραστούμε τον κώδικα του έργου μας.
Ξεκινήστε κάνοντας κλικ στο κουμπί `` Νέο αποθετήριο '' στη δεξιά πλευρά του ταμπλό ή στο κουμπί `+ 'στην επάνω γραμμή εργαλείων δίπλα στο όνομα χρήστη σας όπως φαίνεται στο << _new_repo_dropdown>>.

Let's create a new repository to share our project code with.
Start by clicking the ``New repository'' button on the right-hand side of the dashboard, or from the `+` button in the top toolbar next to your username as seen in <<_new_repo_dropdown>>.

.The ``Your repositories'' area.
image::images/newrepo.png[The ``Your repositories'' area.]

[[_new_repo_dropdown]]
.The ``New repository'' dropdown.
image::images/new-repo.png[The ``new repository'' dropdown.]

Αυτό σας μεταφέρει στη φόρμα `` new repository '':

This takes you to the ``new repository'' form:

.The ``new repository'' form.
image::images/newrepoform.png[The ``new repository'' form.]

Το μόνο που έχουμε να κάνουμε εδώ είναι να δώσουμε ένα όνομα έργου. τα υπόλοιπα πεδία είναι εντελώς προαιρετικά.
Προς το παρόν, απλώς κάντε κλικ στο κουμπί `` Create Repository '' και το boom - έχουμε ένα νέο αποθετήριο στο GitHub, το οποίο ονομάζεται `<user> / <project_name> '.

All you really have to do here is provide a project name; the rest of the fields are completely optional.
For now, just click the ``Create Repository'' button, and boom – you have a new repository on GitHub, named `<user>/<project_name>`.

Since you have no code there yet, GitHub will show you instructions for how create a brand-new Git repository, or connect an existing Git project.
We won't belabor this here; if you need a refresher, check out <<_git_basics_chapter>>.

Εφόσον δεν έχουμε ακόμα κανένα κωδικό, το GitHub θα σας δείξει οδηγίες για τον τρόπο δημιουργίας ενός ολοκαίνουργιου αποθετηρίου Git ή για τη σύνδεση ενός υπάρχοντος έργου Git.
Δεν θα το επεξεργαστούμε εδώ. αν χρειάζεστε μια ανανέωση, ελέγξτε το <<_git_basics_chapter>>.

Τώρα που το έργο σας φιλοξενείται στο GitHub, μπορούμε να δώσουμε τη διεύθυνση URL σε οποιονδήποτε θέλουμε να μοιραστεί το έργο σας.
Κάθε έργο στο GitHub είναι προσβάσιμο από το HTTP ως "https://github.com/ <user> / <project_name>`, και πάνω από το SSH ως `git@github.com: <user> / <project_name> '.
Το Git μπορεί να μεταφέρει και να προωθείται και στις δύο αυτές διευθύνσεις URL, αλλά ελέγχεται η πρόσβαση βάσει των διαπιστευτηρίων του χρήστη που συνδέεται με αυτά.

Now that your project is hosted on GitHub, you can give the URL to anyone you want to share your project with.
Every project on GitHub is accessible over HTTP as `https://github.com/<user>/<project_name>`, and over SSH as `git@github.com:<user>/<project_name>`.
Git can fetch from and push to both of these URLs, but they are access-controlled based on the credentials of the user connecting to them.

[ΣΗΜΕΙΩΣΗ]
====
Είναι συχνά προτιμότερο να μοιραστούμε τη διεύθυνση URL που βασίζεται σε HTTP για ένα δημόσιο έργο, καθώς ο χρήστης δεν χρειάζεται να έχει λογαριασμό GitHub για να έχει πρόσβαση σε αυτόν για κλωνοποίηση.
Οι χρήστες θα πρέπει να έχουν λογαριασμό και μεταφορτωμένο κλειδί SSH για να αποκτήσουν πρόσβαση στο έργο σας, αν τους δώσουμε τη διεύθυνση URL SSH.
Το HTTP είναι ακριβώς το ίδιο URL που θα επικολληθούν σε ένα πρόγραμμα περιήγησης για να δούμε το έργο εκεί.
====
[NOTE]
====
It is often preferable to share the HTTP based URL for a public project, since the user does not have to have a GitHub account to access it for cloning.
Users will have to have an account and an uploaded SSH key to access your project if you give them the SSH URL.
The HTTP one is also exactly the same URL they would paste into a browser to view the project there.
====

==== Προσθήκη συνεργατών

Εάν εργάζεστε με άλλα άτομα στα οποία θέλουμε να επιτρέψουμε την πρόσβαση, πρέπει να τα προσθέσουμε ως "συνεργάτες".
Αν ο Ben, ο Jeff και ο Louise εγγραφούν όλοι για λογαριασμούς στο GitHub και θέλουμε να τους δώσουμε ώθηση στην αποθήκη σας, μπορούμε να τους προσθέσουμε στο έργο σας.
Κάτι τέτοιο θα τους δώσει `` push '' πρόσβαση, που σημαίνει ότι έχουν τόσο την ανάγνωση όσο και την εγγραφή στο έργο και στο Git repository.

If you're working with other people who you want to give commit access to, you need to add them as ``collaborators''.
If Ben, Jeff, and Louise all sign up for accounts on GitHub, and you want to give them push access to your repository, you can add them to your project.
Doing so will give them ``push'' access, which means they have both read and write access to the project and Git repository.

Κάντε κλικ στο σύνδεσμο `` Settings '' στο κάτω μέρος της δεξιάς πλαϊνής γραμμής.

Click the ``Settings'' link at the bottom of the right-hand sidebar.

.The repository settings link.
image::images/reposettingslink.png[The repository settings link.]

Στη συνέχεια επιλέξτε `` Συνεργάτες '' από το μενού στην αριστερή πλευρά.
Στη συνέχεια, πληκτρολογήστε ένα όνομα χρήστη στο πλαίσιο και κάντε κλικ στο κουμπί "Προσθήκη συνεργάτη".
Μπορούμε να το επαναλάβουμε όσες φορές θέλουμε να δώσουμε πρόσβαση σε όποιον θέλουμε.
Αν χρειαστεί να ανακαλέσουμε την πρόσβαση, απλά κάντε κλικ στο `` X '' στη δεξιά πλευρά της σειράς.

Then select ``Collaborators'' from the menu on the left-hand side.
Then, just type a username into the box, and click ``Add collaborator.''
You can repeat this as many times as you like to grant access to everyone you like.
If you need to revoke access, just click the ``X'' on the right-hand side of their row.

.Repository collaborators.
image::images/collaborators.png[The repository collaborators box.]

==== Managing Pull Requests

Now that you have a project with some code in it and maybe even a few collaborators who also have push access, let's go over what to do when you get a Pull Request yourself.

Τώρα που έχουμε ένα έργο με κάποιο κώδικα σε αυτό και ίσως ακόμη και μερικούς συνεργάτες που έχουν επίσης πρόσβαση push, ας πάμε πέρα ​​από το τι πρέπει να κάνουμε όταν αποκτήσουμε τον εαυτό σας ένα Pull Request.

Τα αιτήματα ελκυσμού μπορεί είτε να προέρχεται από έναν κλάδο σε ένα πιρούνι του αποθετηρίου σας είτε μπορεί να προέρχεται από άλλο κλάδο στο ίδιο αποθετήριο.
Η μόνη διαφορά είναι ότι αυτοί που βρίσκονται σε ένα πιρούνι είναι συχνά από άτομα που δεν μπορούμε να σπρώξουμε στο υποκατάστημά τους και δεν μπορούν να σπρώξουν προς τη δική σας, ενώ με τα εσωτερικά Pull Requests γενικά και τα δύο μέρη έχουν πρόσβαση στον κλάδο.

Pull Requests can either come from a branch in a fork of your repository or they can come from another branch in the same repository.
The only difference is that the ones in a fork are often from people where you can't push to their branch and they can't push to yours, whereas with internal Pull Requests generally both parties can access the branch.

Για αυτά τα παραδείγματα, ας υποθέσουμε ότι είστε `` tonychacon '' και έχουμε δημιουργήσει ένα νέο πρόγραμμα κώδικα Arduino που ονομάζεται `` fade ''.

For these examples, let's assume you are ``tonychacon'' and you've created a new Arduino code project named ``fade''.

[[_email_notifications]]
===== Ειδοποιήσεις e-mail

Κάποιος έρχεται μαζί και κάνει μια αλλαγή στον κώδικά σας και σας στέλνει ένα αίτημα ελκύσης.
Θα πρέπει να λάβουμε ένα μήνυμα ηλεκτρονικού ταχυδρομείου που θα σας ειδοποιεί για το νέο αίτημα εξαναγκασμού και θα πρέπει να φαίνεται σαν <<_email_pr>>.

Someone comes along and makes a change to your code and sends you a Pull Request.
You should get an email notifying you about the new Pull Request and it should look something like <<_email_pr>>.

[[_email_pr]]
.Email notification of a new Pull Request.
image::images/maint-01-email.png[Pull Request email notification]

There are a few things to notice about this email.
It will give you a small diffstat -- a list of files that have changed in the Pull Request and by how much.
It gives you a link to the Pull Request on GitHub.
It also gives you a few URLs that you can use from the command line.

Υπάρχουν μερικά πράγματα που μπορούμε να παρατηρήσουμε σχετικά με αυτό το μήνυμα ηλεκτρονικού ταχυδρομείου.
Θα σας δώσει ένα μικρό diffstat - μια λίστα των αρχείων που έχουν αλλάξει στο Pull Request και κατά πόσο.
Σας δίνει ένα σύνδεσμο προς την Αίτηση Τράβηγμα στο GitHub.
Σας δίνει επίσης μερικές διευθύνσεις URL που μπορούμε να χρησιμοποιήσουμε από τη γραμμή εντολών.

Αν παρατηρήσουμε τη γραμμή που λέει `git pull <url> patch-1, αυτός είναι ένας απλός τρόπος για να συγχωνεύσουμε έναν απομακρυσμένο κλάδο χωρίς να χρειάζεται να προσθέσουμε ένα απομακρυσμένο.
Πήγαμε αυτό γρήγορα μέσα στο <<_checking_out_remotes>>.
Αν θέλουμε, μπορούμε να δημιουργήσουμε και να μεταβούμε σε ένα κλάδο θέμα και στη συνέχεια να εκτελέσουμε αυτήν την εντολή για να συγχωνεύσουμε τις αλλαγές Pull Request.

If you notice the line that says `git pull <url> patch-1`, this is a simple way to merge in a remote branch without having to add a remote.
We went over this quickly in <<_checking_out_remotes>>.
If you wish, you can create and switch to a topic branch and then run this command to merge in the Pull Request changes.

Οι άλλες ενδιαφέρουσες διευθύνσεις URL είναι οι διευθύνσεις `.diff` και` .patch`, οι οποίες, όπως πιθανόν να μαντέψουμε, παρέχουν ενοποιημένες εκδόσεις diff και patch του Request Pull.
Θα μπορούσατε τεχνικά να συγχωνεύσουμε το έργο Pull Request με κάτι σαν αυτό:

The other interesting URLs are the `.diff` and `.patch` URLs, which as you may guess, provide unified diff and patch versions of the Pull Request.
You could technically merge in the Pull Request work with something like this:

[source,console]
----
$ curl http://github.com/tonychacon/fade/pull/1.patch | git am
----

===== Collaborating on the Pull Request

As we covered in <<_github_flow>>, you can now have a conversation with the person who opened the Pull Request.
You can comment on specific lines of code, comment on whole commits or comment on the entire Pull Request itself, using GitHub Flavored Markdown everywhere.

Καθώς καλύφθηκα στο <<_github_flow>>, μπορούμε τώρα να έχουμε μια συνομιλία με το άτομο που άνοιξε το Pull Request.
Μπορούμε να σχολιάζουμε συγκεκριμένες γραμμές κώδικα, να σχολιάζουμε ολόκληρες δεσμεύσεις ή να σχολιάζουμε ολόκληρο το ίδιο το Pull Request, χρησιμοποιώντας το GitHub Flavored Markdown παντού.

Κάθε φορά που κάποιος άλλος σχολιάζει το Pull Request, θα συνεχίσουμε να λαμβάνουμε ειδοποιήσεις μέσω ηλεκτρονικού ταχυδρομείου, ώστε να γνωρίζουμε ότι υπάρχει δραστηριότητα που συμβαίνει.
Θα έχουν το καθένα μια σύνδεση με το Pull Request όπου η δραστηριότητα συμβαίνει και μπορούμε επίσης να απαντήσουμε άμεσα στο email για να σχολιάσουμε το thread Pull Request.

Every time someone else comments on the Pull Request you will continue to get email notifications so you know there is activity happening.
They will each have a link to the Pull Request where the activity is happening and you can also directly respond to the email to comment on the Pull Request thread.

.Responses to emails are included in the thread.
image::images/maint-03-email-resp.png[Email response]

Once the code is in a place you like and want to merge it in, you can either pull the code down and merge it locally, either with the `git pull <url> <branch>` syntax we saw earlier, or by adding the fork as a remote and fetching and merging.

Μόλις ο κώδικας βρίσκεται σε ένα μέρος που σας αρέσει και θέλουμε να το συγχωνεύσουμε, μπορούμε είτε να ελκύσουμε τον κώδικα προς τα κάτω και να το συγχωνεύσουμε τοπικά, ούμε με τη σύνταξη `git pull <url> <branch>` που είδαμε νωρίτερα ούμε προσθέτοντας το πιρούνι ως απομακρυσμένο και μαζεύοντας και συγχωνεύοντας.

Εάν η συγχώνευση είναι ασήμαντη, μπορούμε επίσης να πατήσουμε το κουμπί `` Συγχώνευση '' στην τοποθεσία GitHub.
Αυτό θα κάνει μια συγχώνευση `` μη γρήγορης προώθησης '', δημιουργώντας μια δέσμευση συγχώνευσης ακόμα και αν ήταν δυνατή μια συγχώνευση γρήγορης προώθησης.
Αυτό σημαίνει ότι δεν έχει σημασία τι, κάθε φορά που πατάτε το κουμπί συγχώνευσης, δημιουργείται μια δέσμευση συγχώνευσης.
Όπως μπορούμε να δούμε στο <<_merge_button>>, το GitHub σας δίνει όλες αυτές τις πληροφορίες εάν κάνουμε κλικ στο σύνδεσμο υπαινιγμών.

If the merge is trivial, you can also just hit the ``Merge'' button on the GitHub site.
This will do a ``non-fast-forward'' merge, creating a merge commit even if a fast-forward merge was possible.
This means that no matter what, every time you hit the merge button, a merge commit is created.
As you can see in <<_merge_button>>, GitHub gives you all of this information if you click the hint link.

[[_merge_button]]
.Merge button and instructions for merging a Pull Request manually.
image::images/maint-02-merge.png[Merge button]

Εάν αποφασίσουμε ότι δεν θέλουμε να το συγχωνεύσουμε, μπορούμε επίσης να κλείσουμε την Αίτηση Τράβηξης και το άτομο που το άνοιξε θα ειδοποιηθεί.

If you decide you don't want to merge it, you can also just close the Pull Request and the person who opened it will be notified.

[[_pr_refs]]
===== Pull Request Refs

If you're dealing with a *lot* of Pull Requests and don't want to add a bunch of remotes or do one time pulls every time, there is a neat trick that GitHub allows you to do.
This is a bit of an advanced trick and we'll go over the details of this a bit more in <<_refspec>>, but it can be pretty useful.

Εάν ασχολείστε με ένα *πολλά* από τα αιτήματα ελκυσμού και δεν θέλουμε να προσθέσουμε μια δέσμη απομακρυσμένων συσκευών ή να κάνουμε μία φορά τραβάει κάθε φορά, υπάρχει ένα καθαρό τέχνασμα που σας επιτρέπει το GitHub.
Αυτό είναι ένα κομμάτι ενός προηγμένου τέχνασμα και θα πάμε πέρα ​​από τις λεπτομέρειες αυτού του λίγο περισσότερο στο <<_refspec>>, αλλά μπορεί να είναι αρκετά χρήσιμο.

Το GitHub διαφημίζει όντως οι κλαδοι Pull Request για ένα αποθετήριο ως είδος ψευδοκλάδιων στο διακομιστή.
Από προεπιλογή δεν τα παίρνουμε όταν κλωνοποιούμε, αλλά είναι εκεί με σκεπασμένο τρόπο και μπορούμε να έχουμε πρόσβαση σε αυτά αρκετά εύκολα.

GitHub actually advertises the Pull Request branches for a repository as sort of pseudo-branches on the server.
By default you don't get them when you clone, but they are there in an obscured way and you can access them pretty easily.

To demonstrate this, we're going to use a low-level command (often referred to as a ``plumbing'' command, which we'll read about more in <<_plumbing_porcelain>>) called `ls-remote`.
This command is generally not used in day-to-day Git operations but it's useful to show us what references are present on the server.

Για να το δείξουμε αυτό, πρόκειται να χρησιμοποιήσουμε μια εντολή χαμηλού επιπέδου (που συχνά αναφέρεται ως εντολή `` υδραυλικών '', την οποία θα διαβάσουμε για περισσότερα στο <<_plumbing_porcelain>>) που ονομάζεται `ls-remote`.
Αυτή η εντολή γενικά δεν χρησιμοποιείται στις καθημερινές λειτουργίες Git, αλλά είναι χρήσιμο να μας δείξουμε ποιες αναφορές υπάρχουν στον διακομιστή.

Αν εκτελέσουμε αυτήν την εντολή ενάντια στον αποθετήριο `` blink '' που χρησιμοποιούσαμε νωρίτερα, θα έχουμε μια λίστα με όλους τους κλάδους και ετικέτες και άλλες αναφορές στο χώρο αποθήκευσης.

If we run this command against the ``blink'' repository we were using earlier, we will get a list of all the branches and tags and other references in the repository.

[source,console]
----
$ git ls-remote https://github.com/schacon/blink
10d539600d86723087810ec636870a504f4fee4d	HEAD
10d539600d86723087810ec636870a504f4fee4d	refs/heads/master
6a83107c62950be9453aac297bb0193fd743cd6e	refs/pull/1/head
afe83c2d1a70674c9505cc1d8b7d380d5e076ed3	refs/pull/1/merge
3c8d735ee16296c242be7a9742ebfbc2665adec1	refs/pull/2/head
15c9f4f80973a2758462ab2066b6ad9fe8dcf03d	refs/pull/2/merge
a5a7751a33b7e86c5e9bb07b26001bb17d775d1a	refs/pull/4/head
31a45fc257e8433c8d8804e3e848cf61c9d3166c	refs/pull/4/merge
----

Of course, if you're in your repository and you run `git ls-remote origin` or whatever remote you want to check, it will show you something similar to this.

Φυσικά, εάν βρίσκεστε στο αποθετήριο σας και εκτελούμε "git ls-απομακρυσμένη προέλευση" ή οποιοδήποτε απομακρυσμένο σημείο που θέλουμε να ελέγξουμε, θα σας δείξει κάτι παρόμοιο με αυτό.

Αν ο χώρος αποθήκευσης βρίσκεται στο GitHub και έχουμε οποιεσδήποτε Ανοίγεισες Αίτημα Ανάκτησης, θα λάβουμε αυτές τις αναφορές που έχουν προστεθεί με το `refs / pull /`.
Αυτά είναι βασικά κλάδοι, αλλά επειδή δεν βρίσκονται κάτω από `refs / heads /` δεν τα παίρνουμε κανονικά όταν κλωνοποιούμε ή φέρουμε από το διακομιστή - η διαδικασία της φόρτωσης τους αγνοεί κανονικά.

If the repository is on GitHub and you have any Pull Requests that have been opened, you'll get these references that are prefixed with `refs/pull/`.
These are basically branches, but since they're not under `refs/heads/` you don't get them normally when you clone or fetch from the server -- the process of fetching ignores them normally.

There are two references per Pull Request - the one that ends in `/head` points to exactly the same commit as the last commit in the Pull Request branch.
So if someone opens a Pull Request in our repository and their branch is named `bug-fix` and it points to commit `a5a775`, then in *our* repository we will not have a `bug-fix` branch (since that's in their fork), but we _will_ have `pull/<pr#>/head` that points to `a5a775`.
This means that we can pretty easily pull down every Pull Request branch in one go without having to add a bunch of remotes.

Υπάρχουν δύο αναφορές ανά Αίτημα Τραβίσματος - αυτό που τελειώνει σε σημεία `/ head 'στην ίδια ακριβώς δέσμευση με την τελευταία διεκπεραίωση στην κλάση Pull Request.
Έτσι, αν κάποιος ανοίξει ένα Pull Request στο αποθετήριο μας και το υποκατάσταμά του ονομάζεται `bug-fix` και επισημαίνει ότι πρέπει να διαπράξει` a5a775`, τότε στο repository * μας δεν θα έχουμε κλάδο `bug fix ' το πιρούνι τους), αλλά θα έχουμε `pull / <pr #> / head` που δείχνει στο` a5a775`.
Αυτό σημαίνει ότι μπορούμε πολύ εύκολα να ελκύσουμε κάθε κλάδο αιτήματος έλκυσης χωρίς να χρειαστεί να προσθέσουμε μια δέσμη τηλεχειριστηρίων.

Τώρα, μπορούμε να κάνουμε κάτι σαν να ελκύσουμε απευθείας την αναφορά.

Now, you could do something like fetching the reference directly.

[source,console]
----
$ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -> FETCH_HEAD
----

This tells Git, ``Connect to the `origin` remote, and download the ref named `refs/pull/958/head`.''
Git happily obeys, and downloads everything you need to construct that ref, and puts a pointer to the commit you want under `.git/FETCH_HEAD`.
You can follow that up with `git merge FETCH_HEAD` into a branch you want to test it in, but that merge commit message looks a bit weird.
Also, if you're reviewing a *lot* of pull requests, this gets tedious.

Αυτό λέει στον Git, `` Συνδεθούμε στο απομακρυσμένο `origin` και κατεβάστε το ref με όνομα` refs / pull / 958 / head`.
Ο Git υπακούει ευτυχώς και κατεβάζει όλα όσα χρειάζεστε για να κατασκευάσουμε αυτό το ref και βάζει έναν δείκτη στην δέσμευση που θέλουμε κάτω από το .git / FETCH_HEAD.
Μπορούμε να το ακολουθήσουμε με το "git merge FETCH_HEAD" σε έναν κλάδο στο οποίο θέλουμε να το δοκιμάσουμε, αλλά αυτό το μήνυμα συγχώνευσης συγχώνευσης φαίνεται λίγο περίεργο.
Επίσης, εάν εξετάζουμε ένα * πολλά * αιτήσεων έλξης, αυτό γίνεται κουραστικό.

Υπάρχει επίσης ένας τρόπος για να λάβουμε όλα τα αιτήματα έλξης και να τα κρατάτε ενημερωμένα κάθε φορά που συνδέεστε στο τηλεχειριστήριο.
Ανοίξτε το `.git / config` στον αγαπημένο σας επεξεργαστή και αναζητήστε το απομακρυσμένο` origin`.
Θα πρέπει να μοιάζει κάπως έτσι:

There's also a way to fetch _all_ of the pull requests, and keep them up to date whenever you connect to the remote.
Open up `.git/config` in your favorite editor, and look for the `origin` remote.
It should look a bit like this:

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2
    fetch = +refs/heads/*:refs/remotes/origin/*
----

Αυτή η γραμμή που αρχίζει με `fetch =` είναι ένα `` refspec. ''
Είναι ένας τρόπος χαρτογράφησης ονομάτων στο απομακρυσμένο με ονόματα στον τοπικό κατάλογο `.git`.
Αυτό το συγκεκριμένο λέει στο Git, "τα πράγματα στο τηλεχειριστήριο που βρίσκονται κάτω από τα" refs / heads "θα πρέπει να πάνε στο τοπικό μου αποθετήριο κάτω από" refs / remotes / origination "."
Μπορούμε να τροποποιήσουμε αυτήν την ενότητα για να προσθέσουμε ένα άλλο refspec:

That line that begins with `fetch =` is a ``refspec.''
It's a way of mapping names on the remote with names in your local `.git` directory.
This particular one tells Git, "the things on the remote that are under `refs/heads` should go in my local repository under `refs/remotes/origin`."
You can modify this section to add another refspec:

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
----

Αυτή η τελευταία γραμμή λέει στον Git ότι όλα τα refs που μοιάζουν με το refs / pull / 123 / head θα πρέπει να αποθηκεύονται τοπικά όπως το 'refs / remotes / orig / pr / 123`.
Τώρα, αν αποθηκεύσουμε αυτό το αρχείο και κάνουμε ένα `git fetch`:

That last line tells Git, ``All the refs that look like `refs/pull/123/head` should be stored locally like `refs/remotes/origin/pr/123`.''
Now, if you save that file, and do a `git fetch`:

[source,console]
----
$ git fetch
# …
 * [new ref]         refs/pull/1/head -> origin/pr/1
 * [new ref]         refs/pull/2/head -> origin/pr/2
 * [new ref]         refs/pull/4/head -> origin/pr/4
# …
----

Τώρα όλα τα απομακρυσμένα αιτήματα έλξης εκπροσωπούνται τοπικά με αναφορές που λειτουργούν σαν την παρακολούθηση κλάδων. είναι μόνο για ανάγνωση και ενημερώνονται όταν κάνουμε ένα fetch.
Αυτό το καθιστά εξαιρετικά εύκολο να δοκιμάσουμε τον κώδικα από μια αίτηση έλξης σε τοπικό επίπεδο:

Now all of the remote pull requests are represented locally with refs that act much like tracking branches; they're read-only, and they update when you do a fetch.
This makes it super easy to try the code from a pull request locally:

[source,console]
----
$ git checkout pr/2
Checking out files: 100% (3769/3769), done.
Branch pr/2 set up to track remote branch pr/2 from origin.
Switched to a new branch 'pr/2'
----

Οι αετός-ματιές μεταξύ σας θα σημειώσουν το «κεφάλι» στο τέλος του απομακρυσμένου τμήματος του refspec.
Υπάρχει επίσης ένας σύνδεσμος "refs / pull / # / merge" στην πλευρά του GitHub, που αντιπροσωπεύει τη δέσμευση που θα προέκυπτε αν πιέσουμε το κουμπί `` συγχώνευση '' στην τοποθεσία.
Αυτό μπορεί να σας επιτρέψει να δοκιμάσουμε τη συγχώνευση πριν χτυπήσουμε ακόμη και το κουμπί.

The eagle-eyed among you would note the `head` on the end of the remote portion of the refspec.
There's also a `refs/pull/#/merge` ref on the GitHub side, which represents the commit that would result if you push the ``merge'' button on the site.
This can allow you to test the merge before even hitting the button.


===== Pull Requests on Pull Requests

Όχι μόνο μπορούμε να ανοίξουμε τα "Τραβήξτε αιτήματα" που στοχεύουν τον κεντρικό ή τον κύριο κλάδο, μπορούμε πραγματικά να ανοίξουμε ένα Pull Request στοχεύοντας σε οποιοδήποτε κατάστημα στο δίκτυο.
Στην πραγματικότητα, μπορούμε ακόμη και να στοχεύσουμε μια άλλη αίτηση έλξης.

Not only can you open Pull Requests that target the main or `master` branch, you can actually open a Pull Request targeting any branch in the network.
In fact, you can even target another Pull Request.

If you see a Pull Request that is moving in the right direction and you have an idea for a change that depends on it or you're not sure is a good idea, or you just don't have push access to the target branch, you can open a Pull Request directly to it.

Εάν δούμε μια Αίτηση Τραβίσματος που κινείται προς τη σωστή κατεύθυνση και έχουμε μια ιδέα για μια αλλαγή που εξαρτάται από αυτήν ή δεν είστε βέβαιος ότι είναι καλή ιδέα ή απλά δεν έχουμε ώθηση στην πρόσβαση στον κλάδο στόχο, μπορούμε να ανοίξουμε ένα Pull Request απευθείας σε αυτό.

Όταν πηγαίνουμε για να ανοίξουμε μια Αίτηση Pull, υπάρχει ένα κουτάκι στο επάνω μέρος της σελίδας που καθορίζει σε ποιο κλάδο θέλουμε να ελκύσουμε και από το οποίο ζητάτε να ελκύσουμε.
Αν πατήσουμε το πλήκτρο `` Edit '' στα δεξιά του κουτιού μπορούμε να αλλάξουμε όχι μόνο τους κλάδους αλλά και το οποίο πιρούνι.

When you go to open a Pull Request, there is a box at the top of the page that specifies which branch you're requesting to pull to and which you're requesting to pull from.
If you hit the ``Edit'' button at the right of that box you can change not only the branches but also which fork.

[[_pr_targets]]
.Manually change the Pull Request target fork and branch.
image::images/maint-04-target.png[PR targets]

Εδώ μπορούμε να καθορίσουμε αρκετά εύκολα για να συγχωνεύσουμε το νέο σας κατάστημα σε άλλο Request Pull ή σε άλλο πηδάλιο του έργου.

Here you can fairly easily specify to merge your new branch into another Pull Request or another fork of the project.

==== Mentions and Notifications

GitHub also has a pretty nice notifications system built in that can come in handy when you have questions or need feedback from specific individuals or teams.

Το GitHub έχει επίσης ένα πολύ ωραίο σύστημα ειδοποιήσεων που έχει ενσωματωθεί, το οποίο μπορεί να είναι χρήσιμο όταν έχουμε ερωτήσεις ή χρειάζεστε ανατροφοδότηση από συγκεκριμένα άτομα ή ομάδες.

Σε οποιοδήποτε σχόλιο μπορούμε να αρχίσουμε να πληκτρολογούμε έναν χαρακτήρα `@` και θα αρχίσει να συμπληρώνεται αυτόματα με τα ονόματα και τα ονόματα χρηστών των ατόμων που συνεργάζονται ή συνεισφέρουν στο έργο.

In any comment you can start typing a `@` character and it will begin to autocomplete with the names and usernames of people who are collaborators or contributors in the project.

.Start typing @ to mention someone.
image::images/maint-05-mentions.png[Mentions]

Μπορούμε επίσης να αναφέρουμε έναν χρήστη που δεν βρίσκεται σε αυτό το αναπτυσσόμενο μενού, αλλά συχνά ο αυτόματος συμπυκνωτής μπορεί να το κάνει πιο γρήγορα.

You can also mention a user who is not in that dropdown, but often the autocompleter can make it faster.

Once you post a comment with a user mention, that user will be notified.
This means that this can be a really effective way of pulling people into conversations rather than making them poll.
Very often in  Pull Requests on GitHub people will pull in other people on their teams or in their company to review an Issue or Pull Request.

Αφού δημοσιεύσουμε ένα σχόλιο με μια αναφορά χρήστη, αυτός ο χρήστης θα ειδοποιηθεί.
Αυτό σημαίνει ότι αυτό μπορεί να είναι ένας πραγματικά αποτελεσματικός τρόπος να προσελκύσουμε τους ανθρώπους σε συνομιλίες και όχι να τους κάνουμε δημοσκόπηση.
Πολύ συχνά σε Pull Requests στο GitHub οι άνθρωποι θα προσελκύσουν άλλους ανθρώπους στις ομάδες τους ή στην επιχείρησή τους για να αναθεωρήσουν ένα ζήτημα ή ένα Pull Request.

Εάν κάποιος αναφερθεί σε μια ερώτηση ή ζήτημα έλξης, θα `` εγγραφεί '' σε αυτό και θα συνεχίσει να λαμβάνει ειδοποιήσεις οποιαδήποτε στιγμή κάποια δραστηριότητα συμβαίνει σε αυτό.
Θα είστε επίσης εγγεγραμμένοι σε κάτι αν το ανοίξουμε, εάν παρακολουθούμε το χώρο αποθήκευσης ή σχολιάζουμε κάτι.
Αν δεν θέλουμε πλέον να λαμβάνουμε ειδοποιήσεις, υπάρχει ένα κουμπί `` Διαγραφή '' στη σελίδα που μπορούμε να κάνουμε κλικ για να σταματήσουμε να λαμβάνουμε ενημερώσεις σχετικά με αυτό.

If someone gets mentioned on a Pull Request or Issue, they will be ``subscribed'' to it and will continue getting notifications any time some activity occurs on it.
You will also be subscribed to something if you opened it, if you're watching the repository or if you comment on something.
If you no longer wish to receive notifications, there is an ``Unsubscribe'' button on the page you can click to stop receiving updates on it.

.Unsubscribe from an Issue or Pull Request.
image::images/maint-06-unsubscribe.png[Unsubscribe]

===== The Notifications Page

When we mention ``notifications'' here with respect to GitHub, we mean a specific way that GitHub tries to get in touch with you when events happen and there are a few different ways you can configure them.
If you go to the ``Notification center'' tab from the settings page, you can see some of the options you have.

Όταν αναφέρουμε `` ειδοποιήσεις '' εδώ σε σχέση με το GitHub, εννοούμε έναν συγκεκριμένο τρόπο με τον οποίο η GitHub προσπαθεί να έρθει σε επαφή μαζί σας όταν συμβούν γεγονότα και υπάρχουν μερικοί διαφορετικοί τρόποι με τους οποίους μπορούμε να τις διαμορφώσουμε.
Αν μεταβούμε στην καρτέλα `` Κέντρο ειδοποιήσεων '' από τη σελίδα ρυθμίσεων, μπορούμε να δούμε μερικές από τις επιλογές που έχουμε.

.Notification center options.
image::images/maint-07-notifications.png[Notification center]

Οι δύο επιλογές είναι να λαμβάνουμε ειδοποιήσεις σχετικά με το `` Email '' και πάνω από `` Web '' και μπορούμε να επιλέξουμε ούμε όχι, ούτε και τα δύο για όταν συμμετέχουμε ενεργά σε πράγματα και για δραστηριότητα σε αποθήκες που παρακολουθούμε.

The two choices are to get notifications over ``Email'' and over ``Web'' and you can choose either, neither or both for when you actively participate in things and for activity on repositories you are watching.

====== Web Notifications

Web notifications only exist on GitHub and you can only check them on GitHub.
If you have this option selected in your preferences and a notification is triggered for you, you will see a small blue dot over your notifications icon at the top of your screen as seen in <<_not_center>>.

Οι ειδοποιήσεις ιστού υπάρχουν μόνο στο GitHub και μπορούμε να τις ελέγξουμε μόνο στο GitHub.
Εάν έχουμε επιλέξει αυτήν την επιλογή στις προτιμήσεις σας και ενεργοποιηθεί μια ειδοποίηση, θα δούμε μια μικρή μπλε κουκίδα πάνω από το εικονίδιο ειδοποιήσεων στο επάνω μέρος της οθόνης σας όπως φαίνεται στο << _not_center>>.

[[_not_center]]
.Notification center.
image::images/maint-08-notifications-page.png[Notification center]

If you click on that, you will see a list of all the items you have been notified about, grouped by project.
You can filter to the notifications of a specific project by clicking on its name in the left hand sidebar.
You can also acknowledge the notification by clicking the checkmark icon next to any notification, or acknowledge _all_ of the notifications in a project by clicking the checkmark at the top of the group.
There is also a mute button next to each checkmark that you can click to not receive any further notifications on that item.

Εάν κάνουμε κλικ σε αυτό, θα δούμε μια λίστα με όλα τα στοιχεία για τα οποία έχουμε ειδοποιηθεί, ομαδοποιημένα κατά έργο.
Μπορούμε να φιλτράρουμε τις ειδοποιήσεις ενός συγκεκριμένου έργου κάνοντας κλικ στο όνομά του στην αριστερή πλαϊνή γραμμή.
Μπορούμε επίσης να επιβεβαιώσουμε την ειδοποίηση κάνοντας κλικ στο εικονίδιο επιλογής δίπλα σε οποιαδήποτε ειδοποίηση ή αναγνωρίζοντας όλες τις ειδοποιήσεις σε ένα έργο κάνοντας κλικ στο σημάδι ελέγχου στο επάνω μέρος της ομάδας.
Υπάρχει επίσης ένα κουμπί σίγασης δίπλα σε κάθε σημάδι επιλογής στο οποίο μπορούμε να κάνουμε κλικ για να μην λάβουμε άλλες ειδοποιήσεις σχετικά με το συγκεκριμένο στοιχείο.

Όλα αυτά τα εργαλεία είναι πολύ χρήσιμα για το χειρισμό μεγάλου αριθμού ειδοποιήσεων.
Πολλοί χρήστες ενέργειας GitHub απενεργοποιούν απλώς όλες τις ειδοποιήσεις ηλεκτρονικού ταχυδρομείου και διαχειρίζονται όλες τις ειδοποιήσεις τους μέσω αυτής της οθόνης.

All of these tools are very useful for handling large numbers of notifications.
Many GitHub power users will simply turn off email notifications entirely and manage all of their notifications through this screen.

====== Email Notifications

Email notifications are the other way you can handle notifications through GitHub.
If you have this turned on you will get emails for each notification.
We saw examples of this in <<_email_notification>> and <<_email_pr>>.
The emails will also be threaded properly, which is nice if you're using a threading email client.

Οι ειδοποιήσεις μέσω ηλεκτρονικού ταχυδρομείου είναι ο άλλος τρόπος με τον οποίο μπορούμε να χειριστούμε τις ειδοποιήσεις μέσω του GitHub.
Εάν έχουμε ενεργοποιήσει αυτή τη λειτουργία, θα λάβουμε μηνύματα ηλεκτρονικού ταχυδρομείου για κάθε ειδοποίηση.
Είδαμε παραδείγματα αυτού του στοιχείου στο << _mail_notification>> και <<_email_pr>>.
Τα μηνύματα ηλεκτρονικού ταχυδρομείου θα είναι επίσης σωστά, πράγμα που είναι ωραίο αν χρησιμοποιούμε έναν πελάτη ηλεκτρονικού ταχυδρομείου σπειρώματος.

Υπάρχει επίσης ένα σωστό ποσό μεταδεδομένων ενσωματωμένο στις κεφαλίδες των μηνυμάτων ηλεκτρονικού ταχυδρομείου που σας στέλνει το GitHub, κάτι που μπορεί να είναι πραγματικά χρήσιμο για τη δημιουργία προσαρμοσμένων φίλτρων και κανόνων.

There is also a fair amount of metadata embedded in the headers of the emails that GitHub sends you, which can be really helpful for setting up custom filters and rules.

Για παράδειγμα, αν κοιτάξουμε τις πραγματικές κεφαλίδες ηλεκτρονικού ταχυδρομείου που αποστέλλονται στον Tony στο email που εμφανίζεται στο <<_email_pr>>, θα δούμε τα παρακάτω μεταξύ των πληροφοριών που εστάλησαν:

For instance, if we look at the actual email headers sent to Tony in the email shown in <<_email_pr>>, we will see the following among the information sent:

[source,mbox]
----
To: tonychacon/fade <fade@noreply.github.com>
Message-ID: <tonychacon/fade/pull/1@github.com>
Subject: [fade] Wait longer to see the dimming effect better (#1)
X-GitHub-Recipient: tonychacon
List-ID: tonychacon/fade <fade.tonychacon.github.com>
List-Archive: https://github.com/tonychacon/fade
List-Post: <mailto:reply+i-4XXX@reply.github.com>
List-Unsubscribe: <mailto:unsub+i-XXX@reply.github.com>,...
X-GitHub-Recipient-Address: tchacon@example.com
----

Υπάρχουν μερικά ενδιαφέροντα πράγματα εδώ.
Εάν θέλουμε να επισημάνουμε ή να επανατοποθετήσουμε τα μηνύματα ηλεκτρονικού ταχυδρομείου σε αυτό το συγκεκριμένο έργο ή ακόμα και την Απαίτηση Αίτησης, οι πληροφορίες στο "Message-ID" σας παρέχουν όλα τα δεδομένα στο <<user> / <project> / <type> μορφή.
Αν αυτό ήταν ένα ζήτημα, για παράδειγμα, το πεδίο `type 'θα ήταν` `issues' 'αντί για` `pull' '.

There are a couple of interesting things here.
If you want to highlight or re-route emails to this particular project or even Pull Request, the information in `Message-ID` gives you all the data in `<user>/<project>/<type>/<id>` format.
If this were an issue, for example, the `<type>` field would have been ``issues'' rather than ``pull''.

The `List-Post` and `List-Unsubscribe` fields mean that if you have a mail client that understands those, you can easily post to the list or ``Unsubscribe'' from the thread.
That would be essentially the same as clicking the ``mute'' button on the web version of the notification or ``Unsubscribe'' on the Issue or Pull Request page itself.

Τα πεδία `List-Post` και` List-Unsubscribe` σημαίνουν ότι αν έχουμε έναν πελάτη ηλεκτρονικού ταχυδρομείου που καταλαβαίνει αυτά, μπορούμε εύκολα να καταχωρήσουμε στη λίστα ή `` Unsubscribe '' από το νήμα.
Αυτό θα ήταν ουσιαστικά το ίδιο με το κλικ στο κουμπί `` mute '' στην έκδοση ιστού της ειδοποίησης ή `` Unsubscribe '' στη σελίδα Issue ή Pull Request.

Αξίζει επίσης να σημειωθεί ότι εάν έχουμε ενεργοποιήσει και τις δύο ειδοποιήσεις ηλεκτρονικού ταχυδρομείου και ιστού και διαβάσουμε την έκδοση ηλεκτρονικού ταχυδρομείου της ειδοποίησης, η έκδοση ιστού θα επισημανθεί ως αναγνωσμένη καθώς και εάν έχουμε τις εικόνες που επιτρέπονται στον πελάτη ηλεκτρονικού ταχυδρομείου σας.

It's also worth noting that if you have both email and web notifications enabled and you read the email version of the notification, the web version will be marked as read as well if you have images allowed in your mail client.

==== Ειδικά αρχεία

Υπάρχουν μερικά ειδικά αρχεία τα οποία θα παρατηρήσει το GitHub εάν είναι παρόντα στο αποθετήριό μας.

==== Αρχείο README

The first is the `README` file, which can be of nearly any format that GitHub recognizes as prose.
For example, it could be `README`, `README.md`, `README.asciidoc`, etc.
If GitHub sees a README file in your source, it will render it on the landing page of the project.

Το πρώτο είναι το αρχείο `README`, το οποίο μπορεί να είναι σχεδόν κάθε μορφής που αναγνωρίζει το GitHub ως πεζογραφία.
Για παράδειγμα, θα μπορούσε να είναι "README", "README.md", "README.asciidoc", κλπ.
Αν το GitHub βλέπει ένα αρχείο README στην πηγή σας, θα το καταστήσει στη σελίδα προορισμού του έργου.

Πολλές ομάδες χρησιμοποιούν αυτό το αρχείο για να κρατήσουν όλες τις σχετικές πληροφορίες έργου για κάποιον που μπορεί να είναι νέος στο αποθετήριο ή στο έργο.
Αυτό γενικά περιλαμβάνει πράγματα όπως:

Many teams use this file to hold all the relevant project information for someone who might be new to the repository or project.
This generally includes things like:

* What the project is for
* How to configure and install it
* An example of how to use it or get it running
* The license that the project is offered under
* How to contribute to it

* Για ποιο έργο απευθύνεται
* Τρόπος ρύθμισης παραμέτρων και εγκατάστασης
* Ένα παράδειγμα για το πώς να το χρησιμοποιήσουμε ή να το τρέξουμε
* Η άδεια χρήσης του έργου
* Πώς να συμβάλλουμε σε αυτό

Δεδομένου ότι το GitHub θα προβάλει αυτό το αρχείο, μπορούμε να ενσωματώσουμε εικόνες ή συνδέσμους σε αυτό για μεγαλύτερη ευκολία κατανόησης.

Since GitHub will render this file, you can embed images or links in it for added ease of understanding.

==== Αρχείο CONTRIBUTING

The other special file that GitHub recognizes is the `CONTRIBUTING` file.
If you have a file named `CONTRIBUTING` with any file extension, GitHub will show <<_contrib_file>> when anyone starts opening a Pull Request.

Το άλλο ειδικό αρχείο που αναγνωρίζει το GitHub είναι το αρχείο `CONTRIBUTING`.
Εάν έχουμε ένα αρχείο που ονομάζεται `CONTRIBUTING 'με οποιαδήποτε επέκταση αρχείου, το GitHub θα εμφανίσει το <<_contrib_file>> όταν κάποιος ξεκινά το άνοιγμα ενός Pull Request.

[[_contrib_file]]
.Opening a Pull Request when a CONTRIBUTING file exists.
image::images/maint-09-contrib.png[Contributing notice]

Η ιδέα εδώ είναι ότι μπορούμε να καθορίσουμε συγκεκριμένα πράγματα που θέλουμε ή δεν θέλουμε σε μια Αίτηση Pull που αποστέλλεται στο έργο σας.
Με αυτόν τον τρόπο, οι χρήστες μπορούν να διαβάσουν τις οδηγίες πριν ανοίξουν την Αίτηση Pull.

The idea here is that you can specify specific things you want or don't want in a Pull Request sent to your project.
This way people may actually read the guidelines before opening the Pull Request.

==== Διαχείριση έργου

Γενικά, δεν υπάρχουν πολλά διοικητικά πράγματα που μπορούμε να κάνουμε με ένα μόνο έργο, αλλά υπάρχουν μερικά στοιχεία που μπορεί να ενδιαφέρουν.

Generally there are not a lot of administrative things you can do with a single project, but there are a couple of items that might be of interest.

===== Αλλαγή του προεπιλεγμένου κλάδου

If you are using a branch other than ``master'' as your default branch that you want people to open Pull Requests on or see by default, you can change that in your repository's settings page under the ``Options'' tab.

Αν χρησιμοποιούμε κλάδο διαφορετικό από το master ως τον προεπιλεγμένο σας κλάδο που θέλουμε να ανοίξουν τα άτομα να ανοίξουν τα Pull Requests ή να τα δούμε από προεπιλογή, μπορούμε να το αλλάξουμε στη σελίδα ρυθμίσεων του αποθετηρίου κάτω από την καρτέλα `` Options ''.

[[_default_branch]]
.Αλλαγή του προεπιλεγμένου κλάδου για ένα έργο.
image :: images / maint-10-default-branch.png [Προκαθορισμένο κατάστημα]

[[_default_branch]]
.Change the default branch for a project.
image::images/maint-10-default-branch.png[Default branch]

Απλά αλλάξτε τον προεπιλεγμένο κλάδο στο αναπτυσσόμενο μενού και αυτό θα είναι το προεπιλεγμένο για όλες τις σημαντικές λειτουργίες από τότε μέχρι τώρα, συμπεριλαμβανομένου του κλάδου που ελέγχεται από προεπιλογή όταν κάποιος κλωνοποιεί το αποθετήριο.

Simply change the default branch in the dropdown and that will be the default for all major operations from then on, including which branch is checked out by default when someone clones the repository.

===== Μεταφορά έργου

Εάν θέλουμε να μεταφέρουμε ένα έργο σε άλλον χρήστη ή σε κάποιον οργανισμό στο GitHub, υπάρχει μια επιλογή `` Μεταβίβαση ιδιοκτησίας '' στο κάτω μέρος της ίδιας καρτέλας `` Options '' της σελίδας ρυθμίσεων αποθετηρίου που σας επιτρέπει να το κάνουμε αυτό .

If you would like to transfer a project to another user or an organization in GitHub, there is a ``Transfer ownership'' option at the bottom of the same ``Options'' tab of your repository settings page that allows you to do this.

[[_transfer_project]]
.Transfer a project to another GitHub user or Organization.
image::images/maint-11-transfer.png[Transfer]

This is helpful if you are abandoning a project and someone wants to take it over, or if your project is getting bigger and want to move it into an organization.

Αυτό είναι χρήσιμο εάν εγκαταλείπουμε ένα έργο και κάποιος θέλει να το αναλάβει ή εάν το σχέδιό σας μεγαλώνει και θέλουμε να το μετακινήσουμε σε έναν οργανισμό.

Όχι μόνο αυτό μετακινεί το χώρο αποθήκευσης μαζί με όλους τους παρατηρητές και τα αστέρια σε άλλο μέρος, αλλά επίσης θέτει μια ανακατεύθυνση από τη διεύθυνση URL σας στη νέα θέση.
Επίσης, θα ανακατευθύνει τους κλώνους και τα fetches από το Git, όχι μόνο τα αιτήματα ιστού.

Not only does this move the repository along with all its watchers and stars to another place, it also sets up a redirect from your URL to the new place.
It will also redirect clones and fetches from Git, not just web requests.
