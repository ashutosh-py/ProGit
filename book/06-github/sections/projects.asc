=== Projects

The basic unit of operation on GitHub is the project.
Every project is centered on a single Git repository, with several other tools surrounding and interacting with it.
Almost none of this is available outside a repository, so let's create one.

==== Creating a Repository

Start by clicking the "`New repository`" button on the right-hand side of the dashboard, or from the `+` button in the top toolbar next to your username as seen in <<_new_repo_dropdown>>.

.The "`Your repositories`" area.
image::images/newrepo.png[The "`Your repositories`" area.]

[[_new_repo_dropdown]]
.The "`New repository`" dropdown.
image::images/new-repo.png[The "`new repository`" dropdown.]

This takes you to the "`new repository`" form:

.The "`new repository`" form.
image::images/newrepoform.png[The "`new repository`" form.]

All you really have to do here is provide a project name; the rest of the fields are completely optional.
For now, just click the "`Create Repository`" button, and boom – you have a new repository on GitHub, named `<user>/<project_name>`.

Since you have no code there yet, GitHub will show you instructions for how create a brand-new Git repository, or connect an existing Git project.
We won't belabor this here; if you need a refresher, check out <<_git_basics_chapter>>.

Now that your project is hosted on GitHub, you can give the URL to anyone you want to share your project with.
Every project on GitHub is accessible over HTTP as `https://github.com/<user>/<project_name>`, and over SSH as `git@github.com:<user>/<project_name>`.
Git can fetch from and push to both of these URLs, but they are access-controlled based on the credentials of the user connecting to them.

[NOTE]
====
It is often preferable to share the HTTP based URL for a public project, since the user does not have to have a GitHub account to access it for cloning. Users will have to have an account and an uploaded SSH key to access your project if you give them the SSH URL. The HTTP one is also exactly the same URL they would paste into a browser to view the project there.
====

==== Adding Collaborators

Let’s add the rest of the team.
If Ben, Jeff, and Louise all sign up for accounts on GitHub, and you want to give them push access to your repository, you can add them to your project as collaborators.
Doing so will give them "`push`" access, which means they have both read and write access to the project and Git repository.

Click the "`Settings`" link in the right-hand sidebar.

.The repository settings link.
image::images/reposettingslink.png[The repository settings link.]

Then select "`Collaborators`" from the menu on the left-hand side.
Then, just type a username into the box, and click "`Add collaborator.`"
You can repeat this as many times as you like to grant access to everyone you like.
If you need to revoke access, just click the "`X`" on the right-hand side of their row.

.Repository collaborators.
image::images/collaborators.png[The repository collaborators box.]


[NOTE]
====
This feature is designed for collaboration with a few people.
Later on in <<_github_orgs>>, we'll cover Organizations and Teams (which are much better for controlling access to larger numbers of people you know) and in <<_github_pull_requests>> we'll talk about Pull Requests (which are designed for collaborating with complete strangers).
====

==== Your Project

Once your project has some code in it, it will look something like this:

.A project home page.
image::images/hubot.png[A project home page.]

When people visit your project, they see this page.
Along the top, there's a view of the commits, branches, releases, and contributors in this project, each of which takes you to more detail on these topics.
Along the side are the main activities you'll be using for your project:

* "`Code`" shows the latest version of the files in the repository, as well as a rendered view of the README file.
* "`Issues`" is where you go for reported problems or suggestions.
* "`Pull Requests`" are potential contributions, or work in progress.
* The "`Wiki`" is often used for contributor documentation.
* "`Pulse`" shows what's been happening in this project lately.
* "`Graphs`" has several analytical views of repository activity.
* "`Network`" shows a visual graph of this project and all its forks.

Don't worry if some of these don't make sense just yet.
We'll be covering them in the upcoming sections.

==== Forking Projects

(((forking)))
If you want to contribute to an existing project to which you don’t have push access, you can "`fork`" the project.
What this means is that GitHub will make a copy of the project that is entirely yours; it lives in your user's namespace, and you can push to it.

[NOTE]
====
Historically, the term "`fork`" has been somewhat negative in context, meaning that someone took an open source project in a different direction, sometimes creating a competing project and splitting the contributors.
In GitHub, a "`fork`" is simply the same project in your own namespace, allowing you to make changes to a project publicly as a way to contribute in a more open manner.
====

This way, projects don’t have to worry about adding users as collaborators to give them push access.
People can fork a project, push to it, and contribute their changes back to the original repository by creating what's called a Pull Request, which we'll cover next.
This opens up a discussion thread with code review, and the owner and the contributor can then communicate about the change until the owner is happy with it, at which point the owner can merge it in.

To fork a project, visit the project page (in this case, `github/hubot`) and click the "`Fork`" button at the top-right of the page.

.The "`Fork`" button.
image::images/forkbutton.png[The "`Fork`" button.]

After a few seconds, you'll be taken to your new project page, with your own writeable copy of the code.
