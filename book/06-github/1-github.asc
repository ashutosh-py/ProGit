== GitHub

(((GitHub)))
GitHub is the single largest host for Git repositories, and is the central point of collaboration for millions of developers and projects.
A large percentage of all Git repositories are hosted on GitHub, and many open-source projects use it for Git hosting, issue tracking, code review, and other things.
So while it's not a direct part of the Git open source project, there's a good chance that you'll want to interact with GitHub at some point while using Git.

This chapter is about using GitHub effectively.
We'll cover signing up for and managing an account, creating and using Git repositories, common workflows, interacting with projects, lots of little tips to make your life easier, and GitHub's programmatic interface.

If you are not interested in using GitHub to host your own projects or to collaborate with other projects that are hosted on GitHub, you can safely skip to the <<_git_tools, next chapter>>.

=== Setting Up a User Account

(((GitHub, user accounts)))
The first thing you need to do is set up a free user account.
Simply visit https://github.com[], choose a user name that isn't already taken, provide an email address and a password, and click the big green ``Sign up for GitHub'' button.

.The GitHub sign-up form.
image::images/signup.png[The GitHub sign-up form.]

The next thing you'll see is the pricing page for upgraded plans, but it's safe to ignore this for now.
GitHub will send you an email to verify the address you provided.
Go ahead and do this, it's pretty important (as we'll see later).

[NOTE]
====
GitHub provides all of its functionality with free accounts, with the limitation that all of your projects are fully public (everyone has read access).
GitHub's paid plans include a set number of private projects, but we won't be covering those in this book.
====

Clicking the Octocat logo at the top-left of the screen will take you to your dashboard page.
You're now ready to use GitHub.

==== SSH Access

(((SSH keys, with GitHub)))
As of right now, you're fully able to connect with Git repositories using the `https://` protocol, authenticating with the username and password you just set up.
If you'd like to use SSH remotes, you'll need to configure a public key.
(If you don't already have one, see <<_generate_ssh_key>>.)
Open up your account settings using the link at the top-right of the window:

.The ``Account settings'' link.
image::images/accountsettings.png[The ``Account settings'' link.]

Then select the ``SSH keys'' section along the left-hand side.

.The ``SSH keys'' link.
image::images/sshkeys.png[The ``SSH keys'' link.]

From there, click the ``Add an SSH key'' button, give your key a name, paste the contents of your `~/.ssh/id_rsa.pub` (or whatever you named it) public-key file into the text area, and click ``Add key''.

[NOTE]
====
Be sure to name your SSH key something you can remember. You can name each of your keys (eg, "My Laptop" or "Work Account") so that if you need to revoke a key later, you can easily tell which one you're looking for.
====

=== Projects

The basic unit of operation on GitHub is the project.
Every project is centered on a single Git repository, with several other tools surrounding and interacting with it.
Almost none of this is available outside a repository, so let's create one.

==== Creating a Repository

Start by clicking the ``New repository'' button on the right-hand side of the dashboard, or from the `+` button in the top toolbar next to your username as seen in <<_new_repo_dropdown>>.

.The ``Your repositories'' area.
image::images/newrepo.png[The ``Your repositories'' area.]

[[_new_repo_dropdown]]
.The ``New repository'' dropdown.
image::images/new-repo.png[The ``new repository'' dropdown.]

This takes you to the ``new repository'' form:

.The ``new repository'' form.
image::images/newrepoform.png[The ``new repository'' form.]

All you really have to do here is provide a project name; the rest of the fields are completely optional.
For now, just click the ``Create Repository'' button, and boom – you have a new repository on GitHub, named `<user>/<project_name>`.

Since you have no code there yet, GitHub will show you instructions for how create a brand-new Git repository, or connect an existing Git project.
We won't belabor this here; if you need a refresher, check out <<_git_basics_chapter>>.

Now that your project is hosted on GitHub, you can give the URL to anyone you want to share your project with.
Every project on GitHub is accessible over HTTP as `https://github.com/<user>/<project_name>`, and over SSH as `git@github.com:<user>/<project_name>`.
Git can fetch from and push to both of these URLs, but they are access-controlled based on the credentials of the user connecting to them.

[NOTE]
====
It is often preferable to share the HTTP based URL for a public project, since the user does not have to have a GitHub account to access it for cloning. Users will have to have an account and an uploaded SSH key to access your project if you give them the SSH URL. The HTTP one is also exactly the same URL they would paste into a browser to view the project there.
====

==== Adding Collaborators

Let’s add the rest of the team.
If John, Josie, and Jessica all sign up for accounts on GitHub, and you want to give them push access to your repository, you can add them to your project as collaborators.
Doing so will give them ``push'' access, which means they have both read and write access to the project and Git repository.

Click the ``Settings'' link in the right-hand sidebar.

.The repository settings link.
image::images/reposettingslink.png[The repository settings link.]

Then select ``Collaborators'' from the menu on the left-hand side.
Then, just type a username into the box, and click ``Add collaborator.''
You can repeat this as many times as you like to grant access to everyone you like.
If you need to revoke access, just click the ``X'' on the right-hand side of their row.

.Repository collaborators.
image::images/collaborators.png[The repository collaborators box.]


[NOTE]
====
This feature is designed for collaboration with a few people.
Later on in <<_github_orgs>>, we'll cover Organizations and Teams (which are much better for controlling access to larger numbers of people you know) and in <<_github_pull_requests>> we'll talk about Pull Requests (which are designed for collaborating with complete strangers).
====

==== Your Project

Once your project has some code in it, it will look something like this:

.A project home page.
image::images/hubot.png[A project home page.]

When people visit your project, they see this page.
Along the top, there's a view of the commits, branches, releases, and contributors in this project, each of which takes you to more detail on these topics.
Along the side are the main activities you'll be using for your project:

* ``Code'' shows the latest version of the files in the repository, as well as a rendered view of the README file.
* ``Issues'' is where you go for reported problems or suggestions.
* ``Pull Requests'' are potential contributions, or work in progress.
* The ``Wiki'' is often used for contributor documentation.
* ``Pulse'' shows what's been happening in this project lately.
* ``Graphs'' has several analytical views of repository activity.
* ``Network'' shows a visual graph of this project and all its forks.

Don't worry if some of these don't make sense just yet.
We'll be covering them in the upcoming sections.

==== Forking Projects

(((forking)))
If you want to contribute to an existing project to which you don’t have push access, you can ``fork'' the project.
What this means is that GitHub will make a copy of the project that is entirely yours; it lives in your user's namespace, and you can push to it.

[NOTE]
====
Historically, the term ``fork'' has been somewhat negative in context, meaning that someone took an open source project in a different direction, sometimes creating a competing project and splitting the contributors.
In GitHub, a ``fork'' is simply the same project in your own namespace, allowing you to make changes to a project publicly as a way to contribute in a more open manner.
====

This way, projects don’t have to worry about adding users as collaborators to give them push access.
People can fork a project, push to it, and contribute their changes back to the original repository by creating what's called a Pull Request, which we'll cover next.
This opens up a discussion thread with code review, and the owner and the contributor can then communicate about the change until the owner is happy with it, at which point the owner can merge it in.

To fork a project, visit the project page (in this case, `github/hubot`) and click the ``Fork'' button at the top-right of the page.

.The ``Fork'' button.
image::images/forkbutton.png[The ``Fork'' button.]

After a few seconds, you'll be taken to your new project page, with your own writeable copy of the code.

[[_github_flow]]
=== The GitHub Flow

(((GitHub, Flow)))
GitHub is designed around a particular collaboration workflow, centered on Pull Requests.
This flow works whether you're collaborating with a tightly-knit team in a single shared repository, or a globally-distributed company or network of strangers contributing to an project through dozens of forks.
It is centered on the <<_topic_branch>> workflow covered  in <<_git_branching>>.

Here's how it generally works:

1. Create a topic branch from `master`.
2. Make some commits to improve the project.
3. Open a Pull Request on GitHub.
4. Discuss and continue committing.
5. The project owner merges or closes the Pull Request.

This is basically the Integration Manager workflow covered in <<_integration_manager>>, but instead of using email to communicate and review changes, teams use GitHub's web based tools.

Let's walk through an example of proposing a change to an open source project hosted on GitHub using this flow.

==== Example Contribution Cycle

Tony is looking for code to run on his Arduino programmable microcontroller and has found a great program file on GitHub at https://github.com/schacon/blink[].

.The project we want to contribute to.
image::images/blink-start.png[The project we want to contribute to.]

The only problem is that the blinking rate is too fast, we think it's much nicer to wait 3 seconds instead of 1 in between each state change. So let's improve the program and submit it back to the project as a proposed change.

First, we click the 'Fork' button as mentioned earlier to get our own copy of the project. Our user name here is ``tonychacon'' so our copy of this project is at `https://github.com/tonychacon/blink` and that's where we can edit it. We will clone it locally, create a topic branch, make the code change and finally push that change back up to GitHub.

[source,shell]
----
$ git clone https://github.com/tonychacon/blink <1>
Cloning into 'blink'...

$ cd blink
$ git checkout -b slower-blink <2>
Switched to a new branch 'slower-blink'

$ sed -i '' 's/1000/3000/' blink.ino <3>

$ git diff --word-diff <4>
diff --git a/blink.ino b/blink.ino
index 15b9911..a6cc5a5 100644
--- a/blink.ino
+++ b/blink.ino
@@ -18,7 +18,7 @@ void setup() {
// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  [-delay(1000);-]{+delay(3000);+}               // wait for a second
}

$ git commit -a -m 'three seconds is better' <5>
[master 5ca509d] three seconds is better
 1 file changed, 2 insertions(+), 2 deletions(-)

$ git push <6>
Username for 'https://github.com': tonychacon
Password for 'https://tonychacon@github.com':
Counting objects: 5, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 340 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
To https://github.com/tonychacon/blink
 * [new branch]      slower-blink -> slower-blink
----

<1> Clone our fork of the project locally
<2> Create a descriptive topic branch
<3> Make our change to the code
<4> Check that the change is good
<5> Commit our change to the topic branch
<6> Push our new topic branch back up to our GitHub fork

Now if we go back to our fork on GitHub, we can see that they noticed that we pushed a new topic branch up and present us with a big green button to check out our changes and open a Pull Request to the original project.

.Pull Request button
image::images/blink-pr.png[Pull Request button]

(((GitHub, pull requests)))
If we click that green button, we'll see a screen that allows us to create a title and description for the change we would like to request so the project owner has a good reason to consider it. It is generally a good idea to spend some effort making this description as useful as possible so the author knows why this is being suggested and why it would be a valuable change for them to accept.

We also see a list of the commits in our topic branch that are ``ahead'' of the `master` branch (in this case, just the one) and a unified diff of all the changes that will be made should this branch get merged by the project owner.

.Pull Request creation page
image::images/blink-pull-request-open.png[Pull Request creation]

When you hit the 'Create pull request' button on this screen, the owner of the project you forked will get a notification that someone is suggesting a change and will link to a page that has all of this information on it.

[NOTE]
====
Though Pull Requests are used commonly for public projects like this when the contributor has a complete change ready to be made, it's also often used in internal projects at the beginning of the development cycle.  Since you can keep pushing to the topic branch even *after* the Pull Request is opened, it's often opened early and used as a way to iterate on work as a team within a context, rather than opened at the very end of the process.
====

At this point, the project owner can look at the suggested change and merge it, reject it or comment on it. Let's say that he likes the idea, but would prefer a slightly longer time for the light to be off than on.

Where this conversation may take place over email in the workflows presented in the previous chapter, on GitHub this happens online. The project owner can review the unified diff and leave a comment by clicking on any of the lines.

.Pull Request line comment
image::images/blink-3-seconds.png[PR line comment]

They can also leave a general comment on the Pull Request. In <<_pr_discussion>> we can see an example of the project owner both commenting on a line of code and then leaving a general comment in the discussion section. You can see that the code comments are brought into the conversation as well.

[[_pr_discussion]]
.Pull Request discusson page
image::images/blink-comment.png[PR discussion page]

Now the contributor can see what they need to do in order to get their change accepted. Luckily this is also a very simple thing to do. Where over email you may have to re-roll your series and resubmit it to the mailing list, with GitHub you simply commit to the topic branch again and push.

If the contributor does that then the project owner will get notified again and when they visit the page they will see that it's been addressed. In fact, since a line of code changed that had a comment on it, GitHub notices that and collapses the outdated diff.

.Pull Request final
image::images/blink-final.png[PR final]

The other thing you'll notice is that GitHub checks to see if the Pull Request merges cleanly and provides a button to do the merge for you on the server. This button only shows up if you have write access to the repository and if you click it GitHub will perform a ``non-fast-forward'' merge, meaning that even if the merge *could* be a fast-forward, it will still create a merge commit.

If you would prefer, you can simply pull the branch down and merge it locally. If you merge this branch into the `master` branch and push it to GitHub, the Pull Request will automatically be closed.

This is the basic workflow that most GitHub projects use. Topic branches are created, Pull Requests are opened on them, a discussion ensues, possibly more work is done on the branch and eventually the request is either closed or merged.

[NOTE]
.Not Only Forks
====
It's important to note that you can also open a Pull Request between two branches in the same repository. If you're working on a feature with someone and you both have write access to the project, you can push a topic branch to the repository and open a Pull Request on it to the `master` branch of that same project to initiate the code review and discussion process. No forking neccesary.
====


=== Discussions

(((GitHub, discussions)))
Pull Requests and Issues both fall under the heading of ``discussions.''
These discussions have some interesting features that make them especially useful when working on software.
Let's take a look at when you should use each one, and how best to use them.

[[_github_pull_requests]]
==== Pull Requests and Issues

Pull Requests and Issues seem like completely different things, but in reality they're the same.
A Pull Request is actually just an Issue with a Git branch attached.
Apart from that, they are identical; both have a title, description, and comments; both can belong to a Milestone; both trigger notifications; and so on.
They're used for very different things, however.

An Issue is used to report a problem, or post a reminder for work to be done later, or just to ask a question.
Pull Requests, on the other hand, are used to propose a change.
These lines aren't cut into stone, however; some of the most effective bug reports are Pull Requests that include a test that isolates the problem.

==== Markdown

(((Markdown)))
One of the features that all discussions share is Markdown.
Markdown is a way of decorating plain text that adds emphasis and structure.
It's designed to be readable without any extra processing, but also to be translated into richly formatted HTML.

An example might help.
Markdown looks like this:

[source,markdown]
----
*Italics* and **bold text** are possible. So are [links][github].

[github]: http://github.com/
----

That block of text renders in a GitHub description or comment like this:

////////////////////////////////////////////////////////////////
Yeah, I'm cheating. Sue me.
////////////////////////////////////////////////////////////////
====
_Italics_ and *bold text* are possible. So are http://github.com/[links].
====

In addition to the basics, GitHub includes Markdown features that are tailored to the needs of developers.
A good example of this is fenced code blocks, which look like this:

[source,markdown]
----
```ruby
puts "Hello, Markdown!"
```
----

The text between the triple-backquote markers (+```+) will be treated as code, and ignored by Markdown.
GitHub will try to detect what language the code snippet is in and provide syntax highlighting; you can give it a hint as to the language with a name just after the opening block (+```ruby+ above).

(((emoji)))
Another sometimes-useful, sometimes silly feature is Emoji integration.
If a picture is worth a thousand words, an Emoji can sometimes be worth five or ten.
GitHub translates the text +:sheep::dash:+ into a pictorial representation that looks like this:

.+:sheep::dash:+ rendered.
image::images/emoji.png[+:sheep::dash:+ rendered.]

GitHub-flavored Markdown can do even more than this, including tables, checklists, and autolinks.
Take a look at https://help.github.com/articles/github-flavored-markdown[] for a complete description.

==== Notifications

(((GitHub, notifications)))
In order to contribute to or manage a project, you need to know what's going on.
GitHub keeps you informed through a mechanism called notifications.
You'll receive notifications for event streams in several kinds of situations.
If you're ``watching'' a repository, you'll get notified of new issues and pull requests; comments on issues, pull requests, and commits; and newly published releases.
If you're not watching a repository, you'll only be subscribed to a discussion if you're the target of an `@mention`, if an issue is assigned to you, if you've commented on a thread, or if a comment is added to something you made (a commit, or discussion).

An `@mention` is a handy way to get someone's attention.
If you include `@john` in a comment, the user named `john` is notified of your comment, and automatically subscribed to the discussion thread that comment is on.
This is a great way of managing your notification volume; large teams can generate a lot of them, so you can control when you participate.

==== Email

Notifications arrive through two channels: the notifications view at https://github.com/notifications[], and via email.
This is controlled by the settings at https://github.com/settings/notifications[].

.Notification settings.
image::images/notifications.png[Notification settings.]

The email notifications have a couple of unique features.
Firstly, you can simply reply to an email, and your comment will show up in the discussion thread, almost as though you went to the website and typed it in.
The main difference is that email replies won't be Markdown-formatted.

The emails are also designed to dovetail with Gmail's ``mute'' feature:

* If you're subscribed to a discussion that you're not actively participating in, and that you're not interested in, you can mute the thread in Gmail.
* If you are then summoned with an `@mention` in the thread, the email notification will have you in the `cc` field, which bypasses the mute filter and shows you the email thread again.

==== Autolinked Discussions

Just one more thing before we leave discussions behind.
GitHub's Markdown parser can also link to other discussions.
Writing text like `this is just like #49` will change ``#49'' into a link to the issue or pull request whose number is 49.
A back-link will also be inserted into the discussion thread on the target discussion (though this doesn't trigger a notification).

This is a great way of networking discussions together, but it has another benefit.
If you write something like `fixes #7` or `closes #739` in a pull request description or commit message, the target issue will be closed whenever the PR is merged, or the commit becomes reachable from the `master` branch.
This is really great for fixing bugs or managing user stories.

Next, let's talk about how to match up repositories and people.

[[_github_orgs]]
=== Organizations

(((GitHub, organizations)))
In addition to single-user accounts, GitHub has what are called Organizations.
Organizational accounts have a namespace where projects exist, but most other things are different.
These accounts represent a group of people with shared ownership of projects, and they provide tools to manage subgroups of those people.

An organization is pretty easy to create; just click on the ``+'' icon at the top-right of any GitHub page, and select ``New organization'' from the menu.

.The ``New organization'' menu item.
image::images/neworg.png[The ``New organization'' menu item.]

Follow the steps (a credit card is required, even for the free plan), and you'll soon be the owner of a brand-new organization.
As an owner, when you fork a repository, you'll have the choice of forking it to your organization's namespace, and you automatically ``watch'' any new repository created under that organization.

==== Teams

Organizations are associated with inidividual people by way of teams, which are simply a set of individual user accounts.
The power of teams comes with how they tie into other GitHub features.

Organizations don't grant access to their repositories to _users_, they grant it to _teams_.
For example, say your company has three repositories: `frontend`, `backend`, and `deployscripts`.
You'd want your HTML/CSS/Javascript developers to have access to `frontend` and maybe `backend`, and your ops people to have access to `backend` and `deployscripts`.
Teams make this easy, without having to tweak the settings for every single user.

But that's not all teams are good for.
Team `@mentions` (such as `@acmecorp/frontend`) work much the same as they do with individual users, except that *all* members of the team are then subscribed to the thread.
This is useful if you want the attention from someone on a team, but you don't know exactly who to ask.

A user can belong to any number of teams, so don't limit yourself to only access-control teams.
Special-interest teams like `ux`, `css`, or `refactoring` are useful for certain kinds of questions, and others like `legal` and `colorblind` for an entirely different kind.


=== Tips and Tricks

Now that you know the basics, let's cover some smaller topics that will make your time with GitHub easier and more enjoyable.

==== Importing

(((GitHub, importing)))
If you're currently using another version-control system and you want to move your project to GitHub, start by converting your project's history to Git.
See <<_migrating>> for details on this, and come back to this section when you're done.

So you have a Git repository that you'd like to host on GitHub.
First, create the destination project on GitHub, but don't add a readme, license, or `.gitignore` file.
It's important that the destination be an empty repository.
Next, do this in a shell:

[source,shell]
----
$ git clone --bare <oldrepourl> github_import.git
$ cd github_import.git
$ git push --mirror https://github.com/<namespace>/<project>
----

The first command creates a bare clone of the old repository, partly to validate the data that you expect to be sending, and partly to ensure that a working directory doesn't interfere.
The third command pushes *all* of the refs in the repository to their new home.
This transfers all of the branches, tags, and other references to the project on GitHub.

==== Working with Subversion

(((GitHub, Subversion and)))(((Subversion)))
GitHub has a Subversion bridge that lets you work on GitHub projects using a Subversion client.
To get started, do this:

[source,shell]
----
$ svn checkout --depth empty https://github.com/user/project
$ cd project
$ svn up --depth empty branches
$ svn up trunk
----

This creates the `branches` directory (where you can checkout or create branches) and checks out the remote HEAD to the `trunk` directory.
From here, you can do almost anything you'd normally do with Subversion: create new branches, check changes in, change ignore settings, and so on.

The thing to remember is that the repository really is Git underneath.
Try this:

[source,shell]
----
$ svn propget git-commit --revprop -r 123
----

This gets the Git SHA-1 hash for the Git commit that corresponds to Subversion commit 123.

==== `gh`

(((gh)))
`gh` is a tool that teaches command-line git about GitHub.
If you work frequently with GitHub-hosted projects, `gh` can save you a lot of typing and browsing and clicking.
Here are some of the tricks it knows:

* *Project Creation* – `gh create foo` will create a new project named `foo` in your user's namespace, and add it as a remote.
* *Easy Cloning* – `gh clone github/hubot` translates to `git clone git://github.com/github/hubot`.
* *Pull Requests* – `gh pull-request` creates a new PR from the current branch to `master`, opening up your default editor for the title and description. It can even attach a branch to an existing issue with the `-i` flag, converting that issue into a pull request.
* *Situational Awareness* – Say your username is `john`, and your current directory is `project` (which is a Git repository).
  `gh remote add origin` translates to `git remote add -f origin git://github.com/john/project`.
* *Project Networks* – if you're currently working on `john/project`, doing `gh fetch jane` will add `git://github.com/jane/project` as a remote named ``jane'' and fetch from it.
* *Browsing* – `gh browse` opens the current branch on the GitHub website.
* *Other APIs* – GitHub allows continuous-integration systems to set a pass-or-fail status on a branch.
  You can fetch this value for the current branch with `gh ci-status`.
* …and many more.

Installing it is fairly easy; just download a binary from https://github.com/jingweno/gh/releases[], and put it somewhere in your PATH.
Probably the best way to integrate it is to alias `git` to `gh` in your shell; `gh` acts like an augmentation layer over native Git commands.
Put a line like this somewhere in your shell initialization file:

[source,shell]
----
eval "$(gh alias -s)"
----

From now on, you can use `gh` commands as though they were Git commands.

==== Pull-Request Refs

GitHub provides a way for you to fetch the work submitted on a pull request directly to your local repository.
To fetch a specific pull request, do this:

[source,shell]
----
$ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -> FETCH_HEAD
----

This tells Git, ``Connect to the `origin` remote, and download the ref named `refs/pull/958/head`.''
Git happily obeys, and downloads everything you need to construct that ref, and puts a pointer to the commit you want under `.git/FETCH_HEAD`.
You can follow all that up with `git checkout FETCH_HEAD`, but this leaves your HEAD in a detached state.
Also, if you're reviewing a *lot* of pull requests, this gets tedious.

There's also a way to fetch _all_ of the pull requests, and keep them up to date whenever you connect to the remote.
Open up `.git/config` in your favorite editor, and look for the `origin` remote.
It should look a bit like this:

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
----

That line that begins with `fetch =` is a ``refspec.''
It's a way of mapping names on the remote with names in your local `.git` directory.
This particular one tells Git, "the things on the remote that are under `refs/heads` should go in my local repository under `refs/remotes/origin`."
If you modify this section to add another refspec:

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
----

[NOTE]
====
This is a bit of an advanced trick.
If you're confused, flip to <<_refspec>> for more details.
====

That last line tells Git, ``All the refs that look like `refs/pull/123/head` should be stored locally like `refs/pull/origin/123`.''
Save that file, and do a `git fetch`:

[source,shell]
----
$ git fetch
# …
 * [new ref]         refs/pull/958/head -> origin/pr/958
 * [new ref]         refs/pull/959/head -> origin/pr/959
 * [new ref]         refs/pull/96/head -> origin/pr/96
 * [new ref]         refs/pull/961/head -> origin/pr/961
# …
----

Now all of the remote pull requests are represented locally with refs that act much like tracking branches; they're read-only, and they update when you do a fetch.
This makes it super easy to try the code from a pull request locally:

[source,shell]
----
$ git checkout pr/958
Checking out files: 100% (3769/3769), done.
Branch pr/958 set up to track remote branch pr/958 from origin.
Switched to a new branch 'pr/958'
----

The eagle-eyed among you would note the `head` on the end of the remote portion of the refspec.
There's also a `refs/pull/#/merge` ref on the GitHub side, which represents the commit that would result if the pull request had been merged.


==== Keyboard Shortcuts

GitHub has many features and screens, but some are more commonly-used than others.
These have been augmented with keyboard shortcuts.
The list of them is always expanding, but here's a cheat-sheet of the most valuable:

[cols="2,4",options="header"]
|==========
| Key  | Notes
| `?`  | Displays the keyboard-shortcuts help.
| `/`  | Sets the focus to the search/command bar.
| `gn` | Goes to the Notifications view.
| `gi` | From a repository, goes to the Issues view.
| `gp` | From a repository, goes to the Pull Requests view.
| `⌘+enter` | Submit the comment, issue, or pull request you're currently editing.
| `⌘+shift+p` | Toggle the rendered-Markdown preview.
| `t`  | From the Code view, enters a fuzzy-file-finder mode.
| `r`  | From within an Issue or Pull Request, focuses on the comment-authoring field, and adds the highlighted text as a quotation.
| `y`  | Go to the ``canonical'' url for this view (see below).
|==========

(((GitHub, canonical URLs)))
What's a canonical URL, you ask?
Many GitHub URLs for file contents look like this:

    https://github.com/user/repo/blob/master/directory/file

This URL isn't stable, because the contents you'll find there will change when the `master` branch is updated.
A canonical URL looks more like this:

    https://github.com/user/repo/blob/<SHA>/directory/file

Note the SHA-1 hash in the URL – that URL points to a specific version of the file.
It's a lot less readable, but the contents will _always_ be the same.
This is useful when discussing a bug, because presumably the files and lines involved will be changed once the bug has been fixed.


==== Ignore Whitespace

When you're reviewing a Pull Request that's mostly formatting changes, it can be difficult to see if there are any actual code or logic changes mixed in.
Adding `?w=1` to the end of a URL that shows a diff turns on the `-w` (or `--ignore-all-space`) to `git diff`, which can result in a much cleaner diff view.
This works for Pull Requests:

    https://github.com/user/repo/pulls/123/files?w=1

As well as compare views:

    https://github.com/user/repo/compare/feature1...master?w=1


==== Rev-Parse Specs

Much like Git itself, GitHub accepts a rev-parse expression in many places where a version or refname is expected.
For example, this URL shows the tree view of the `master` branch:

    https://github.com/user/repo/tree/master

But you can also refer to that tree view by SHA-1 hash:

    https://github.com/user/repo/tree/2d3a8eee86df27446177a4c4254b71eb109a472c

But the magic here is that GitHub accepts an expression that unambiguously describes what you're looking for.
For example, the grandparent of the `feature1` branch:

    https://github.com/user/repo/tree/feature1~2

This also works for specifying endpoints for a Compare view:

    https://github.com/user/repo/compare/master~3...master^2

If this is all Greek to you, check out <<_revparse>> for more on this expression language.


==== Commits by Author

To see a particular person's contributions to a repository, you can list only their commits:

    https://github.com/user/repo/commits/master?author=jane

That view will show all the commits reachable from `master` which have an email address that belongs to the `jane` user.

==== Diffs as `.patch`

GitHub generates nice human-readable unified-diff views, but you can't just copy and paste these to a command line to apply the diff.
Luckily, GitHub can help you out: just append `.diff` or `.patch` to the end of the URL of any pull request, commit, or compare view, and you'll get the plain-text view of what that page is showing.


==== Line Linking

If you're looking at a file or commit, you should know that the line numbers on the left-hand side are links.
If you click one, GitHub highlights that line.
If you then shift-click another, GitHub will highlight the range of lines between the two.
The highlighted lines are encoded in the URL, so you can bring a colleague to the exact snippet of code you want them to look at.

==== Command Bar

The ``search'' bar at the top of the screen is hiding a lot of power.
Here's a small sample of its capabilities:

* `@user` takes you to a user page
* The autocompletion for `user/` shows you that user's repositories.
* Autocomplete for `user/project #` shows you that project's issues and pull requests.

As you can see, this is more of a command-line interface than a search bar (though full-text search is also one of its functions).
Click on the ``?'' icon at the right side of the bar to show more examples.

=== The API

(((GitHub, API)))
If the web UI isn't enough for you, or you're writing a program that works with GitHub projects, you'll be happy to know that GitHub has an API.
It works over HTTPS, so it's fairly easy to try out:

[source,shell]
----
$ curl https://api.github.com/user/schacon
{
  "login": "schacon",
  "id": 70,
  "avatar_url": "https://avatars.githubusercontent.com/u/70?",
# …
  "following": 19,
  "created_at": "2008-01-27T17:19:28Z",
  "updated_at": "2014-06-10T02:37:23Z"
}
----

Most everything you can do from the GitHub web interface or from Git itself can be done through this API, as well as some things that can't.
Remember how `gh` can convert an issue into a pull request?
That's accomplished using the a `POST` to the `/repos/<owner>/<repo>/pulls` endpoint.

Several open-source libraries exist that make this API available in an idiomatic way.
At the time of this writing, the supported languages include Go, Objective-C, Ruby, and .NET.
Check out http://github.com/octokit[] for more information on these, as they handle much of the HTTP for you.

There's much more to the API than is possible to cover in this book.
Take a look at https://developer.github.com[] for the complete documentation, as well as guides for common tasks.


=== Summary

Now you're a GitHub user.
You know how to create an account, manage an organization, create and push to repositories, and accept contributions from others.
We've also covered many of GitHub's lesser-known features, such as `gh`, keyboard shortcuts, emoji, and using a Subversion client.
In the next chapter, you'll learn more powerful tools and tips for dealing with complex situations, which will truly make you a Git master.
