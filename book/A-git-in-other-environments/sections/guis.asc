=== Graphical Interfaces


(((GUIs)))(((Graphical tools)))
Ang katutubong kapaligiran ng Git ay nasa terminal. Ang mga bagong tampok ay ipapakita muna roon, at tanging sa command line ay ang buong lakas ng Git na ganap sa iyong pagtatapon. Ngunit ang plain text ay hindi ang pinakamahusay na pagpipilian para sa lahat ng mga gawain; kung minsan ang isang visual na representasyon ay kung ano ang kailangan mo, at ang ilang mga gumagamit ay mas kumportable sa isang interface ng point-and-click.

Mahalagang tandaan na ang iba't ibang mga interface ay pinasadya para sa iba't ibang mga daloy ng trabaho. Ang ilang mga kliyente ay naglalantad lamang ng maingat na gawaing subset ng pag-andar ng Git, upang suportahan ang isang partikular na paraan ng paggawa na itinuturing ng may-akda na epektibo.
Kapag tiningnan sa liwanag na ito, wala sa mga tool na ito ang maaaring masabi na `` mas mabuti '' kaysa sa iba pa, ang mga ito ay mas angkop sa kanilang layunin. 
Tandaan din na wala ang mga graphical na kliyente na maaaring gawin na ang command-line client ay hindi maaaring; ang command-line ay pa rin kung saan magkakaroon ka ng pinakamaraming kapangyarihan at kontrol kapag nagtatrabaho sa iyong mga repository.

==== `gitk` and `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
Kapag nag-install ka ng Git, nakakuha ka rin ng mga visual na tool nito `gitk` and `git-gui`.

Ang `gitk` ay isang graphical viewer ng kasaysayan. 
Isipin ito tulad ng isang malakas na shell GUI sa `git log` at `git grep`.
Ito ang tool na gagamitin kapag sinusubukan mong makahanap ng isang bagay na nangyari sa nakaraan, o maisalarawan ang kasaysayan ng iyong proyekto.

Ang Gitk ay pinakamadaling tumawag mula sa command-line.
Basta `cd` sa isang repository ng Git, at i-type ang:

[source,console]
----
$ gitk [mga pagpipilian sa git log]
----

Tinatanggap ng Gitk ang maraming mga opsyon sa command line, na karamihan ay naipasa sa ilalim ng aksyon na aksyon `git log`.
.Marahil ang isa sa mga pinaka-kapaki-pakinabang ay ang  `--all` bandila, which tells na nagsasabi sa gitk upang ipakita ang mga gawain na mapupuntahan from _any_ ref, hindi lamang HEAD.
Mukhang ganito ang interface ng Gitk:

.Ang `gitk` history viewer.
image::images/gitk.png[The `gitk` history viewer.]

Sa itaas ay isang bagay na mukhang kaunti tulad ng output ng  `git log --graph`; ang bawat tuldok ay kumakatawan sa isang pangako, ang mga linya ay kumakatawan sa mga relasyon ng magulang, at ang mga ref ay ipinapakita bilang mga kulay na mga kahon. 
Ang dilaw na tuldok ay kumakatawan sa HEAD, at ang pulang tuldok ay kumakatawan sa mga pagbabago na hindi pa magiging isang gumawa. Sa ibaba ay isang pagtingin sa napiling gumawa; ang mga komento at patch sa kaliwa, at isang buod na pagtingin sa kanan. Sa pagitan ay isang koleksyon ng mga kontrol na ginagamit para sa kasaysayan ng paghahanap.

Ang `git-gui`,sa kabilang banda, ay pangunahing kasangkapan para sa paggawa ng mga gawa. 
Ito rin, ay pinakamadaling tumawag mula sa command line:

[source,console]
-----
$ git gui
-----

At mukhang ganito:

.Ang `git-gui` commit tool.
image::images/git-gui.png[The `git-gui` commit tool.]

Sa kaliwa ay ang index; nasa unstaged na mga pagbabago, itinanghal ang mga pagbabago sa ibaba. Maaari mong ilipat ang buong mga file sa pagitan ng dalawang estado sa pamamagitan ng pag-click sa kanilang mga icon, o maaari kang pumili ng isang file para sa pagtingin sa pamamagitan ng pag-click sa pangalan nito.

Sa itaas na kanan ay ang diff view, na nagpapakita ng mga pagbabago para sa kasalukuyang piniling file. Maaari mong i-stage ang mga indibidwal na hunks (o mga indibidwal na linya) sa pamamagitan ng pag-right click sa lugar na ito.

ASa kanang ibaba ay ang mensahe at aksyon na lugar. I-type ang iyong mensahe sa text box at i-click ang  ``Commit'' tupang magawa ang isang bagay na katulad ng  `git commit`.
Maaari mo ring piliin na baguhin ang huling gumawa sa pamamagitan ng pagpili ng pindutan ng radyo na ``Amend'' radio button, na i-update ang lugar ng  ``Staged Changes'' sa mga nilalaman ng huling gumawa. 
Pagkatapos ay maaari mo lamang i-stage o unstage ang ilang mga pagbabago, baguhin ang gumawa ng mensahe, at i-click  ``Commit'' 'muli upang palitan ang lumang gumawa sa isang bagong isa.

Ang `gitk` at `git-gui` ay mga halimbawa ng mga tool na nakatuon sa gawain. 
Ang bawat isa sa kanila ay pinasadya para sa isang tiyak na layunin (pagtingin sa kasaysayan at paglikha ng mga gumawa, ayon sa pagkakabanggit), at ligtaan ang mga tampok na hindi kinakailangan para sa gawaing iyon.


==== GitHub para sa Mac at Windows

(((GitHub for Mac)))(((GitHub for Windows)))
Gumawa ang GitHub ng dalawang kliyente na nakatuon sa workflow na Git: isa para sa Windows, at isa para sa Mac. Ang mga kliyente na ito ay isang mahusay na halimbawa ng mga tool na nakatuon sa workflow - sa halip na ilantad ang lahat ng pag-andar ng Git, sa halip ay nakatuon sila sa isang na-curate na hanay ng mga karaniwang ginagamit na mga tampok na mahusay na gumagana nang sama-sama. Mukhang ganito:
 

.GitHub for Mac.
image::images/github_mac.png[GitHub for Mac.]

.GitHub for Windows.
image::images/github_win.png[GitHub for Windows.]

TIdinisenyo ang mga ito upang tumingin at magtrabaho nang kapwa magkamukha, kaya gagamitin namin ang mga ito tulad ng isang solong produkto sa kabanatang ito. Hindi namin ginagawa ang isang detalyadong rundown ng mga tool na ito (mayroon silang sariling dokumentasyon), ngunit ang isang mabilis na paglilibot sa pagtingin sa ``changes'' (na kung saan ay gagastusin mo ang karamihan ng iyong oras) ay nasa kaayusan.

* Sa kaliwa ang listahan ng mga repository na sinusubaybayan ng kliyente; maaari kang magdagdag ng repository (alinman sa pamamagitan ng pag-clone o pag-attach sa isang lugar) sa pamamagitan ng pag-click sa icon na ``+'' sa tuktok ng lugar na ito.
* Sa gitna ay isang lugar ng pasubali, na nagbibigay-daan sa iyo ng pag-input ng isang gumawa ng mensahe, at piliin kung aling mga file ang dapat isama. (Sa Windows, ang pangako kasaysayan ay ipinapakita nang direkta sa ibaba ito, sa Mac, ito ay nasa isang hiwalay na tSa kanan ay isang diff view, na nagpapakita kung ano ang nagbago sa iyong nagtatrabaho na direktoryo, o kung aling mga pagbabago ang kasama sa napiling gumawa.
* Ang huling bagay na mapapansin ay ang pindutan ng `` Sync '' sa kanang tuktok, na siyang pangunahing paraan na nakikipag-ugnayan ka sa network.

[Tandaan]
====
Hindi mo kailangan ang isang GitHub account upang magamit ang mga tool na ito. Habang ang mga ito ay dinisenyo upang i-highlight ang serbisyo ng GitHub at inirerekumendang daloy ng trabaho, maligayang gagana sila sa anumang repository, at gawin ang mga operasyon ng network sa anumang host Git.
====

===== Pag-install

Maaaring ma-download ang GitHub for Windows mula sa https://windows.github.com, at GitHub for Mac mula sa https://mac.github.com. Kapag ang mga application ay unang tumakbo, nilalakad ka nila sa lahat ng unang pag-setup ng Git, tulad ng pag-configure ng iyong pangalan at email address, at parehong nag-set up ng maliwanag na default para sa maraming mga karaniwang opsyon sa pagsasaayos, tulad ng mga cache ng kredensyal at pag-uugali ng CRLF..

Parehong ``evergreen'' - ina-download at na-update ang mga update sa background habang bukas ang mga application. Kasama dito ang isang bundle na bersyon ng Git, na nangangahulugang marahil ay hindi mo kailangang mag-alala tungkol sa manu-manong pag-update nito muli. Sa Windows, ang kliyente ay nagsasama ng isang shortcut upang ilunsad ang Powershell sa Posh-git, na kung saan kami ay magsasalita nang higit pa tungkol sa ibang pagkakataon sa kabanatang ito.

Ang susunod na hakbang ay upang bigyan ang tool ng ilang mga repository upang gumana sa. Ang client ay nagpapakita sa iyo ng isang listahan ng mga repository na mayroon kang access sa GitHub, at maaaring i-clone ang mga ito sa isang hakbang. Kung mayroon ka nang isang lokal na imbakan, i-drag lamang ang direktoryo nito mula sa Finder o Windows Explorer sa window ng client ng GitHub, at ito ay isasama sa listahan ng mga repository sa kaliwa.
===== Inirerekumendang Workflow

Sa sandaling naka-install at naka-configure, maaari mong gamitin ang GitHub client para sa maraming karaniwang mga gawain sa Git. Ang tinukoy na daloy ng trabaho para sa tool na ito ay paminsan-minsan ay tinatawag na  ``GitHub Flow.''
Sinasaklaw namin ito nang mas detalyado sa ch06-github.asc, ngunit ang pangkalahatang kahalagahan ay na (a) magagawa mo sa isang sangay, at ( b) magkakaroon ka ng pag-sync sa isang remote repository medyo regular.

Ang pangangasiwa ng sangay ay isa sa mga lugar kung saan magkakaiba ang dalawang mga tool. 
Sa Mac, mayroong isang pindutan sa tuktok ng window para sa paglikha ng isang bagong sangay:

.``Create Branch'' na pindutan sa Mac.
image::images/branch_widget_mac.png[``Create Branch'' button on Mac.]

Sa Windows, ito ay ginagawa sa pamamagitan ng pag-type ng pangalan ng bagong sangay sa widget ng switch ng sangay:

.Paglikha ng isang sangay sa Windows..
image::images/branch_widget_win.png[Creating a branch on Windows.]

Sa sandaling ang iyong sangay ay nilikha, ang paggawa ng mga bagong gawa ay medyo tapat. Gumawa ng ilang mga pagbabago sa iyong nagtatrabaho na direktoryo, at kapag lumipat ka sa window ng client ng GitHub, ipapakita nito sa iyo kung aling mga file ang nagbago. Magpasok ng isang gumawa ng mensahe, piliin ang mga file na nais mong isama, at i-click ang pindutang ``Commit'' button (ctrl-enter or âŒ˜-enter).

Ang pangunahing paraan na nakikipag-ugnayan ka sa iba pang mga repository sa network ay sa pamamagitan ng tampok na ``Sync''.
Git sa loob ay may hiwalay na mga operasyon para sa panunulak, pagkuha, pagsasama, at pagpaparusa, ngunit ang mga kliyente ng GitHub ay nabagsak ang lahat ng mga ito sa isang tampok na multi-step. 
Narito kung ano ang mangyayari kapag nag-click ka sa pindutan ng Sync:

. `git pull --rebase`.
 Kung nabigo ito dahil sa pagsasalungat ng pagsamahin, bumabalik sa `git pull --no-rebase`.
. `git push`.

Ito ang pinakakaraniwang pagkakasunud-sunod ng mga utos ng network kapag nagtatrabaho sa estilo na ito, kaya ang paglalagay ng mga ito sa isang command ay nagse-save ng maraming oras.

===== Buod

Ang mga tool na ito ay napakahusay na angkop para sa workflow na idinisenyo para sa. Ang mga nag-develop at non-developer ay magkakasamang nakikipagtulungan sa isang proyekto sa loob ng ilang minuto, at marami sa mga pinakamahusay na kasanayan para sa ganitong uri ng daloy ng trabaho ay inihurnong sa mga tool. Gayunpaman, kung ang iyong daloy ng trabaho ay iba, o gusto mong higit na kontrol sa kung paano at kapag ang mga operasyon ng network ay tapos na, inirerekumenda namin na gumamit ka ng isa pang kliyente o command line.


==== Iba pang mga GUI

Mayroong ilang iba pang mga graphical na kliyenteng Git, at pinatakbo nila ang gamut mula sa mga pinasadyang, single-purpose na mga tool sa lahat ng paraan sa apps na nagsisikap na ilantad ang lahat ng maaaring gawin ng Git. Ang opisyal na website ng Git ay mayroong listahan ng mga pinakasikat na kliyente sa http://git-scm.com/downloads/guis. Ang isang mas malawak na listahan ay magagamit sa site na Git wiki, sa https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces.
