==== Git and TFS

(((Διαλειτουργικότητα με άλλα VCS, TFS)))
(((TFS)))((("TFVC", see="TFS")))
ο Git γίνεται δημοφιλές στους προγραμματιστές των Windows και εάν γράφουμε κώδικα στα Windows, υπάρχει μεγάλη πιθανότητα να χρησιμοποιούμε το Team Foundation Server (TFS) της Microsoft.
Το TFS είναι μια σουίτα συνεργασίας που περιλαμβάνει εντοπισμό ελαττωμάτων και αντικειμένων εργασίας, υποστήριξη επεξεργασίας για Scrum και άλλους, αναθεώρηση κώδικα και έλεγχο έκδοσης.
Υπάρχει μια μικρή σύγχυση: * TFS * είναι ο διακομιστής, ο οποίος υποστηρίζει τον έλεγχο του πηγαίου κώδικα χρησιμοποιώντας και το Git και το δικό του προσαρμοσμένο VCS, το οποίο έχουν μεταγλωττίσει * TFVC * (Team Foundation Version Control).
Υποστήριξη Git είναι μια κάπως νέα δυνατότητα για το TFS (αποστολή με την έκδοση 2013), έτσι όλα τα εργαλεία που προηγούνται που αναφέρονται στο τμήμα ελέγχου έκδοσης ως `` TFS '', αν και εργάζονται κυρίως με το TFVC.

Git is becoming popular with Windows developers, and if you're writing code on Windows, there's a good chance you're using Microsoft's Team Foundation Server (TFS).
TFS is a collaboration suite that includes defect and work-item tracking, process support for Scrum and others, code review, and version control.
There's a bit of confusion ahead: *TFS* is the server, which supports controlling source code using both Git and their own custom VCS, which they've dubbed *TFVC* (Team Foundation Version Control).
Git support is a somewhat new feature for TFS (shipping with the 2013 version), so all of the tools that predate that refer to the version-control portion as ``TFS'', even though they're mostly working with TFVC.

Αν βρεθούμε σε μια ομάδα που χρησιμοποιεί το TFVC αλλά θα προτιμούσατε να χρησιμοποιήσουμε το Git ως πελάτη ελέγχου έκδοσης, υπάρχει ένα έργο για εσάς.

If you find yourself on a team that's using TFVC but you'd rather use Git as your version-control client, there's a project for you.

===== Ποιο εργαλείο;

(((git-tf)))(((git-tfs)))
In fact, there are two: git-tf and git-tfs.

Στην πραγματικότητα, υπάρχουν δύο: git-tf και git-tfs.

Το Git-tfs (που βρίσκεται στο https://github.com/git-tfs/git-tfs[]) είναι ένα έργο .NET και (από αυτό το γράψιμο) τρέχει μόνο στα Windows.
Για να συνεργαστεί με τους χώρους αποθήκευσης Git, χρησιμοποιεί τις υποβολές .NET για libgit2, μια εφαρμογή Git που προσανατολίζεται στη βιβλιοθήκη, η οποία είναι εξαιρετικά αποδοτική και επιτρέπει μεγάλη ευελιξία με τα κόπρανα ενός αποθετηρίου Git.
Το Libgit2 δεν είναι μια ολοκληρωμένη εφαρμογή του Git, οπότε για να καλύψουμε τη διαφορά, το git-tfs θα καλέσει τον πελάτη Git της γραμμής εντολών για κάποιες λειτουργίες, έτσι δεν υπάρχουν τεχνητά όρια σε ό, τι μπορεί να κάνει με τα αποθετήρια Git.
Η υποστήριξη των χαρακτηριστικών του TFVC είναι πολύ ώριμη, αφού χρησιμοποιεί τα συγκροτήματα Visual Studio για εργασίες με διακομιστές.
Αυτό σημαίνει ότι θα χρειαστούμε πρόσβαση σε αυτές τις συναρμολογήσεις, πράγμα που σημαίνει ότι πρέπει να εγκαταστήσουμε μια πρόσφατη έκδοση του Visual Studio (οποιαδήποτε έκδοση από την έκδοση 2010, συμπεριλαμβανομένου του Express από την έκδοση 2012) ή το Visual Studio SDK.

Git-tfs (found at https://github.com/git-tfs/git-tfs[]) is a .NET project, and (as of this writing) it only runs on Windows.
To work with Git repositories, it uses the .NET bindings for libgit2, a library-oriented implementation of Git which is highly performant and allows a lot of flexibility with the guts of a Git repository.
Libgit2 is not a complete implementation of Git, so to cover the difference git-tfs will actually call the command-line Git client for some operations, so there are no artificial limits on what it can do with Git repositories.
Its support of TFVC features is very mature, since it uses the Visual Studio assemblies for operations with servers.
This does mean you'll need access to those assemblies, which means you need to install a recent version of Visual Studio (any edition since version 2010, including Express since version 2012), or the Visual Studio SDK.

Git-tf (whose home is at https://gittf.codeplex.com[]) is a Java project, and as such runs on any computer with a Java runtime environment.
It interfaces with Git repositories through JGit (a JVM implementation of Git), which means it has virtually no limitations in terms of Git functions.
However, its support for TFVC is limited as compared to git-tfs – it does not support branches, for instance.

Το Git-tf (του οποίου το σπίτι βρίσκεται στο https://gittf.codeplex.com[]) είναι ένα έργο Java και ως εκ τούτου τρέχει σε οποιονδήποτε υπολογιστή με περιβάλλον Java runtime.
Συνδέεται με τους χώρους αποθήκευσης Git μέσω του JGit (εφαρμογή JVM του Git), πράγμα που σημαίνει ότι δεν έχει ουσιαστικά κανένα περιορισμό όσον αφορά τις λειτουργίες Git.
Ωστόσο, η υποστήριξή του για το TFVC είναι περιορισμένη σε σύγκριση με το git-tfs - για παράδειγμα, δεν υποστηρίζει κλάδους.

Έτσι κάθε εργαλείο έχει πλεονεκτήματα και μειονεκτήματα και υπάρχουν πολλές καταστάσεις που ευνοούν το ένα πάνω στο άλλο.
Θα καλύψουμε τη βασική χρήση και των δύο σε αυτό το βιβλίο.

So each tool has pros and cons, and there are plenty of situations that favor one over the other.
We'll cover the basic usage of both of them in this book.

[ΣΗΜΕΙΩΣΗ]
====
Θα χρειαστούμε πρόσβαση σε ένα αποθετήριο με βάση το TFVC που θα ακολουθήσει μαζί με αυτές τις οδηγίες.
Αυτά δεν είναι τόσο άφθονα στην άγρια ​​φύση όσο τα αποθετήρια Git ή Subversion, οπότε μπορεί να χρειαστεί να δημιουργήσουμε ένα δικό μας.
Το Codeplex (https://www.codeplex.com[]) ή το Visual Studio Online (http://www.visualstudio.com[]) είναι και οι δύο καλές επιλογές για αυτό.

You'll need access to a TFVC-based repository to follow along with these instructions.
These aren't as plentiful in the wild as Git or Subversion repositories, so you may need to create one of your own.
Codeplex (https://www.codeplex.com[]) or Visual Studio Online (http://www.visualstudio.com[]) are both good choices for this.
====


===== Getting Started: `git-tf`

Το πρώτο πράγμα που κάνουμε, όπως συμβαίνει με οποιοδήποτε πρόγραμμα Git, είναι ο κλώνος.
Εδώ είναι αυτό που μοιάζει με το `git-tf`:

The first thing you do, just as with any Git project, is clone.
Here's what that looks like with `git-tf`:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

Το πρώτο επιχείρημα είναι η διεύθυνση URL μιας συλλογής TFVC, η δεύτερη είναι της μορφής `$ / project / branch` και η τρίτη είναι η διαδρομή προς τον τοπικό αποθετήριο Git που πρόκειται να δημιουργηθεί (το τελευταίο είναι προαιρετικό).
Το Git-tf μπορεί να λειτουργήσει μόνο με ένα κλάδο κάθε φορά. εάν θέλουμε να κάνουμε checkins σε διαφορετικό κλάδο TFVC, θα πρέπει να κάνουμε έναν νέο κλώνο από αυτόν τον κλάδο.

The first argument is the URL of a TFVC collection, the second is of the form `$/project/branch`, and the third is the path to the local Git repository that is to be created (this last one is optional).
Git-tf can only work with one branch at a time; if you want to make checkins on a different TFVC branch, you'll have to make a new clone from that branch.

Αυτό δημιουργεί ένα πλήρως λειτουργικό αποθετήριο Git:

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

This is called a _shallow_ clone, meaning that only the latest changeset has been downloaded.
TFVC isn't designed for each client to have a full copy of the history, so git-tf defaults to only getting the latest version, which is much faster.

Αυτό ονομάζεται _shallow_ clone, πράγμα που σημαίνει ότι έχουν ληφθεί μόνο τα τελευταία updateset.
Το TFVC δεν έχει σχεδιαστεί για κάθε πελάτη να έχει ένα πλήρες αντίγραφο του ιστορικού, οπότε το git-tf έχει προεπιλεγεί για να πάρει μόνο την πιο πρόσφατη έκδοση, η οποία είναι πολύ πιο γρήγορη.

Αν έχουμε κάποιο χρόνο, αξίζει τον κόπο να κλωνοποιήσουμε ολόκληρο το ιστορικό του έργου, χρησιμοποιώντας την επιλογή `-deep`:

If you have some time, it's probably worth it to clone the entire project history, using the `--deep` option:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

Παρατηρούμε ετικέτες με ονόματα όπως `TFS_C35189`; αυτό είναι ένα χαρακτηριστικό που μας βοηθάει να ξέρουμε ποιες υποβολές του Git σχετίζονται με τις αλλαγές των TFVC.
Αυτός είναι ένας καλός τρόπος για να την αντιπροσωπεύσουμε, αφού μπορούμε να δούμε με μια απλή εντολή καταγραφής ποια από τις υποβολές μας σχετίζεται με ένα στιγμιότυπο που υπάρχει επίσης στο TFVC.
Δεν είναι απαραίτητες (και στην πραγματικότητα μπορούμε να τις απενεργοποιήσουμε με το "git config git-tf.tag false"). - git-tf διατηρεί τις πραγματικές αντιστοιχίσεις commit-changeset στο αρχείο .git / git-tf.

Notice the tags with names like `TFS_C35189`; this is a feature that helps you know which Git commits are associated with TFVC changesets.
This is a nice way to represent it, since you can see with a simple log command which of your commits is associated with a snapshot that also exists in TFVC.
They aren't necessary (and in fact you can turn them off with `git config git-tf.tag false`) – git-tf keeps the real commit-changeset mappings in the `.git/git-tf` file.


===== Getting Started: `git-tfs`

Η κλωνοποίηση Git-tfs συμπεριφέρεται λίγο διαφορετικά.
Παρατηροώ:

Git-tfs cloning behaves a bit differently.
Observe:

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

Παρατηρήστε τη σημαία `--with-branches '.
Το Git-tfs είναι ικανό να χαρτογραφήσει κλάδους TFVC σε κλάδους Git και αυτή η σημαία του λέει να δημιουργήσει ένα τοπικό υποκατάστημα Git για κάθε υποκατάστημα TFVC.
Αυτό συστήνεται ιδιαίτερα αν έχουμε διακλαδιστεί ή συγχωνευτεί σε TFS, αλλά δεν θα λειτουργήσει με διακομιστές παλαιότερους από το TFS 2010 - πριν από αυτή την έκδοση, τα `` branches '' ήταν απλά φάκελοι, οπότε το git-tfs δεν μπορεί να πει από τους κανονικούς φακέλους.

Notice the `--with-branches` flag.
Git-tfs is capable of mapping TFVC branches to Git branches, and this flag tells it to set up a local Git branch for every TFVC branch.
This is highly recommended if you've ever branched or merged in TFS, but it won't work with a server older than TFS 2010 – before that release, ``branches'' were just folders, so git-tfs can't tell them from regular folders.

Ας ρίξουμε μια ματιά στο αποθετήριο Git που προκύπτει:

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

There are two local branches, `master` and `featureA`, which represent the initial starting point of the clone (`Trunk` in TFVC) and a child branch (`featureA` in TFVC).
You can also see that the `tfs` ``remote'' has a couple of refs too: `default` and `featureA`, which represent TFVC branches.
Git-tfs maps the branch you cloned from to `tfs/default`, and others get their own names.

Υπάρχουν δύο τοπικοί κλάδοι, «master» και «featureA», που αντιπροσωπεύουν το αρχικό σημείο εκκίνησης του κλώνου («Trunk» στο TFVC) και ένα υποκατάστημα παιδιού (`featureA` στο TFVC).
Μπορούμε επίσης να δούμε ότι το `tfs`` `remote '' έχει και μερικούς λόγους refs:` default` και `featureA`, που αντιπροσωπεύουν κλάδους TFVC.
Το Git-tfs χαρτογραφεί το υποκατάστημα που έχουμε κλωνοποιήσει από το `tfs / default`, και άλλοι παίρνουν τα δικά τους ονόματα.

Ένα άλλο πράγμα που πρέπει να παρατηρήσουμε είναι οι γραμμές `git-tfs-id:` στα μηνύματα commit.
Αντί των ετικετών, το git-tfs χρησιμοποιεί αυτούς τους δείκτες για να συνδέσει τα σύνολα αλλαγών TFVC με τις υποβολές Git.
Αυτό έχει τις συνέπειες ότι το Git μας δεσμεύεται ότι θα έχει διαφορετικό hash SHA-1 πριν και αφού έχει ωθηθεί στο TFVC.

Another thing to notice is the `git-tfs-id:` lines in the commit messages.
Instead of tags, git-tfs uses these markers to relate TFVC changesets to Git commits.
This has the implication that your Git commits will have a different SHA-1 hash before and after they have been pushed to TFVC.

===== Git-tf[s] Workflow

[ΣΗΜΕΙΩΣΗ]
====
Ανεξάρτητα από το εργαλείο που χρησιμοποιούμε, θα πρέπει να ορίσουμε μερικές τιμές διαμόρφωσης του Git για να αποφύγουμε την εμφάνιση προβλημάτων.

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

Το προφανές επόμενο πράγμα που θα θελήσουμε να κάνουμε είναι να εργαστούμε στο έργο.
Το TFVC και το TFS έχουν διάφορα χαρακτηριστικά που μπορεί να προσθέτουν πολυπλοκότητα στη ροή εργασίας μας:

The obvious next thing you're going to want to do is work on the project.
TFVC and TFS have several features that may add complexity to your workflow:

. Οι κλάδοι χαρακτηριστικών που δεν αντιπροσωπεύονται στο TFVC προσθέτουν μια μικρή πολυπλοκότητα.
  Αυτό έχει να κάνει με τους * πολύ * διαφορετικούς τρόπους με τους οποίους οι TFVC και Git αντιπροσωπεύουν υποκαταστήματα.
. Λάβουμε υπόψη ότι το TFVC επιτρέπει στους χρήστες να "ελέγχουν" τα αρχεία από το διακομιστή, κλείνοντας τα έτσι ώστε κανένας άλλος να μην τα επεξεργάζεται.
  Αυτό προφανώς δεν θα μας εμποδίσει να τα επεξεργαστούμε στην τοπική αποθήκη μας, αλλά θα μπορούσε να πάρει τον δρόμο όταν έρχεται χρόνος για να ωθήσουμε τις αλλαγές μας στον εξυπηρετητή TFVC.
. Το TFS έχει την έννοια των `` κλειστών '' checkins, όπου ένας κύκλος δοκιμής κατασκευής TFS πρέπει να ολοκληρωθεί με επιτυχία πριν επιτραπεί ο έλεγχος.
  Αυτό χρησιμοποιεί τη λειτουργία `` shelve '' στο TFVC, το οποίο δεν καλύπτουμε λεπτομερώς εδώ.
    Μπορούμε να το ψεύσουμε αυτό με χειροκίνητο τρόπο με το git-tf και το git-tfs παρέχει την εντολή `checkinto` που είναι γνωστή στην πύλη.

. Feature branches that aren't represented in TFVC add a bit of complexity.
  This has to do with the *very* different ways that TFVC and Git represent branches.
. Be aware that TFVC allows users to ``checkout'' files from the server, locking them so nobody else can edit them.
  This obviously won't stop you from editing them in your local repository, but it could get in the way when it comes time to push your changes up to the TFVC server.
. TFS has the concept of ``gated'' checkins, where a TFS build-test cycle has to complete successfully before the checkin is allowed.
  This uses the ``shelve'' function in TFVC, which we don't cover in detail here.
    You can fake this in a manual fashion with git-tf, and git-tfs provides the `checkintool` command which is gate-aware.

Προς το συμφέρον της συντομίας, αυτό που θα καλύψουμε εδώ είναι το ευτυχισμένο μονοπάτι, το οποίο παρακάμπτει ή αποφεύγει τα περισσότερα από αυτά τα ζητήματα.

In the interest of brevity, what we'll cover here is the happy path, which sidesteps or avoids most of these issues.

===== Ροή εργασίας: `git-tf`

Ας υποθέσουμε ότι έχουμε κάνει κάποια εργασία, κάνατε μερικές υποβολές του Git στο master και είστε έτοιμοι να μοιραστούμε την πρόοδό μας στον εξυπηρετητή TFVC.
Εδώ είναι το αποθετήριο Git:

Let's say you've done some work, made a couple of Git commits on `master`, and you're ready to share your progress on the TFVC server.
Here's our Git repository:

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Θέλουμε να πάρουμε το στιγμιότυπο που βρίσκεται στο `4178a82` και να το προωθήσουμε στο διακομιστή TFVC.
Πρώτα τα πράγματα πρώτα: Ας δούμε αν οποιοιδήποτε από τους συμπαίκτες μας έκαναν κάτι από τότε που συνδέσαμε τελευταία:

We want to take the snapshot that's in the `4178a82` commit and push it up to the TFVC server.
First things first: let's see if any of our teammates did anything since we last connected:

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Φαίνεται ότι κάποιος άλλος εργάζεται επίσης, και τώρα έχουμε αποκλίνουσα ιστορία.
Αυτό είναι όπου Git λάμπει, αλλά έχουμε δύο επιλογές για το πώς να προχωρήσουμε:

Looks like someone else is working, too, and now we have divergent history.
This is where Git shines, but we have two choices of how to proceed:

. Κάνοντας μια commit commit αισθάνεται φυσική ως χρήστης του Git (μετά από όλα, αυτό είναι που κάνει το "git pull") και το git-tf μπορεί να το κάνει αυτό για μας με ένα απλό `git tf pull`.
  Να γνωρίζουμε, ωστόσο, ότι το TFVC δεν σκέφτεται αυτόν τον τρόπο και αν πιέσουμε συγχώνευση, το ιστορικό μας θα αρχίσει να φαίνεται διαφορετικό και στις δύο πλευρές, γεγονός που μπορεί να προκαλέσει σύγχυση.
  Ωστόσο, εάν σχεδιάζουμε να υποβάλουμε όλες τις αλλαγές μας ως ένα σύνολο αλλαγών, αυτή είναι ίσως η πιο εύκολη επιλογή.
. Η αναδιάρθρωση καθιστά το ιστορικό διαπραγμάτευσης γραμμικό, πράγμα που σημαίνει ότι έχουμε τη δυνατότητα να μετατρέψουμε κάθε μία από τις υποβολές μας Git σε μια σειρά αλλαγών TFVC.
  Δεδομένου ότι αυτό αφήνει τις περισσότερες επιλογές ανοικτές, μας συνιστούμε να το κάνουμε αυτό τον τρόπο. Το git-tf μας διευκολύνει ακόμα και με το `git tf pull -rebase`.

. Making a merge commit feels natural as a Git user (after all, that's what `git pull` does), and git-tf can do this for you with a simple `git tf pull`.
  Be aware, however, that TFVC doesn't think this way, and if you push merge commits your history will start to look different on both sides, which can be confusing.
  However, if you plan on submitting all of your changes as one changeset, this is probably the easiest choice.
. Rebasing makes our commit history linear, which means we have the option of converting each of our Git commits into a TFVC changeset.
  Since this leaves the most options open, we recommend you do it this way; git-tf even makes it easy for you with `git tf pull --rebase`.

Η επιλογή είναι δική σου.
Για αυτό το παράδειγμα, θα κάνουμε επανακατανομή:

The choice is yours.
For this example, we'll be rebasing:

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Τώρα είμαστε έτοιμοι να κάνουμε checkin στο διακομιστή TFVC.
Το Git-tf μας δίνει τη δυνατότητα να δημιουργήσουμε ένα ενιαίο σύνολο αλλαγών που αντιπροσωπεύει όλες τις αλλαγές από το τελευταίο (`--shallow`, το οποίο είναι το προεπιλεγμένο) και δημιουργώντας ένα νέο σύνολο αλλαγών για κάθε υποβολή Git (` --deep`).
Για αυτό το παράδειγμα, θα δημιουργήσουμε μόνο ένα set changeset:

Now we're ready to make a checkin to the TFVC server.
Git-tf gives you the choice of making a single changeset that represents all the changes since the last one (`--shallow`, which is the default) and creating a new changeset for each Git commit (`--deep`).
For this example, we'll just create one changeset:

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----


Υπάρχει μια νέα ετικέτα `TFS_C35348`, υποδεικνύοντας ότι το TFVC αποθηκεύει ακριβώς το ίδιο στιγμιότυπο με τη υποβολή` 5a0e25e`.
Είναι σημαντικό να σημειώσουμε ότι δεν είναι απαραίτητο κάθε Git commit να έχει ένα ακριβές αντίγραφο στο TFVC. η υποβολή `6eb3eb5`, για παράδειγμα, δεν υπάρχει σε κανένα σημείο του διακομιστή.

There's a new `TFS_C35348` tag, indicating that TFVC is storing the exact same snapshot as the `5a0e25e` commit.
It's important to note that not every Git commit needs to have an exact counterpart in TFVC; the `6eb3eb5` commit, for example, doesn't exist anywhere on the server.

Αυτή είναι η κύρια ροή εργασίας.
Υπάρχουν μερικές άλλα θέματα που θα θέλαμε να έχουμε κατά νου:

* Δεν υπάρχει διακλάδωση.
  Το Git-tf μπορεί να δημιουργήσει μόνο αποθετήρια Git από έναν κλάδο TFVC κάθε φορά.
* Συνεργαστούμε χρησιμοποιώντας TFVC ή Git, αλλά όχι και τα δύο.
  Διαφορετικοί κλώνοι git-tf του ίδιου αποθετηρίου TFVC μπορεί να έχουν διαφορετικές δέσμες SHA-1, οι οποίες δεν θα προκαλέσουν τέλος πονοκεφάλων.
* Αν η ροή εργασίας της ομάδας μας περιλαμβάνει συνεργασία με το Git και συγχρονισμό με το TFVC περιοδικά, συνδεθούμε μόνο στο TFVC με ένα από τα αποθετήρια Git.

* There is no branching.
  Git-tf can only create Git repositories from one TFVC branch at a time.
* Collaborate using either TFVC or Git, but not both.
  Different git-tf clones of the same TFVC repository may have different commit SHA-1 hashes, which will cause no end of headaches.
* If your team's workflow includes collaborating in Git and syncing periodically with TFVC, only connect to TFVC with one of the Git repositories.


===== Ροή εργασίας: `git-tfs`

Ας περάσουμε από το ίδιο σενάριο χρησιμοποιώντας το git-tfs.
Ακολουθούν οι νέες υποβολές που έχουμε κάνει στο υποκατάστημα `master` στο αποθετήριο Git:

Let's walk through the same scenario using git-tfs.
Here are the new commits we've made to the `master` branch in our Git repository:

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

Τώρα ας δούμε αν κάποιος άλλος έχει κάνει δουλειά ενώ είχαμε χάσει μακριά:

Now let's see if anyone else has done work while we were hacking away:

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Yes, it turns out our coworker has added a new TFVC changeset, which shows up as the new `aea74a0` commit, and the `tfs/default` remote branch has moved.

Ναι, αποδεικνύεται ότι ο συνεργάτης μας έχει προσθέσει ένα νέο σύνολο αλλαγών TFVC, το οποίο εμφανίζεται με τη νέα υποβολή `aea74a0` και μετακινήθηκε ο απομακρυσμένος κλάδος` tfs / default '.

Όπως και με το git-tf, έχουμε δύο θεμελιώδεις επιλογές για τον τρόπο επίλυσης αυτής της αποκλίνουμας ιστορίας:

As with git-tf, we have two fundamental options for how to resolve this divergent history:

. Rebase to preserve a linear history.
. Merge to preserve what actually happened.

. Rebase να διατηρήσει ένα γραμμικό ιστορικό.
. Συνεργαστούμε για να διατηρήσουμε αυτό που πραγματικά συνέβη.

Σε αυτή την περίπτωση, θα κάνουμε ένα `` deep '' checkin, όπου κάθε commit Git θα γίνει ένα setoff των TFVC, οπότε θέλουμε να κάνουμε rebase.

In this case, we're going to do a ``deep'' checkin, where every Git commit becomes a TFVC changeset, so we want to rebase.

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Τώρα είμαστε έτοιμοι να ολοκληρώσουμε τη συνεισφορά μας ελέγχοντας τον κώδικα μας στον εξυπηρετητή TFVC.
Θα χρησιμοποιήσουμε εδώ την εντολή `rcheckin` για να δημιουργήσουμε ένα σύνολο αλλαγών TFVC για κάθε υποβολή Git στη διαδρομή από HEAD στον πρώτο απομακρυσμένο κλάδο` tfs` που βρέθηκε (η εντολή `checkin` θα δημιουργούσε μόνο ένα changeet, όπως το squashing Git υποβολές).

Now we're ready to complete our contribution by checking in our code to the TFVC server.
We'll use the `rcheckin` command here to create a TFVC changeset for each Git commit in the path from HEAD to the first `tfs` remote branch found (the `checkin` command would only create one changeset, sort of like squashing Git commits).

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Notice how after every successful checkin to the TFVC server, git-tfs is rebasing the remaining work onto what it just did.
That's because it's adding the `git-tfs-id` field to the bottom of the commit messages, which changes the SHA-1 hashes.
This is exactly as designed, and there's nothing to worry about, but you should be aware that it's happening, especially if you're sharing Git commits with others.

Παρατηρήστε πως μετά από κάθε επιτυχή checkin στο διακομιστή TFVC, το git-tfs επαναπροσδιορίζει το υπόλοιπο έργο σε αυτό που μόλις έκανε.
Αυτό συμβαίνει επειδή προσθέτει το πεδίο `git-tfs-id` στο κάτω μέρος των μηνυμάτων υποβολής, το οποίο αλλάζει τα SHA-1 hashes.
Αυτό είναι ακριβώς όπως έχει σχεδιαστεί και δεν υπάρχει τίποτα να ανησυχούμε, αλλά θα πρέπει να γνωρίζουμε ότι συμβαίνει αυτό, ειδικά αν μοιράζεστε υποβολές Git με άλλους.

Το TFS έχει πολλά χαρακτηριστικά που ενσωματώνονται με το σύστημα ελέγχου έκδοσης του, όπως στοιχεία εργασίας, ορισθέντες αναθεωρητές, checkins και ούτω καθεξής.
Μπορεί να είναι δυσκίνητη η εργασία με αυτά τα χαρακτηριστικά χρησιμοποιώντας μόνο ένα εργαλείο γραμμής εντολών, αλλά ευτυχώς το git-tfs μας επιτρέπει να ξεκινήσουμε ένα γραφικό εργαλείο checkin πολύ εύκολα:

TFS has many features that integrate with its version control system, such as work items, designated reviewers, gated checkins, and so on.
It can be cumbersome to work with these features using only a command-line tool, but fortunately git-tfs lets you launch a graphical checkin tool very easily:

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

Μοιάζει λίγο σαν αυτό:

.`git-tfs checkintool`.
image::images/git-tfs-ct.png[`git-tfs checkintool`.]

Αυτό είναι οικείο στους χρήστες του TFS, καθώς είναι ο ίδιος διάλογος που ξεκινάει μέσα από το Visual Studio.

Το `git-tfs` μας επιτρέπει επίσης να ελέγχουμε τους κλάδους του TFVC από το αποθετήριο Git.
Για παράδειγμα, ας δημιουργήσουμε ένα:

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git log --oneline --graph --decorate --all
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Η δημιουργία ενός υποκαταστήματος στο TFVC σημαίνει την προσθήκη μιας σειράς αλλαγών όπου αυτό το υποκατάστημα υπάρχει τώρα και αυτό προβάλλεται ως υποβολή Git.
Σημειώστε επίσης ότι το git-tfs * δημιούργησε * τον απομακρυσμένο κλάδο `tfs / featureBee`, αλλά το` HEAD` εξακολουθεί να δείχνει `master`.
Εάν θέλουμε να εργαστούμε στο νεοσύστατο υποκατάστημα, θα θελήσουμε να βασίσουμε τις νέες υποβολές μας στη υποβολή `1d54865`, ίσως δημιουργώντας ένα κλάδο θέματος από αυτή τη υποβολή.

Creating a branch in TFVC means adding a changeset where that branch now exists, and this is projected as a Git commit.
Note also that git-tfs *created* the `tfs/featureBee` remote branch, but `HEAD` is still pointing to `master`.
If you want to work on the newly-minted branch, you'll want to base your new commits on the `1d54865` commit, perhaps by creating a topic branch from that commit.


===== Ανακεφαλαίωση Git και TFS

Τα Git-tf και Git-tfs είναι και τα δύο εξαιρετικά εργαλεία για τη διασύνδεση με ένα διακομιστή TFVC.
μας επιτρέπουν να χρησιμοποιούμε τη δύναμη του Git τοπικά, αποφεύγουμε συνεχώς να ταξιδεύουμε στο κεντρικό διακομιστή TFVC και να κάνουμε τη ζωή μας ως προγραμματιστή πολύ πιο εύκολη, χωρίς να αναγκάζουμε ολόκληρη την ομάδα μας να μεταναστεύσει στο Git.
Εάν εργάζεστε σε Windows (πιθανότατα αν η ομάδα μας χρησιμοποιεί το TFS), πιθανότατα θέλουμε να χρησιμοποιήσουμε το git-tfs, καθώς το σύνολο χαρακτηριστικών του είναι πιο πλήρες, αλλά αν εργάζεστε σε άλλη πλατφόρμα, θα χρησιμοποιεί git-tf, η οποία είναι πιο περιορισμένη.
Όπως συμβαίνει με τα περισσότερα εργαλεία αυτού του κεφαλαίου, θα πρέπει να επιλέξουμε ένα από αυτά τα συστήματα ελέγχου έκδοσης να είναι κανονικά και να χρησιμοποιήσουμε το άλλο με δευτερεύον τρόπο - είτε το Git είτε το TFVC θα πρέπει να είναι το κέντρο συνεργασίας, αλλά όχι και τα δύο

Git-tf and Git-tfs are both great tools for interfacing with a TFVC server.
They allow you to use the power of Git locally, avoid constantly having to round-trip to the central TFVC server, and make your life as a developer much easier, without forcing your entire team to migrate to Git.
If you're working on Windows (which is likely if your team is using TFS), you'll probably want to use git-tfs, since its feature set is more complete, but if you're working on another platform, you'll be using git-tf, which is more limited.
As with most of the tools in this chapter, you should choose one of these version-control systems to be canonical, and use the other one in a subordinate fashion – either Git or TFVC should be the center of collaboration, but not both.
