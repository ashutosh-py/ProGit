==== Git και Mercurial

(((Διαλειτουργικότητα με άλλα VCS, Mercurial)))
(((Mercurial)))
Το σύμπαν των DVCS είναι μεγαλύτερο από το Git.
Στην πραγματικότητα, υπάρχουν πολλά άλλα συστήματα σε αυτό το σύμπαν, το καθένα με τη δική του οπτική για το πώς γίνεται σωστά ο κατανεμημένος έλεγχος εκδόσεων.
Πέρα από το Git, το πιο δημοφιλές είναι το Mercurial, και μάλιστα και τα δύο είναι πολύ παρόμοια από πολλές απόψεις.

Τα καλά νέα, αν προτιμάτε τη συμπεριφορά από την πλευρά του πελάτη του Git αλλά εργαζόμαστε με ένα έργο του οποίου ο πηγαίος κώδικας ελέγχεται με το Mercurial, είναι ότι υπάρχει ένας τρόπος να χρησιμοποιήσουμε το Git ως πελάτη για ένα αποθετήριο που φιλοξενείται από το Mercurial.
Δεδομένου ότι ο τρόπος με τον οποίο ο Git μιλάει με αποθετήρια διακομιστών μέσω απομακρυσμένων αποθετηρίων, δεν πρέπει να αποτελεί έκπληξη ότι αυτή η γέφυρα έχει υλοποιηθεί ως απομακρυσμένος βοηθός.
Το όνομα του έργου είναι `git-remote-hg` και μπορεί να βρεθεί στη https://github.com/felipec/git-remote-hg[].

===== `git-remote-hg`

Πρώτα, πρέπει να εγκαταστήσουμε το `git-remote-hg`.
Αυτό ουσιαστικά γίνεται αν απλά αντιγράψουμε το αρχείο κάπου στο  μονοπάτι μας, όπως παρακάτω:

[source,console]
----
$ curl -o ~/bin/git-remote-hg \
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
$ chmod +x ~/bin/git-remote-hg
----

… με την προϋπόθεση ότι ο `~/bin` είναι στο `$PATH` μας.
η `git-remote-hg` έχει άλλη μία εξάρτηση: τη βιβλιοθήκη της Python του Mercurial.
Αν έχουμε εγκατεστημένη την Python, αυτό γίνεται πανεύκολα:

[source,console]
----
$ pip install mercurial
----

(Εάν δεν έχουμε εγκαταστήσει την Python, επισκεφτόμαστε τη διεύθυνση https://www.python.org/[] για να την κατεβάσουμε και εγκαταστήσουμε.)

Το τελευταίο πράγμα που θα χρειαστούμε είναι ο πελάτης του Mercurial.
Μεταβαίνουμε στη διεύθυνση http://mercurial.selenic.com/[] και τον εγκαταθιστούμε αν δεν το έχουμε ήδη κάνει.

Τώρα είμαστε έτοιμοι να ροκάρουμε.
Το μόνο που χρειαζόμαστε είναι ένα αποθετήριο Mercurial στο οποίο μπορούμε να ωθήσουμε.
Ευτυχώς, κάθε αποθετήριο Mercurial μπορεί να ενεργήσει με αυτόν τον τρόπο, οπότε θα χρησιμοποιήσουμε μόνο το αποθετήριο ``hello world'' που χρησιμοποιούν όλοι για να μάθουν το Mercurial:

[source,console]
----
$ hg clone http://selenic.com/repo/hello /tmp/hello
----

===== Getting Started

Τώρα που έχουμε έναν κατάλληλο αποθετήριο ``από την πλευρά του διακομιστή'', μπορούμε να εξετάσουμε μια τυπική ροή εργασίας.
Όπως θα δούμε, αυτά τα δύο συστήματα είναι αρκετά παρόμοια, συνεπώς δεν υπάρχει μεγάλη τριβή.

Όπως πάντα στο Git, αρχικά κλωνοποιούμε:

[source,console]
----
$ git clone hg::/tmp/hello /tmp/hello-git
$ cd /tmp/hello-git
$ git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Παρατηρούμε ότι η εργασία με ένα αποθετήριο Mercurial χρησιμοποιεί την τυπική εντολή `git clone`.
Αυτό συμβαίνει επειδή το git-remote-hg λειτουργεί σε αρκετά χαμηλό επίπεδο, χρησιμοποιώντας έναν παρόμοιο μηχανισμό με αυτόν που είναι υλοποιημένο το πρωτόκολλο HTTP/S του Git (με απομακρυσμένους βοηθούς).
Δεδομένου ότι τα Git και Mercurial έχουν σχεδιαστεί και τα δύο ώστε κάθε πελάτης να έχει ένα πλήρες αντίγραφο του ιστορικού του αποθετηρίου, αυτή η εντολή δημιουργεί έναν πλήρη κλώνο, συμπεριλαμβανομένου ολόκληρου του ιστορικού του έργου και μάλιστα το κάνει αρκετά γρήγορα.

Η εντολή `log` δείχνει δύο υποβολές, με την πιο πρόσφατη να δείχνεται από πληθώρα αναφορών.
Αποδεικνύεται ότι κάποιες από αυτές δεν είναι πραγματικά εκεί.
Ας ρίξουμε μια ματιά στο τι υπάρχει πραγματικά στον κατάλογο `.git`:

[source,console]
----
$ tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directories, 5 files
----

Git-remote-hg is trying to make things more idiomatically Git-esque, but under the hood it's managing the conceptual mapping between two slightly different systems.
The `refs/hg` directory is where the actual remote refs are stored.
For example, the `refs/hg/origin/branches/default` is a Git ref file that contains the SHA-1 starting with ``ac7955c'', which is the commit that `master` points to.
So the `refs/hg` directory is kind of like a fake `refs/remotes/origin`, but it has the added distinction between bookmarks and branches.

Το Git-remote-hg προσπαθεί να κάνει τα πράγματα πιο idiomatically Git-esque, αλλά κάτω από την κουκούλα διαχειρίζεται την εννοιολογική χαρτογράφηση μεταξύ δύο ελαφρώς διαφορετικών συστημάτων.
Ο κατάλογος "refs / hg" είναι εκεί όπου αποθηκεύονται οι πραγματικοί απομακρυσμένοι ανασυνδυασμοί.
Για παράδειγμα, το αρχείο `refs / hg / origin / branches / default` είναι ένα αρχείο ref Git που περιέχει το SHA-1 που αρχίζει με το` `ac7955c ''.
Έτσι, ο κατάλογος `refs / hg` είναι σαν ένα ψεύτικο` refs / remotes / προέλευση`, αλλά έχει την πρόσθετη διάκριση μεταξύ σελιδοδεικτών και υποκαταστημάτων.

Το αρχείο `notes / hg` είναι το σημείο εκκίνησης για τον τρόπο με τον οποίο οι git-remote-hg χάρτες Git δεσμεύουν τα hashes με τα αναγνωριστικά της Mercurial changeset.
Ας εξερευνήσουμε λίγο:

The `notes/hg` file is the starting point for how git-remote-hg maps Git commit hashes to Mercurial changeset IDs.
Let's explore a bit:

[source,console]
----
$ cat notes/hg
d4c10386...

$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -0800
committer remote-hg <> 1408066400 -0800

Notes for master

$ git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9
----

Επομένως, το `refs / notes / hg` δείχνει σε ένα δέντρο, το οποίο στη βάση δεδομένων αντικειμένων Git είναι μια λίστα με άλλα αντικείμενα με ονόματα.
Το `git ls-tree` εξάγει τη λειτουργία, τον τύπο, το hash αντικειμένου και το όνομα αρχείου για τα στοιχεία μέσα σε ένα δέντρο.
Μόλις σκάψουμε σε ένα από τα στοιχεία του δέντρου, διαπιστώνουμε ότι μέσα του είναι ένα blob που ονομάζεται `` ac9117f '' (το SHA-1 hash του commit που υποδεικνύεται από τον 'master`), με τα περιεχόμενα `` 0a04b98' ' που είναι το αναγνωριστικό της ομάδας Mercurial changeset στην κορυφή του κλάδου `default ').

So `refs/notes/hg` points to a tree, which in the Git object database is a list of other objects with names.
`git ls-tree` outputs the mode, type, object hash, and filename for items inside a tree.
Once we dig down to one of the tree items, we find that inside it is a blob named ``ac9117f'' (the SHA-1 hash of the commit pointed to by `master`), with contents ``0a04b98'' (which is the ID of the Mercurial changeset at the tip of the `default` branch).

Τα καλά νέα είναι ότι δεν χρειάζεται να ανησυχούμε για όλα αυτά.
Η τυπική ροή εργασίας δεν θα είναι πολύ διαφορετική από αυτήν με ένα απομακρυσμένο αποθετήριο Git.


Υπάρχει ένα ακόμα πράγμα που πρέπει να παρακολουθήσουμε πριν συνεχίσουμε: αγνοεί.
Το Mercurial και το Git χρησιμοποιούν έναν πολύ παρόμοιο μηχανισμό για αυτό, αλλά είναι πιθανό ότι δεν θέλουμε να δεσμευτούμε πραγματικά ένα αρχείο .gitignore σε ένα αποθετήριο Mercurial.
Ευτυχώς, ο Git έχει έναν τρόπο να αγνοήσει τα αρχεία που είναι τοπικά σε ένα χώρο αποθήκευσης στο δίσκο και η μορφή Mercurial είναι συμβατή με το Git, οπότε απλά πρέπει να το αντιγράψουμε:

There's one more thing we should attend to before we continue: ignores.
Mercurial and Git use a very similar mechanism for this, but it's likely you don't want to actually commit a `.gitignore` file into a Mercurial repository.
Fortunately, Git has a way to ignore files that's local to an on-disk repository, and the Mercurial format is compatible with Git, so you just have to copy it over:

[source,console]
----
$ cp .hgignore .git/info/exclude
----

Το αρχείο `.git/info/exclude` λειτουργεί ακριβώς όπως το `.gitignore`, αλλά δεν περιλαμβάνεται στις υποβολές.

===== Ροή εργασίας

Ας υποθέσουμε ότι έχουμε κάνει κάποια εργασία και κάναμε κάποιες υποβολές στο υποκατάστημα `master` και είστε έτοιμοι να το σπρώξουμε στο απομακρυσμένο αποθετήριο.
Εδώ φαίνεται το αποθετήριο μας:

Let's assume we've done some work and made some commits on the `master` branch, and you're ready to push it to the remote repository.
Here's what our repository looks like right now:

[source,console]
----
$ git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Ο κλάδος `master` είναι δύο υποβολές μπροστά από την αρχή / master, αλλά αυτές οι δύο υποβολές υπάρχουν μόνο στο τοπικό μας μηχάνημα.
Ας δούμε αν κάποιος άλλος έχει κάνει σημαντικό έργο την ίδια στιγμή:

Our `master` branch is two commits ahead of `origin/master`, but those two commits exist only on our local machine.
Let's see if anyone else has been doing important work at the same time:

[source,console]
----
$ git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -> origin/master
   ac7955c..df85e87  branches/default -> origin/branches/default
$ git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Εφόσον χρησιμοποιήσαμε τη σημαία `--all`, βλέπουμε τις παραπομπές` `notes '' που χρησιμοποιούνται εσωτερικά από το git-remote-hg, αλλά μπορούμε να τις αγνοήσουμε.
Τα υπόλοιπα είναι αυτά που περιμέναμε. Η αρχή "master / master" έχει προχωρήσει με μία υποβολή και η ιστορία μας έχει αποκλίνει τώρα.
Σε αντίθεση με τα άλλα συστήματα με τα οποία εργαζόμαστε σε αυτό το κεφάλαιο, το Mercurial είναι ικανό να χειριστεί τις συγχωνεύσεις, οπότε δεν πρόκειται να κάνουμε τίποτα φανταχτερό.

Since we used the `--all` flag, we see the ``notes'' refs that are used internally by git-remote-hg, but we can ignore them.
The rest is what we expected; `origin/master` has advanced by one commit, and our history has now diverged.
Unlike the other systems we work with in this chapter, Mercurial is capable of handling merges, so we're not going to do anything fancy.

[source,console]
----
$ git merge origin/master
Auto-merging hello.c
Merge made by the 'recursive' strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master'
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard "hello, world" program
----

Τέλεια.
Εκτελούμε τις δοκιμές και όλα πετυχαίνουν, οπότε είμαστε έτοιμοι να μοιραστούμε το έργο μας με την υπόλοιπη ομάδα:

[source,console]
----
$ git push
To hg::/tmp/hello
   df85e87..0c64627  master -> master
----

Αυτό ήταν!
Εάν ρίξουμε μια ματιά στο αποθετήριο Mercurial, θα δούμε ότι έκανε αυτό που περιμέναμε:

[source,console]
----
$ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

Το σύνολο των αλλαγών που έγιναν _2_ έγινε από την Mercurial και οι αλλαγέςets αριθμημένες _3_ και _4_ έγιναν από το git-remote-hg, πιέζοντας τις υποβολές που έγιναν με το Git.

The changeset numbered _2_ was made by Mercurial, and the changesets numbered _3_ and _4_ were made by git-remote-hg, by pushing commits made with Git.

===== Υποκαταστήματα και σελιδοδείκτες

Το Git έχει μόνο ένα είδος υποκαταστήματος: μια αναφορά που μετακινείται όταν γίνονται υποβολές.
Στο Mercurial, αυτό το είδος μίας αναφοράς ονομάζεται «σελιδοδείκτης», και συμπεριφέρεται με τον ίδιο τρόπο όπως ένας κλάδος Git.

Git has only one kind of branch: a reference that moves when commits are made.
In Mercurial, this kind of a reference is called a ``bookmark,'' and it behaves in much the same way as a Git branch.

Η έννοια του Mercurial ενός `` υποκαταστήματος '' είναι πιο βαρέων βαρών.
Το υποκατάστημα στο οποίο πραγματοποιείται ένα changeet καταγράφεται με το changeset_, το οποίο σημαίνει ότι θα βρίσκεται πάντα στο ιστορικό αποθετηρίου.
Ακολουθεί ένα παράδειγμα υποβολής που έγινε στον τομέα ανάπτυξης:

Mercurial's concept of a ``branch'' is more heavyweight.
The branch that a changeset is made on is recorded _with the changeset_, which means it will always be in the repository history.
Here's an example of a commit that was made on the `develop` branch:

[source,console]
----
$ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben@straub.cc>
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation
----

Παρατηρούμε τη γραμμή που αρχίζει με `` branch ''.
Το Git δεν μπορεί να αναπαράγει αυτό το πράγμα (και δεν χρειάζεται να είναι και οι δύο τύποι υποκαταστημάτων μπορούν να αναπαρασταθούν ως Git ref), αλλά το git-remote-hg πρέπει να κατανοήσει τη διαφορά, επειδή το Mercurial ενδιαφέρεται.

Note the line that begins with ``branch''.
Git can't really replicate this (and doesn't need to; both types of branch can be represented as a Git ref), but git-remote-hg needs to understand the difference, because Mercurial cares.

Η δημιουργία των σελιδοδεικτών στο Mercurial είναι τόσο εύκολη όσο και η δημιουργία κλάδων στο Git.
Στην πλευρά του Git:

[source,console]
----
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -> featureA
----

Αυτό ήταν όλο.
Από την πλευρά του Mercurial, μοιάζει με αυτό:

[source,console]
----
$ hg bookmarks
   featureA                  5:bd5ac26f11f9
$ hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

Παρατηρούμε τη νέα ετικέτα `[featureA]` στην αναθεώρηση 5.
Αυτά λειτουργούν ακριβώς όπως τα υποκαταστήματα Git στην πλευρά του Git, με μια εξαίρεση: δεν μπορούμε να διαγράψουμε ένα σελιδοδείκτη από την πλευρά του Git (αυτό είναι ένας περιορισμός των απομακρυσμένων βοηθών).

Μπορούμε να εργαστούμε σε ένα κλάδο ``βαρέων βαρών'' Mercurial επίσης: απλά βάλτε ένα υποκατάστημα στο χώρο namespace `branches ':

Note the new `[featureA]` tag on revision 5.
These act exactly like Git branches on the Git side, with one exception: you can't delete a bookmark from the Git side (this is a limitation of remote helpers).

You can work on a ``heavyweight'' Mercurial branch also: just put a branch in the `branches` namespace:

[source,console]
----
$ git checkout -b branches/permanent
Switched to a new branch 'branches/permanent'
$ vi Makefile
$ git commit -am 'A permanent change'
$ git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -> branches/permanent
----

Ακολουθεί πώς μοιάζει από την πλευρά του Mercurial:

[source,console]
----
$ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben@straub.cc>
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben@straub.cc>
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben@straub.cc>
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch 'origin/master'
[...]
----

The branch name ``permanent'' was recorded with the changeset marked _7_.

Το όνομα κλάδου ``μόνιμο'' καταγράφηκε με το changeet σημειωμένο _7_.

Από την πλευρά του Git, η συνεργασία με οποιοδήποτε από αυτά τα στυλ υποκαταστήματος είναι ίδια: απλώς ελέγξτε, διεκπεραιώστε, φέρουμε, συγχωνεύστε, τραβήξτε και πιέστε όπως θα κάνατε κανονικά.
Ένα πράγμα που πρέπει να ξέρουμε είναι ότι το Mercurial δεν υποστηρίζει την επανεγγραφή ιστορικού, προσθέτοντας μόνο σε αυτό.
Ακολουθεί η εμφάνιση του Mercurial αποθετηρίου μας μετά από μια διαδραστική αναζωογόνηση και μια ώθηση:

From the Git side, working with either of these branch styles is the same: just checkout, commit, fetch, merge, pull, and push as you normally would.
One thing you should know is that Mercurial doesn't support rewriting history, only adding to it.
Here's what our Mercurial repository looks like after an interactive rebase and a force-push:

[source,console]
----
$ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch 'origin/master'
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

Οι αλλαγές_8_, _9_ και _10_ έχουν δημιουργηθεί και ανήκουν στον «μόνιμο» κλάδο, αλλά οι παλιές αλλαγές είναι ακόμα εκεί.
Αυτό μπορεί να είναι * πολύ * σύγχυση για τους συμπαίκτες μας που χρησιμοποιούν Mercurial, οπότε προσπαθήστε να το αποφύγουμε.

Changesets _8_, _9_, and _10_ have been created and belong to the `permanent` branch, but the old changesets are still there.
This can be *very* confusing for your teammates who are using Mercurial, so try to avoid it.


===== Ανακεφαλαίωση Mercurial

Τα Git και Mercurial είναι αρκετά παρόμοια ώστε η εργασία πέρα ​​από τα όρια είναι αρκετά ανώδυνη.
Εάν αποφύγουμε να αλλάξουμε την ιστορία που έχει αφήσει το μηχάνημά μας (όπως συνήθως συνιστάται), ίσως να μην γνωρίζουμε καν ότι το άλλο άκρο είναι Mercurial.

Git and Mercurial are similar enough that working across the boundary is fairly painless.
If you avoid changing history that's left your machine (as is generally recommended), you may not even be aware that the other end is Mercurial.
