[[_interactive_staging]]
=== Interactive Staging

Το Git έρχεται με μερικά σενάρια που διευκολύνουν μερικές εντολές γραμμής εντολών.
Εδώ θα δούμε μερικές διαδραστικές εντολές που μπορούν να μας βοηθήσουν να δημιουργήσουμε εύκολα υποβολές μας για να συμπεριλάβουμε μόνο ορισμένους συνδυασμούς και τμήματα αρχείων.
Αυτά τα εργαλεία είναι πολύ χρήσιμα αν τροποποιήσουμε μια δέσμη αρχείων και στη συνέχεια αποφασίσουμε ότι θέλουμε αυτές οι αλλαγές να είναι σε αρκετές εστιασμένες υποβολές και όχι σε μια μεγάλη ακατάστατη διαπραγμάτευση.
Με αυτόν τον τρόπο μπορούμε να βεβαιωθούμε ότι οι υποβολές μας είναι λογικά ξεχωριστές αλλαγές και μπορούν εύκολα να αναθεωρηθούν από τους προγραμματιστές που συνεργάζονται μαζί μας.
Αν εκτελέσουμε το `git add` με την επιλογή` -i` ή `--interactive`, το Git μεταβαίνει σε λειτουργία διαδραστικού shell, εμφανίζοντας κάτι σαν αυτό:

Git comes with a couple of scripts that make some command-line tasks easier.
Here, you’ll look at a few interactive commands that can help you easily craft your commits to include only certain combinations and parts of files.
These tools are very helpful if you modify a bunch of files and then decide that you want those changes to be in several focused commits rather than one big messy commit.
This way, you can make sure your commits are logically separate changesets and can be easily reviewed by the developers working with you.
If you run `git add` with the `-i` or `--interactive` option, Git goes into an interactive shell mode, displaying something like this:

[source,console]
----
$ git add -i
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb

*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now>
----

You can see that this command shows you a much different view of your staging area – basically the same information you get with `git status` but a bit more succinct and informative.
It lists the changes you’ve staged on the left and unstaged changes on the right.

Μπορούμε να δούμε ότι αυτή η εντολή μας δείχνει μια πολύ διαφορετική άποψη της περιοχής σταδιοδρομίας μας - βασικά τις ίδιες πληροφορίες που παίρνουμε με την κατάσταση `git ', αλλά λίγο πιο σύντομη και ενημερωτική.
Εμφανίζει τις αλλαγές που έχουμε ορίσει στα αριστερά και τις μη στατικές αλλαγές στα δεξιά.

Μετά από αυτό έρχεται ένα τμήμα εντολών.
Εδώ μπορούμε να κάνουμε πολλά πράγματα, όπως σταδιακή αρχειοθέτηση, αποσυμπίεση αρχείων, σταδιοποίηση τμημάτων αρχείων, προσθήκη μη κρυπτογραφημένων αρχείων και εμφάνιση διαφορών από αυτό που έχει πραγματοποιηθεί.

After this comes a Commands section.
Here you can do a number of things, including staging files, unstaging files, staging parts of files, adding untracked files, and seeing diffs of what has been staged.

==== Staging and Unstaging Files

Εάν πληκτρολογήσουμε `2` ή` u` στην ερώτηση `Τι τώρα> ', η δέσμη ενεργειών μάς προτρέπει για τα αρχεία που θέλουμε να εμφανιστούν:

If you type `2` or `u` at the `What now>` prompt, the script prompts you for which files you want to stage:

[source,console]
----
What now> 2
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>
----

Για να οργανώσουμε τα αρχεία TODO και index.html, μπορούμε να πληκτρολογήσουμε τους αριθμούς:

To stage the TODO and index.html files, you can type the numbers:

[source,console]
----
Update>> 1,2
           staged     unstaged path
* 1:    unchanged        +0/-1 TODO
* 2:    unchanged        +1/-1 index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Update>>
----

Το `` `δίπλα σε κάθε αρχείο σημαίνει ότι το αρχείο έχει επιλεγεί για να διορθωθεί.
Εάν πατήσουμε το πλήκτρο Enter αφού πληκτρολογήσουμε τίποτα στη γραμμή `Ενημέρωση >>`, το Git παίρνει οτιδήποτε έχει επιλεγεί και το βαθμολογεί για μας:

The `*` next to each file means the file is selected to be staged.
If you press Enter after typing nothing at the `Update>>` prompt, Git takes anything selected and stages it for you:

[source,console]
----
Update>>
updated 2 paths

*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 1
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
----


Τώρα μπορούμε να δούμε ότι τα αρχεία TODO και index.html είναι σταδιακά και το αρχείο simplegit.rb εξακολουθεί να είναι ασταθές.
Αν θέλουμε να αποσυνδέσουμε το αρχείο TODO σε αυτό το σημείο, χρησιμοποιήστε την επιλογή `3` ή` r` (για επαναφορά):

Now you can see that the TODO and index.html files are staged and the simplegit.rb file is still unstaged.
If you want to unstage the TODO file at this point, you use the `3` or `r` (for revert) option:

[source,console]
----
*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 3
           staged     unstaged path
  1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> 1
           staged     unstaged path
* 1:        +0/-1      nothing TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
Revert>> [enter]
reverted one path
----

Ανατρέχοντας ξανά στην κατάσταση Git, μπορούμε να δούμε ότι έχουμε αποσυμπιεστεί το αρχείο TODO:

Looking at your Git status again, you can see that you’ve unstaged the TODO file:

[source,console]
----
*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 1
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:    unchanged        +5/-1 lib/simplegit.rb
----

Για να δούμε τη διαφορά από αυτό που έχουμε ορίσει, μπορούμε να χρησιμοποιήσουμε την εντολή `6` ή` d` (για diff).
Μας παρουσιάζει μια λίστα με τα σταδιακά αρχεία μας και μπορούμε να επιλέξουμε εκείνα για τα οποία θέλουμε να δούμε τη σταδιακή diff.
Αυτό μοιάζει πολύ με τον ορισμό του `git diff - cached` στη γραμμή εντολών:

To see the diff of what you’ve staged, you can use the `6` or `d` (for diff) command.
It shows you a list of your staged files, and you can select the ones for which you would like to see the staged diff.
This is much like specifying `git diff --cached` on the command line:

[source,console]
----
*** Commands ***
  1: status     2: update      3: revert     4: add untracked
  5: patch      6: diff        7: quit       8: help
What now> 6
           staged     unstaged path
  1:        +1/-1      nothing index.html
Review diff>> 1
diff --git a/index.html b/index.html
index 4d07108..4335f49 100644
--- a/index.html
+++ b/index.html
@@ -16,7 +16,7 @@ Date Finder

 <p id="out">...</p>

-<div id="footer">contact : support@github.com</div>
+<div id="footer">contact : email.support@github.com</div>

 <script type="text/javascript">
----

Με αυτές τις βασικές εντολές, μπορούμε να χρησιμοποιήσουμε τη διαδραστική λειτουργία προσθήκης για να ασχοληθούμε με την περιοχή στάσης μας λίγο πιο εύκολα.

With these basic commands, you can use the interactive add mode to deal with your staging area a little more easily.

==== Staging Patches

Είναι επίσης δυνατό για το Git να προβάλλει ορισμένα τμήματα αρχείων και όχι τα υπόλοιπα.
Για παράδειγμα, αν κάνουμε δύο αλλαγές στο αρχείο simplegit.rb και θέλουμε να οργανώσουμε ένα από αυτά και όχι το άλλο, αυτό είναι πολύ εύκολο στο Git.
Από τη διαλογική ερώτηση, πληκτρολογήστε `5` ή` p` (για patch).
Το Git θα μας ρωτήσει ποια αρχεία θα θέλαμε να τακτοποιήσουμε εν μέρει. τότε, για κάθε τμήμα των επιλεγμένων αρχείων, θα εμφανιστούν τα κομμάτια του διαφορικού αρχείου και θα ρωτήσουμε αν θα θέλαμε να τα φτιάξουμε, ένα προς ένα:

It’s also possible for Git to stage certain parts of files and not the rest.
For example, if you make two changes to your simplegit.rb file and want to stage one of them and not the other, doing so is very easy in Git.
From the interactive prompt, type `5` or `p` (for patch).
Git will ask you which files you would like to partially stage; then, for each section of the selected files, it will display hunks of the file diff and ask if you would like to stage them, one by one:

[source,console]
----
diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index dd5ecc4..57399e0 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -22,7 +22,7 @@ class SimpleGit
   end

   def log(treeish = 'master')
-    command("git log -n 25 #{treeish}")
+    command("git log -n 30 #{treeish}")
   end

   def blame(path)
Stage this hunk [y,n,a,d,/,j,J,g,e,?]?
----

Έχουμε πολλές επιλογές σε αυτό το σημείο.
Η πληκτρολόγηση του "?" Εμφανίζει μια λίστα με αυτά που μπορούμε να κάνετε:

You have a lot of options at this point.
Typing `?` shows a list of what you can do:

[source,console]
----
Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ?
y - stage this hunk
n - do not stage this hunk
a - stage this and all the remaining hunks in the file
d - do not stage this hunk nor any of the remaining hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
----

Γενικά, θα πληκτρολογήσουμε `y` ή` n` αν θέλουμε να οργανώσουμε κάθε hunk, αλλά η παρουσίαση όλων σε ορισμένα αρχεία ή η παράκαμψη μιας απόφασης hunk μέχρι αργότερα μπορεί επίσης να είναι χρήσιμη.
Εάν διαβάσουμε ένα μέρος του αρχείου και αφήσουμε ένα άλλο κομμάτι μη σταδιακά, η κατάστασή μας θα εμφανιστεί ως εξής:

Generally, you’ll type `y` or `n` if you want to stage each hunk, but staging all of them in certain files or skipping a hunk decision until later can be helpful too.
If you stage one part of the file and leave another part unstaged, your status output will look like this:

[source,console]
----
What now> 1
           staged     unstaged path
  1:    unchanged        +0/-1 TODO
  2:        +1/-1      nothing index.html
  3:        +1/-1        +4/-0 lib/simplegit.rb
----

Η κατάσταση του αρχείου simplegit.rb είναι ενδιαφέρουσα.
Σας δείχνει ότι μια σειρά από γραμμές είναι σταδιακή και ένα ζευγάρι είναι unstaged.
Ορίσαμε μερικώς αυτό το αρχείο.
Σε αυτό το σημείο, μπορούμε να πραγματοποιήσουμε έξοδο από το διαδραστικό script προσθήκης και να εκτελέσουμε το `git commit 'για να υποβάλουμε τα μερικά σταδιακά αρχεία.

The status of the simplegit.rb file is interesting.
It shows you that a couple of lines are staged and a couple are unstaged.
You’ve partially staged this file.
At this point, you can exit the interactive adding script and run `git commit` to commit the partially staged files.

You also don’t need to be in interactive add mode to do the partial-file staging – you can start the same script by using `git add -p` or `git add --patch` on the command line.

Επίσης, δεν χρειάζεται να είστε σε λειτουργία διαδραστικής προσθήκης για να πραγματοποιήσουμε τη σταδιακή κατάργηση αρχείων -- μπορούμε να ξεκινήσουμε την ίδια δέσμη ενεργειών χρησιμοποιώντας το `git add -p` ή `git add --patch` στη γραμμή εντολών.

Επιπλέον, μπορούμε να χρησιμοποιήσουμε τη λειτουργία patch για την μερική επαναφορά των αρχείων με την εντολή `reset - patch ', για τον έλεγχο των τμημάτων των αρχείων με την εντολή' checkout - patch 'και για την αποθήκευση τμημάτων των αρχείων με το` stash save --patch εντολή.
Θα πάμε σε περισσότερες λεπτομέρειες για καθένα από αυτά καθώς θα φτάσουμε σε πιο προηγμένες χρήσεις αυτών των εντολών.

Furthermore, you can use patch mode for partially resetting files with the `reset --patch` command, for checking out parts of files with the `checkout --patch` command and for stashing parts of files with the `stash save --patch` command.
We'll go into more details on each of these as we get to more advanced usages of these commands.
