[[_searching]]
=== Searching

Με σχεδόν κάθε κώδικα μεγέθους, θα πρέπει συχνά να εντοπίσουμε πού καλείται ή καθορίζεται μια λειτουργία ή να βρούμε το ιστορικό μιας μεθόδου.
Το Git παρέχει μερικά χρήσιμα εργαλεία για την αναζήτηση στον κώδικα και υποβάλλει τα στοιχεία που είναι αποθηκευμένα στη βάση δεδομένων του γρήγορα και εύκολα.
Θα περάσουμε μερικά από αυτά.

With just about any size codebase, you'll often need to find where a function is called or defined, or find the history of a method.
Git provides a couple of useful tools for looking through the code and commits stored in its database quickly and easily.
We'll go through a few of them.

[[_git_grep]]
==== Git Grep

Git ships with a command called `grep` that allows you to easily search through any committed tree or the working directory for a string or regular expression.
For these examples, we'll look through the Git source code itself.

Το Git συνοδεύεται από μια εντολή που ονομάζεται grep και μας επιτρέπει να κάνουμε εύκολα αναζήτηση μέσα από οποιοδήποτε δέντρο έχει υποβληθεί ή τον κατάλογο εργασίας για μια συμβολοσειρά ή κανονική έκφραση.
Για αυτά τα παραδείγματα, θα εξετάσουμε τον ίδιο τον πηγαίο κώδικα Git.

Από προεπιλογή, θα εξετάσει τα αρχεία στον κατάλογο εργασίας μας.
Μπορούμε να περάσουμε το `-n` για να εκτυπώσουμε τους αριθμούς γραμμών όπου ο Git βρήκε ταίριασμα.

By default, it will look through the files in your working directory.
You can pass `-n` to print out the line numbers where Git has found matches.

[source,console]
----
$ git grep -n gmtime_r
compat/gmtime.c:3:#undef gmtime_r
compat/gmtime.c:8:      return git_gmtime_r(timep, &result);
compat/gmtime.c:11:struct tm *git_gmtime_r(const time_t *timep, struct tm *result)
compat/gmtime.c:16:     ret = gmtime_r(timep, result);
compat/mingw.c:606:struct tm *gmtime_r(const time_t *timep, struct tm *result)
compat/mingw.h:162:struct tm *gmtime_r(const time_t *timep, struct tm *result);
date.c:429:             if (gmtime_r(&now, &now_tm))
date.c:492:             if (gmtime_r(&time, tm)) {
git-compat-util.h:721:struct tm *git_gmtime_r(const time_t *, struct tm *);
git-compat-util.h:723:#define gmtime_r git_gmtime_r
----

There are a number of interesting options you can provide the `grep` command.

Υπάρχουν πολλές ενδιαφέρουσες επιλογές που μπορούμε να δώσουμε στην εντολή `grep`.

Για παράδειγμα, αντί για την προηγούμενη κλήση, μπορούμε να έχουμε το Git να συνοψίζει την έξοδο, δείχνοντας ακριβώς ποια αρχεία αντιστοιχούν και πόσες αντιστοιχίες υπήρχαν σε κάθε αρχείο με την επιλογή `--count ':

For instance, instead of the previous call, you can have Git summarize the output by just showing you which files matched and how many matches there were in each file with the `--count` option:

[source,console]
----
$ git grep --count gmtime_r
compat/gmtime.c:4
compat/mingw.c:1
compat/mingw.h:1
date.c:2
git-compat-util.h:2
----

Αν θέλουμε να δούμε ποια μέθοδο ή λειτουργία πιστεύει ότι έχει βρει έναν αγώνα μέσα, μπορούμε να περάσουμε `-p`:

If you want to see what method or function it thinks it has found a match in, you can pass `-p`:

[source,console]
----
$ git grep -p gmtime_r *.c
date.c=static int match_multi_number(unsigned long num, char c, const char *date, char *end, struct tm *tm)
date.c:         if (gmtime_r(&now, &now_tm))
date.c=static int match_digit(const char *date, struct tm *tm, int *offset, int *tm_gmt)
date.c:         if (gmtime_r(&time, tm)) {
----

Έτσι, εδώ βλέπουμε ότι το `gmtime_r` καλείται στις λειτουργίες` match_multi_number` και `match_digit` στο αρχείο date.c.

So here we can see that `gmtime_r` is called in the `match_multi_number` and `match_digit` functions in the date.c file.

You can also look for complex combinations of strings with the `--and` flag, which makes sure that multiple matches are in the same line.
For instance, let's look for any lines that define a constant with either the strings ``LINK'' or ``BUF_MAX'' in them in the Git codebase in an older 1.8.0 version.

Μπορούμε επίσης να αναζητήσουμε σύνθετους συνδυασμούς συμβολοσειρών με τη σημαία `- και`, που διασφαλίζει ότι οι πολλαπλές αντιστοιχίσεις βρίσκονται στην ίδια γραμμή.
Για παράδειγμα, ας δούμε τις γραμμές που ορίζουν μια σταθερά με τις συμβολοσειρές `` LINK '' ή `` BUF_MAX '' σε αυτές στη βάση κώδικα Git σε μια παλαιότερη έκδοση 1.8.0.

Εδώ θα χρησιμοποιήσουμε επίσης τις επιλογές `- break 'και` - head' που βοηθούν στη διάσπαση της εξόδου σε πιο ευανάγνωστη μορφή.

Here we'll also use the `--break` and `--heading` options which help split up the output into a more readable format.

[source,console]
----
$ git grep --break --heading \
    -n -e '#define' --and \( -e LINK -e BUF_MAX \) v1.8.0
v1.8.0:builtin/index-pack.c
62:#define FLAG_LINK (1u<<20)

v1.8.0:cache.h
73:#define S_IFGITLINK  0160000
74:#define S_ISGITLINK(m)       (((m) & S_IFMT) == S_IFGITLINK)

v1.8.0:environment.c
54:#define OBJECT_CREATION_MODE OBJECT_CREATION_USES_HARDLINKS

v1.8.0:strbuf.c
326:#define STRBUF_MAXLINK (2*PATH_MAX)

v1.8.0:symlinks.c
53:#define FL_SYMLINK  (1 << 2)

v1.8.0:zlib.c
30:/* #define ZLIB_BUF_MAX ((uInt)-1) */
31:#define ZLIB_BUF_MAX ((uInt) 1024 * 1024 * 1024) /* 1GB */
----

Η εντολή git grep έχει μερικά πλεονεκτήματα έναντι των κανονικών εντολών αναζήτησης όπως `grep` και` ack`.
Το πρώτο είναι ότι είναι πολύ γρήγορο, το δεύτερο είναι ότι μπορούμε να ψάξουμε μέσα σε οποιοδήποτε δέντρο στο Git, όχι μόνο στον κατάλογο εργασίας.
Όπως είδαμε στο παραπάνω παράδειγμα, αναζητήσαμε όρους σε μια παλαιότερη έκδοση του πηγαίου κώδικα Git, όχι στην έκδοση που εκκρεμούσε αυτή τη στιγμή.

The `git grep` command has a few advantages over normal searching commands like `grep` and `ack`.
The first is that it's really fast, the second is that you can search through any tree in Git, not just the working directory.
As we saw in the above example, we looked for terms in an older version of the Git source code, not the version that was currently checked out.

==== Αναζήτηση στο μητρώο του Git

Perhaps you're looking not for **where** a term exists, but **when** it existed or was introduced.
The `git log` command has a number of powerful tools for finding specific commits by the content of their messages or even the content of the diff they introduce.

Ίσως δεν ψάχνουμε για ** όπου ** υπάρχει ένας όρος, αλλά ** όταν ** υπήρχε ή εισήχθη.
Η εντολή `git log` έχει πολλά ισχυρά εργαλεία για την εξεύρεση συγκεκριμένων υποβολών από το περιεχόμενο των μηνυμάτων τους ή ακόμη και από το περιεχόμενο των διαφορών που εισάγουν.

Αν θέλουμε να μάθουμε, για παράδειγμα, όταν η σταθερά `ZLIB_BUF_MAX` αρχικά εισήχθη, μπορούμε να πούμε στο Git να μας δείξει μόνο τις υποβολές που είτε προστέθηκαν είτε αφαιρέθηκαν από αυτή τη συμβολοσειρά με την επιλογή` -S`.

If we want to find out for example when the `ZLIB_BUF_MAX` constant was originally introduced, we can tell Git to only show us the commits that either added or removed that string with the `-S` option.

[source,console]
----
$ git log -SZLIB_BUF_MAX --oneline
e01503b zlib: allow feeding more than 4GB in one go
ef49a7a zlib: zlib can only process 4GB at a time
----

If we look at the diff of those commits we can see that in `ef49a7a` the constant was introduced and in `e01503b` it was modified.

Αν δούμε τη διαφορά αυτών των υποβολών μπορούμε να δούμε ότι στο «ef49a7a» η σταθερά εισήχθη και στο «e01503b» τροποποιήθηκε.

Αν χρειάζεται να είστε πιο συγκεκριμένοι, μπορούμε να παρέχουμε μια κανονική έκφραση για αναζήτηση με την επιλογή `-G`.

If you need to be more specific, you can provide a regular expression to search for with the `-G` option.

===== Line Log Search

Another fairly advanced log search that is insanely useful is the line history search.
This is a fairly recent addition and not very well known, but it can be really helpful.
It is called with the `-L` option to `git log` and will show you the history of a function or line of code in your codebase.

Μια άλλη αρκετά προηγμένη αναζήτηση ιστορικού που είναι παράλογα χρήσιμη είναι η αναζήτηση ιστορικού γραμμής.
Αυτή είναι μια αρκετά πρόσφατη προσθήκη και δεν είναι πολύ γνωστή, αλλά μπορεί να είναι πραγματικά χρήσιμη.
Καλείται με την επιλογή `-L` στο` git log` και θα μας δείξει το ιστορικό μιας συνάρτησης ή μιας γραμμής κώδικα στον κωδικό μας.

Για παράδειγμα, αν θέλαμε να δούμε κάθε αλλαγή που έγινε στη συνάρτηση `git_deflate_bound` στο αρχείο` zlib.c`, θα μπορούσαμε να εκτελέσουμε το `git log -L: git_deflate_bound: zlib.c`.
Αυτό θα προσπαθήσει να καταλάβει ποια είναι τα όρια αυτής της λειτουργίας και στη συνέχεια να κοιτάξει μέσα από την ιστορία και να μας δείξει κάθε αλλαγή που έγινε στη λειτουργία ως μια σειρά από μπαλώματα όταν η λειτουργία δημιουργήθηκε για πρώτη φορά.

For example, if we wanted to see every change made to the function `git_deflate_bound` in the `zlib.c` file, we could run `git log -L :git_deflate_bound:zlib.c`.
This will try to figure out what the bounds of that function are and then look through the history and show us every change that was made to the function as a series of patches back to when the function was first created.

[source,console]
----
$ git log -L :git_deflate_bound:zlib.c
commit ef49a7a0126d64359c974b4b3b71d7ad42ee3bca
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:52:15 2011 -0700

    zlib: zlib can only process 4GB at a time

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -85,5 +130,5 @@
-unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+unsigned long git_deflate_bound(git_zstream *strm, unsigned long size)
 {
-       return deflateBound(strm, size);
+       return deflateBound(&strm->z, size);
 }


commit 225a6f1068f71723a910e8565db4e252b3ca21fa
Author: Junio C Hamano <gitster@pobox.com>
Date:   Fri Jun 10 11:18:17 2011 -0700

    zlib: wrap deflateBound() too

diff --git a/zlib.c b/zlib.c
--- a/zlib.c
+++ b/zlib.c
@@ -81,0 +85,5 @@
+unsigned long git_deflate_bound(z_streamp strm, unsigned long size)
+{
+       return deflateBound(strm, size);
+}
+
----

Αν το Git δεν μπορεί να καταλάβει πώς να ταιριάζει με κάποια λειτουργία ή μέθοδο στη γλώσσα προγραμματισμού μας, μπορούμε επίσης να τον δώσουμε ένα regex.
Για παράδειγμα, αυτό θα έκανε το ίδιο πράγμα: `git log -L '/ unsigned long git_deflate_bound /', / ^} /: zlib.c`.
Θα μπορούσαμε επίσης να του δώσουμε μια σειρά από γραμμές ή έναν μοναδικό αριθμό γραμμής και θα έχουμε το ίδιο είδος εξόδου.

If Git can't figure out how to match a function or method in your programming language, you can also provide it a regex.
For example, this would have done the same thing: `git log -L '/unsigned long git_deflate_bound/',/^}/:zlib.c`.
You could also give it a range of lines or a single line number and you'll get the same sort of output.
