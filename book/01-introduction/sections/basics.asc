=== Git Grundlagen

Was also ist Git, in kurzen Worten?
Es ist wichtig, den folgenden Abschnitt zu verstehen, in dem es um die grundlegenden Konzepte von Git geht. Das wird Sie in die Lage versetzen, Git einfacher und effektiver anzuwenden. 
Versuchen Sie Ihr vorhandenes Wissen über andere Versionsverwaltungssysteme, wie Subversion oder Perforce, beiseite zu schieben, während Sie Git kennenlernen. Wenn Sie diesen Ratschlag befolgen, wird es Ihnen an vielen Stellen leichter fallen und die feinen Unterschiede zu anderen Versionsverwaltungssysteme werden Sie nicht so einfach durcheinanderbringen.
Git speichert und verwaltet Information deutlich anders als andere Systeme, auch wenn die Benutzerschnittstelle relativ ähnlich wirkt. Diese Unterschiede zu verstehen wird Ihnen helfen, Verwirrung bei der Anwendung von Git zu vermeiden.(((Subversion)))(((Perforce)))

==== Snapshots und nicht die Unterschiede

Der Hauptunterschied zwischen Git und anderen Versionsverwaltungssystemen (insbesondere auch Subversion und vergleichbare Systeme) besteht in der Art und Weise wie Git die Daten betrachtet.
Die meisten anderen Systeme speichern Information, als eine fortlaufende Liste von Änderungen an Dateien (es werden die Unterschiede gesammelt und gespeichert).
Diese Systeme (CVS, Subversion, Perforce, Bazaar usw.) betrachten die Informationen, die sie verwalten, als eine Menge von Dateien und die Änderungen, die über die Zeit hinweg an einzelnen Dateien vorgenommen werden.

.Speichern von Daten als Änderung an einzelnen Dateien auf Basis einer Ursprungsdatei.
image::images/deltas.png[Storing data as changes to a base version of each file.]

Git arbeitet nicht auf diese Art und Weise.
Stattdessen betrachtet Git seine Daten eher als eine Reihe von Snapshots eines Mini-Dateisystems.
Jedes Mal, wenn Sie committen, das heißt den gegenwärtigen Status Ihres Projekts als eine Version in Git speichern, sichert Git den Zustand sämtlicher Dateien in diesem Moment und macht sozusagen ein Schnappschuss (engl. Snapshot) von all Ihren Daten. Zusätzlich speichert Git eine Referenz auf diesen Snapshot.
Um dies möglichst effizient und schnell tun zu können, kopiert Git unveränderte Dateien nicht, sondern legt lediglich eine Verknüpfung zu der vorherigen Version der Datei an.
Das folgende Bild soll diese Vorgehensweise verdeutlichen.

.Git speichert die Daten-Historie eines Projekts in Form von Snapshots.
image::images/snapshots.png[Git stores data as snapshots of the project over time.]

Dies ist ein wichtiger Unterschied zwischen Git und praktisch allen anderen Versionsverwaltungssystemen.
In Git wurden daher fast alle Aspekte der Versionsverwaltung neu überdacht, die in anderen Systemen mehr oder weniger von ihrer jeweiligen Vorgängergeneration übernommen worden waren. 
Git arbeitet im Großen und Ganzen eher wie ein mit einigen unglaublich mächtigen Werkzeugen ausgerüstetes Mini-Dateisystem, statt nur als Versionsverwaltungssystem. Auf einige der Vorteile, die es mit sich bringt, Daten in dieser Weise zu verwalten, werden wir in Kapitel <<_git_branching>> eingehen, wenn wir das Git Branching Konzept kennenlernen.

==== Fast jede Funktion arbeitet lokal

Die meisten Befehle in Git benötigen nur die lokalen Dateien und Ressourcen auf einem PC, um zu funktionieren. In erster Linie werden keine Informationen von einem anderen Rechner im Netzwerk benötigt.
Wenn Sie bisher mit einem CVCS gearbeitet haben, das für die meisten Operationen einen langsamen Netzwerkzugriff benötigt hat, dann wird dieser Aspekt Sie im Glauben lassen, dass Ihr PC auf einmal mit Lichtgeschwindigkeit ausgestattet wurde.
Die allermeisten Operationen können nahezu ohne jede Verzögerung ausgeführt werden, da die vollständige Historie eines Projekts bereits auf dem jeweiligen Rechner verfügbar ist.

Um beispielsweise die Historie des Projekts zu durchsuchen, braucht Git sie nicht von einem externen Server zu holen – es liest diese einfach aus der lokalen Datenbank.
Das heißt, die vollständige Projekthistorie ist ohne jede Verzögerung verfügbar.
Wenn man sich die Änderungen einer aktuellen Version einer Datei im Vergleich zu vor einem Monat, anschauen möchte, dann kann Git den Stand von vor einem Monat in der lokalen Historie nachschlagen und einen lokalen Vergleich zur vorliegenden Datei durchführen. Für diesen Anwendungsfall benötigt Git keinen externen Server, weder um Dateien dort nachzuschlagen, noch um Unterschiede dort bestimmen zu lassen.

Dies bedeutet natürlich außerdem, dass es fast nichts gibt, was man nicht tun kann, nur weil man gerade offline ist oder keinen Zugriff auf ein VPN hat.
Wenn man also gerade im Flugzeug oder Zug ein wenig arbeiten will, kann man problemlos seine Arbeit einchecken und dann wenn man wieder mit einem Netzwerk verbunden ist, die Dateien auf einen Server hochladen.
Wenn man zu Hause sitzt, aber der VPN Client gerade mal wieder nicht funktioniert, kann man immer noch arbeiten.
Bei vielen anderen Systemen wäre dies unmöglich oder äußerst kompliziert umzusetzen.
Wenn man zum Beispiel mit Perforce arbeitet, kann man nicht sonderlich viel tun, solange man nicht mit dem Server verbunden ist. In Subversion und CVS kann man in diesem Fall zwar Dateien bearbeiten, aber das Einchecken der Daten ist nicht möglich, da der entsprechende Server und damit auch die Datenbank offline sind.
Das mag auf den ersten Blick nicht nach einem großen Problem aussehen, aber Sie werden überrascht sein, was für einen großen Unterschied das ausmachen kann.

==== Git stellt Integrität sicher

Von allen zu speichernden Daten berechnet Git Prüfsummen (engl. checksum) und speichert diese als Referenz zusammen mit den Daten ab.
Das macht es unmöglich, dass sich Inhalte von Dateien oder Verzeichnissen ändern, ohne dass Git das mitbekommt. 
Git basiert auf dieser Funktionalität und sie ist ein integraler Teil der Git Philosophie. 
Man kann Informationen deshalb z.B. nicht während der Übermittlung verlieren oder unwissentlich beschädigte Dateien verwenden, ohne dass Git in der Lage wäre, dies festzustellen.

Der Mechanismus, den Git verwendet, um diese Prüfsummen zu erstellen, heißt SHA-1 Hash.(((SHA-1)))
Eine solche Prüfsumme ist eine 40 Zeichen lange Zeichenkette, die aus hexadezimalen Zeichen (0-9 und a-f) besteht und wird von Git aus den Inhalten einer Datei oder Verzeichnisstruktur berechnet. Ein SHA-1 Hash sieht wie folgt aus:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Dieses Hashes begegnen einem überall bei der Arbeit, weil sie so ausgiebig von Git genutzt werden.
Git speichert sogar alle Informationen in der Datenbank auf Basis dieser Hashes. Statt eine Datei über den Dateinamen zu referenzieren, verwendet Git den Hash dafür.

==== Git hängt normalerweise nur Daten an, und löscht sie nicht

Fast alle in Git verfügbaren Befehle, fügen Daten jeweils nur zur internen Git Datenbank hinzu und entfernen keine Daten aus der Datenbank.
Deshalb ist es sehr schwer, das System dazu zu bewegen, irgendetwas zu tun, das nicht wieder rückgängig zu machen ist, oder dazu, Daten in irgendeiner Form zu löschen.
Wie in jedem anderen VCS, kann man in Git Daten verlieren oder durcheinander bringen, solange man sie noch nicht eingecheckt hat. Aber sobald man einen Schnappschuss in Git eingecheckt hat, ist es sehr schwierig, diese Daten wieder zu verlieren, insbesondere wenn man regelmäßig seine lokale Datenbank auf ein anderes Repository hochlädt.

Unter anderem deshalb macht es so viel Spaß mit Git zu arbeiten. Man weiß genau, man kann ein wenig experimentieren, ohne befürchten zu müssen, irgendetwas zu zerstören oder durcheinander zu bringen.
Wer sich genauer dafür interessiert, wie Git Daten speichert und wie man Daten, die scheinbar verloren sind, wiederherstellen kann, dem wird das Kapitel <<_undoing>> ans Herz gelegt.

==== Die drei Zustände

Jetzt heißt es aufgepasst.
Es folgt die wichtigste Information, die man sich merken muss, wenn man Git erlernen und dabei Fallstricke vermeiden will.
Git definiert drei Hauptzustände, in denen sich eine Datei befinden kann: Committet (engl. committed), geändert (engl. modified) und für Commit vorgemerkt (engl. staged).
Committet bedeutet, dass die Daten sicher in der lokalen Datenbank gespeichert sind.
Geändert bedeutet, dass eine Datei geändert, aber noch nicht in die lokale Datenbank eingecheckt wurde.
Für Commit vorgemerkt bedeutet, dass eine geänderte Datei in ihrem gegenwärtigen Zustand für den nächsten Commit vorgemerkt ist.

Das führt uns zu den drei Hauptbereichen eines Git Projektes: das Git Verzeichnis, das Arbeitsverzeichnis und die sogenannte Staging-Area.

.Arbeitsverzeichnis, Staging-Area und Git Verzeichnis.
image::images/areas.png["Working directory, staging area, and Git directory."]

Das Git Verzeichnis ist der Ort, an dem Git Metadaten und die lokale Datenbank für ein Projekt sichert.
Dies ist der wichtigste Teil von Git, und dieser Teil wird kopiert, wenn man ein Repository von einem anderen Rechner klont.

Das Arbeitsverzeichnis ist ein einzelnes Abbild einer spezifischen Version des Projektes.
Die dort enthaltenen Dateien werden aus der komprimierten Datenbank geholt und auf der Festplatte in einer Form gespeichert, sodass man sie nutzen oder bearbeiten kann.

Die Staging Area ist einfach eine Datei, normalerweise befindet sich diese im Git Verzeichnis, in der vorgemerkt wird, welche Änderungen der nächste Commit umfassen soll. 
Manchmal wird dieser Ort auch als ``Index'' bezeichnet, aber der Begriff Staging-Area ist der gängigere.

Die grundlegenden Arbeitsschritte beim Einchecken sind in etwa folgende:

1. Man ändert die zu bearbeitenden Dateien im Arbeitsverzeichnis
2. Man merkt die Dateien für einen Commit vor, fügt also einen Schnappschuss der Dateien der Staging-Area hinzu
3. Man führt einen Commit aus, wodurch der in der Staging-Area vorgemerkte Schnappschuss dauerhaft im Git Verzeichnis gespeichert wird

Wenn eine bestimmte Version einer Datei im Git Verzeichnis liegt, gilt sie als committet, oder anders ausgedrückt, sie gilt als eingecheckt (engl. committed).
Wenn sie geändert und in die Staging-Area hinzugefügt wurde, gilt sie als für den Commit vorgemerkt (engl. staged).
Und wenn sie geändert, aber noch nicht zur Staging-Area hinzugefügt wurde, gilt sie als geändert (engl. modified).
Im Kapitel <<_git_basics_chapter>> werden diese drei Zustände noch näher erläutert und wie man diese sinnvoll einsetzen kann oder alternativ, wie man den Zwischenschritt der Staging-Area überspringen kann.