=== Dasar git

Jadi, apa itu Git secara singkat?
Ini adalah bagian penting untuk diserap, karena jika Anda memahami apa itu Git dan dasar-dasar cara kerjanya, maka gunakan Git secara efektif mungkin akan lebih mudah bagi Anda.
Saat Anda mempelajari Git, cobalah untuk menghapus pikiran Anda dari hal-hal yang mungkin Anda ketahui tentang VCS lainnya, seperti CVS, Subversion atau Perforce - hal ini akan membantu Anda menghindari kebingungan yang tidak kentara saat menggunakan alat ini.
Meskipun antarmuka pengguna Git cukup mirip dengan VCS lain, toko Git dan memikirkan informasi dengan cara yang sangat berbeda, dan memahami perbedaan ini akan membantu Anda menghindari menjadi bingung saat menggunakannya.(((Subversi)))(((Perforce)))

==== Snapshots, Bukan Perbedaan

Perbedaan utama antara Git dan VCS lainnya (termasuk Subversion dan teman-teman) adalah cara Git memikirkan datanya.
Secara konseptual, kebanyakan sistem lain menyimpan informasi sebagai daftar perubahan berbasis file.
Sistem lain (CVS, Subversion, Perforce, Bazaar, dan sebagainya) memikirkan informasi yang mereka simpan sebagai seperangkat file dan perubahan yang dilakukan pada setiap file dari waktu ke waktu (ini umumnya digambarkan sebagai kontrol versi berbasis _delta).

. Menghasilkan data sebagai perubahan pada versi dasar setiap file.
image::images / deltas.png [Menyimpan data sebagai perubahan pada versi dasar setiap file.]

Git tidak memikirkan atau menyimpan datanya dengan cara ini.
Sebagai gantinya, Git memikirkan datanya lebih seperti serangkaian snapshot dari filesystem mini.
Dengan Git, setiap kali Anda berkomitmen, atau menyimpan keadaan proyek Anda, Git pada dasarnya mengambil gambar dari apa semua file Anda pada saat itu dan menyimpan referensi ke foto itu.
Agar efisien, jika file tidak berubah, Git tidak menyimpan file lagi, hanya link ke file identik sebelumnya yang sudah tersimpan.
Git berpikir tentang datanya lebih seperti *arus snapshot*.

Memperoleh data sebagai snapshot proyek dari waktu ke waktu.
image::images/snapshots.png [Git menyimpan data sebagai snapshot proyek dari waktu ke waktu.]

Ini adalah perbedaan penting antara Git dan hampir semua VCS lainnya.
Itu membuat Git mempertimbangkan kembali hampir setiap aspek kontrol versi yang kebanyakan disalin sistem lain dari generasi sebelumnya.
Hal ini membuat Git lebih mirip filesystem mini dengan beberapa alat yang sangat hebat yang dibangun di atasnya, bukan sekadar VCS.
Kami akan mengeksplorasi beberapa keuntungan yang Anda dapatkan dengan memikirkan data Anda dengan cara ini saat kita menutup percabangan Git di <<ch03-git-branching#ch03-git-branching>>.

==== Hampir setiap operasi dilakukan secara lokal

Sebagian besar operasi di Git hanya membutuhkan file dan sumber lokal untuk beroperasi - umumnya tidak ada informasi yang dibutuhkan dari komputer lain di jaringan Anda.
Jika Anda terbiasa dengan CVCS di mana sebagian besar operasi memiliki overhead latensi jaringan, aspek Git ini akan membuat Anda berpikir bahwa dewa-dewa kecepatan telah memberkati Git dengan kekuatan duniawi.
Karena Anda memiliki keseluruhan sejarah proyek di sana di disk lokal Anda, sebagian besar operasi tampak hampir seketika.

Misalnya, untuk menelusuri sejarah proyek, Git tidak perlu pergi ke server untuk mendapatkan sejarah dan menampilkannya untuk Anda - ini hanya membacanya langsung dari database lokal Anda.
Ini berarti Anda melihat sejarah proyek hampir seketika.
Jika Anda ingin melihat perubahan yang diperkenalkan antara versi file dan file yang ada sebulan yang lalu, Git dapat mencari file tersebut sebulan yang lalu dan melakukan perhitungan perbedaan lokal, daripada harus meminta server remote untuk melakukannya. atau cabut versi lama file dari server jarak jauh untuk melakukannya secara lokal.

Ini juga berarti bahwa sangat sedikit yang tidak dapat Anda lakukan jika Anda offline atau tidak aktif VPN.
Jika Anda naik pesawat terbang atau kereta api dan ingin melakukan sedikit pekerjaan, Anda bisa melakukan dengan senang hati (ke salinan_local_Anda,ingat?) Sampai Anda tersambung ke jaringan untuk menguploadnya.
Jika Anda pulang ke rumah dan tidak bisa mendapatkan klien VPN Anda bekerja dengan baik, Anda tetap dapat bekerja.
Dalam banyak sistem lain, melakukan hal itu tidak mungkin atau menyakitkan.
Di Perforce, misalnya, Anda tidak dapat berbuat banyak bila Anda tidak terhubung ke server; dan di Subversion dan CVS, Anda dapat mengedit file, namun Anda tidak dapat melakukan perubahan pada database Anda (karena database Anda offline).
Ini mungkin tidak tampak seperti kesepakatan besar, tapi Anda mungkin akan terkejut dengan perbedaan besar yang bisa dibuatnya.

==== Git Memiliki Integritas

Segala sesuatu di Git dijumlahkan sebelum disimpan dan kemudian disebut oleh checksum itu.
Ini berarti tidak mungkin mengubah isi file atau direktori apapun tanpa Git mengetahui tentang hal itu.
Fungsi ini dibangun ke dalam Git pada tingkat terendah dan merupakan bagian integral dari filosofinya.
Anda tidak dapat kehilangan informasi dalam perjalanan atau mendapatkan file korupsi tanpa Git dapat mendeteksi itu.

Mekanisme yang digunakan Git untuk checksumming ini disebut hash SHA-1.((SHA-1)))
Ini adalah string 40 karakter yang terdiri dari karakter heksadesimal (0-9 dan a-f) dan dihitung berdasarkan isi struktur file atau direktori di Git.
Sebuah hash SHA-1 terlihat seperti ini:

[sumber]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Anda akan melihat nilai hash ini di semua tempat di Git karena sangat banyak menggunakannya.
Sebenarnya, Git menyimpan semuanya di database bukan dengan nama file tapi dengan nilai hash isinya.

==== Git Umumnya Hanya Menambah Data

Bila Anda melakukan tindakan di Git, hampir semuanya hanya _add_ data ke database Git.
Sulit membuat sistem melakukan sesuatu yang tidak bisa diurungkan atau membuatnya menghapus data dengan cara apa pun.
Seperti VCS lainnya, Anda bisa kehilangan atau mengacaukan perubahan yang belum Anda lakukan, namun setelah Anda melakukan snapshot ke Git, sangat sulit untuk kalah, terutama jika Anda secara teratur mendorong database Anda ke repositori lain.

Hal ini membuat Git senang karena kita tahu kita bisa bereksperimen tanpa bahaya mengacaukan semuanya.
Untuk melihat lebih dalam tentang bagaimana Git menyimpan datanya dan bagaimana Anda dapat memulihkan data yang tampaknya hilang, lihat <<ch02-git-basics-chapter#_undoing>>.

==== Tiga Negara

Perhatikan sekarang - inilah hal utama yang perlu diingat tentang Git jika Anda ingin sisa proses belajar Anda berjalan lancar.
Git memiliki tiga negara bagian utama bahwa file Anda dapat berada di: _committed_, _modified_, and _staged_:

* Berkomitmen berarti data tersimpan dengan aman di database lokal Anda.
* Modifikasi berarti Anda telah mengubah file namun belum melakukannya ke database Anda.
* Staged berarti Anda telah menandai file yang dimodifikasi dalam versi sekarang untuk masuk ke snapshot komit berikutnya.

Ini membawa kita ke tiga bagian utama proyek Git: direktori Git, pohon kerja, dan area pementasan.

.Working tree, staging area, dan direktori Git.
image :: images / areas.png ["Pohon kerja, area stage, dan direktori Git."]

Direktori Git adalah tempat Git menyimpan metadata dan database objek untuk proyek Anda.
Ini adalah bagian terpenting dari Git, dan inilah yang akan disalin saat Anda mengganti repositori dari komputer lain.

Pohon kerja adalah satu checkout dari satu versi proyek.
File-file ini ditarik keluar dari database terkompresi di direktori Git dan ditempatkan pada disk untuk digunakan atau dimodifikasi.

Area pementasan adalah file, umumnya terdapat di direktori Git Anda, yang menyimpan informasi tentang apa yang akan masuk ke komit berikutnya.
Nama teknisnya dalam bahasa Git adalah ``indeks '', namun frase ``area stage'' juga berjalan dengan baik.

Alur kerja Git dasar berjalan seperti ini:

1. Anda memodifikasi file di pohon kerja Anda.
2. Anda secara selektif hanya menampilkan perubahan yang Anda inginkan menjadi bagian dari komit berikutnya, yang menambahkan _only_ perubahan pada area pementasan.
3. Anda melakukan commit, yang mengambil file seperti berada di area stage dan menyimpan snapshot tersebut secara permanen ke direktori Git Anda.

Jika versi file tertentu ada di direktori Git, itu dianggap dilakukan.
Jika sudah dimodifikasi dan ditambahkan ke area pementasan, itu dipentaskan.
Dan jika sudah berubah sejak diperiksa tapi belum dipentaskan, maka dimodifikasi.
Di bab dasar <<ch02-git-basics-chapter#ch02-git-basics-chapter>>, Anda akan belajar lebih banyak tentang negara-negara ini dan bagaimana Anda bisa memanfaatkannya atau melewatkan bagian yang dipentaskan sepenuhnya.
