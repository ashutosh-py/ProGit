=== Pangunahing Kaalaman sa Git

Kaya, ano ang Git sa madaling salita?
Ito ay isang importanteng bahagi na kailangang makuha mo, dahil kung nauunawaan mo kung ano ang Git at ang mga pangunahing kaalaman kung paano ito gumagana, mas madali para sa iyo ang epektibong paggamit ng Git. Habang natututo ka ng Git, subukang linisin ang iyong isipan tungkol sa mga bagay na nalalaman mo tungkol sa ibang VCSs, gaya ng CVS, Subversion o Perforce -- sa ganitong paraan makakatulong itong maiwasan ang maliliit na kalituhan sa paggamit ng kagamitan.
Kahit na ang user interface ng Git ay kapareho lang sa ibang VCSs, ang Git ay nag-store at nag-iisip tungkol sa mga impormasyon sa isang kakaibang pamamaraan, at ang pag-uunawa sa mga kaibahang ito ay makakatulong sa iyo na maiwaasan ang ang pagkalito bahang gumagamit nito.(((Subversion)))(((Perforce)))

==== Mga Snapshot, Hindi Mga Kaibahan

Ang pangunahing kaibahan ng Git sa kahit anong VCS (Subversion at kalakip ang mga kaabigan nito) ay ang pag-iisip ng Git tungkol sa mga datos nito.
Kung iisipin, karamihan sa ibang mga sistema ay nag-store na mga impormasyon sa isang lista ng mga pagbabago ayon sa file.
Ang ibang mga sistemang ito (CVS, Subversion, Perforce, Bazaar, at iba pa) ay nag-iisip sa mga impormasyon na kanilang ini-store bilang isang grupo ng mga file at ang mga pagbabagong nagawa sa bawat file sa paglibas ng panahon (ito ay karaniwang inilarawang bilang _delta-based_ na version control).

.Ang pag-store na mga datos bilang pagbabago sa base na bersyon ng bawat file.
image::images/deltas.png[Ang pag-store na mga datos bilang pagbabago sa base na bersyon ng bawat file.]

Ang Git ay hindi nag-iisip o nag-store na mga datos nito sa ganitong paraan.
Sa halip, inisip ng Git ang mga datos nito bilang isang serye ng mga snapshot sa isang miniature na filesystem.
Sa Git, bawat beses na mag-commit ka, o mag-save ng estado ng iyong proyekto, ang Git ay para lang kumukuha ng larawan kung ano ang hitsura ng lahat ng iyong mga file sa oras na iyon at nag-store ng isang reference sa snapshot na ito.
Para mas mabisa, kung ang mga file ay hindi naabago, ang Git ay hindi ulit mag-store ng file, isang link lang sa dating kaparehong file na nai-store na nito.
Ang Git ay nag-iisip sa mga datos nito gaya ng isang *daloy ng mga snapshots*.

.Ang pag-store ng mga datos bilang mga snapshot sa paglipas ng panahon.
image::images/snapshots.png[Ang Git ay nag-store ng mga datos bilang mga snapshot sa paglipas ng panahon.]

Ito ay isang importanteng kaibahan ng Git at sa halos lahat ng ibang mga VCSs.
Nagpapa-reconsider ito sa Git sa halos bawat aspeto ng version control na kadalasang kinopya ng karamihan sa ibang mga sistema mula sa nakaraang henerasyon.
Ito ang dahilan kung bakit ang Git ay parang isang mini filesystem na may mga lubhang malalakas na mga kagamitan na nabuo sa taas nito, sa halip na isang simpleng VCS lang.
Tutuklasin natin ang iilang sa mga benepisyo na makukuha mo sa pag-iisip ng iyong mga datos sa ganitong paraan kapag nadaanan na natin ang Git branching sa <<_git_branching#_git_branching>>.

==== Halos Bawat Operasyon ay Lokal

Karamihan sa mga operasyon sa Git ay nangangailangan lang ng mga lokal na mga files at mga resources para makapag-operate --- sa pangkalahatan, walang impormasyon ang kinakailangan mula sa ibang kompyuter na nasa iyong network.
Kung ikaw ay nasanay na sa isang CVCS kung saan karamihan sa mga operasyon ay mayroong network latency na overhead, ang aspetong ito na Git ay magpapaisip sa iyo na ang Git ay pinalanginan ng mga diyos ng bilis ng kapangyarihan na wala sa mundong ito.
Dahil mayroon kang buong kasaysayan ng proyekto sa iyong local disk, karamihan sa mga operasyon ay nagagawa agad.

Halimbawa, para mag-browse ng kasasayan ng proyekto, hindi kinakailangan ng Git na pumunta pa sa server para makuha ang kasaysayan at para ipakita ito para sa iyo -- simpleng binabasa lang nito ito mula sa iyong local na database.
Ibig sabihin nito na makikita mo ang kasaysayan ng proyekto kaagad.
Kung gusto mong makita ang mga pagbabago na dinagdag sa kasalukuyang bersyon ng isang file at ang file sa nakaraang buwan, ang Git ay maaring maghanap sa file sa nakaraang buwan at gumawa ng kalkulasyon sa lokal na kaibahan, sa halip na magtanong pa sa isang remote na server para gawin ito o kumuha pa ng lumang bersyon ng file mula sa remote server para magawa ito sa lokal.

Ibig sabihin din nito na mayroong maliit lang na na mga bagay ang hindi mo magagawa kung ikaw ay offline o naka-off ang VPN.
Kung ikaw ay sumakay ng eroplano o ng tren at gusto mong magtrabaho ng kaunti, maaari kang masayang mag-commit (sa iyong _local_ na kopya, naalala mo?) hanggang sa magkakaroon ka ng network connection para makapag-upload.
Kung nakauwi ka na at hindi mo mapatakbo ng mahusay ang iyong VPN client, makakatrabaho ka pa rin.
Sa karamihan sa mga ibang sistema, ang paggagawa nito ay imposible o mahirap.
Sa Perforce, halimbawa, wala kang masyadong magawa kung ikaw ay hindi konektado sa server; at sa Subversion at CVS, maaari kang mag-edit ng mga files, ngunit hindi mo maaaring i-commit ang iyong mga binago sa iyong database (dahil ang iyong database ay offline).
Parang maliit lang ito na bagay, ngunit masurpresa ka sa malaking pagbabago na magawa nito.

==== Ang Git ay Mayroong Integridad

Lahat nang nasa Git ay naka check-sum bago ito i-store at pagkatapos ay ini-refer naman ng checksum na iyon.
Ibig sabihin nito, imposibleng mabago ang mga nilalaman ng kahit anong file o directory nang hindi malalaman ng Git.
Ang functionality na ito ay ginawa sa Git sa pinakamababang antas at isang mahalagang bahagi ng pilosopiya nito.
Hindi ka maaaring mawalan ng imprrmasyon agad-agad o makaranas ng file corruption nang hindi nadedetect ng Git.

Ang mekanismo na ginagamit ng Git para sa pag-checksum ay tinatawag na SHA-1 na hash.((SHA-1)))
Ito ay isang 40-karakter na string na binubuo ng mga hexadecimal na mga karakter (0-9 at a-f) at nakuha ayon sa mga nilalaman ng isang file o directory na istraktura sa Git.
Ang SHA-1 na hash ay parang ganito:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Makikita mo na ang mga hash values na ito ay nasa iba't ibang lugar sa Git dahil ito ay palaging gumagamit sa mga ito.
Sa katunayan, ang Git ay nagstore sa lahat ng nasa database nito hindi ayon sa file name ngunit sa pamamagitan ng hash_value ng nilalaman nito.

==== Ang Git ay Nagdadagdag lang ng mga Datos

Kung ikaw ay gumagawa ng mga aksyon sa Git, halos lahat ng mga ito ay nag _add_ lang ng mga datos sa Git na database.
Mahirap na ipagawa sa sistema ang kahit na ano na hindi maaaring gawin o para ipabura ang mga datos sa kahit anong pamamaraan.
Sa kahit anong VCS, maaaring mawala o magkagulo ang iyong mga binago na hindi mo pa nai-commit, ngunit pagkatapos mong mag-commit ng isang snapshot sa Git, sobrang mahirap itong mawala, lalo na kung parati kang nag-push sa iyong repository sa ibang repository.

Ito ang nagpapasaya sa Git dahil alam natin na maaari tayong mag-eksperimento ng hindi natatakot na lubhang makasira sa mga bagay-bagay.
Para sa mas malalim pa na pananaw kung paano ang Git nag-store ng mga datos nito at kung paano mag-recover ng mga datos na parang nawawala, tingnan ang <<_git_basics_chapter#_undoing>>.

==== Ang Tatlong Estado

Bigyang pansin ito -- ito ang pangunahing bagay na dapat mong tandaan tungkol sa Git kung gusto mong maging madali ang proseso ng iyong pag-aaral.
Ang git ay may tatlong pangunahing estado kung saan maaaring malakip ang iyong mga file: _committed_, _modified_, at _staged_:

* Committed - ibig sabihin na ang mga datos ay naka-store na sa iyong lokal na database.
* Modified - ibig sabihin ay mayroon kang binago sa file ngunit hindi pa nai-commit sa iyong database.
* Staged - ibig sabihin na nilagyan mo na ng marka ang binagong file sa kasalukuyang bersyon para mapunta ito susunod na commit snapshot.

Ito ay nagdala sa atin sa tatlong pangunahing mga bahagi ng isang Git na proyekto: ang Git na directory, ang working tree, at ang staging area.

.Working tree, staging area, at Git na directory.
image::images/areas.png["Working tree, staging area, at Git na directory."]

Ang Git na directory ay kung saan ang Git nag-store ng metadata at ng object na database para sa iyong proyekto.
Ito ang pinakaimportanteng bahagi ng Git, at ito ang nakopya kapag nag _clone_ ka ng repository mula sa ibang kompyuter.

Ang working tree ay isang single na checkout sa isang bersyon ng iyong proyekto.
Ang mga files ay hinila mula sa isang naka-compress na database sa Git na directory at nilagay sa disk para magamit mo o ma-modify.

Ang staging area ay isang file, na karaniwang nakaloob sa iyong Git na directory, na nag-store ng mga impormasyong tungkol sa ano ang masasama sa iyong susunod na commit.
Ang teknikal na pangalan nito Git na wika ay ``index'', ngunit ang pahayag na ``staging area'' ay pede na rin.

Ang panguhahing workflow ng Git ay parang ganito:

1. Nag-modify ka ng mga file sa iyong working tree.
2. Nagpili ka ng mga pagbabago na gusto mong maisali sa iyong susunod na commit, kung saan ang mga pagbabagong iyong lang ang maidadagdag sa iyong staging area.
3. Gagawa ka ng commit, kung saan kinuha nito ang mga file sa staging area at nag-store sa snapshot na iyon sa Git na directory ng permanente.

Kung ang isang partikular na bersyon ng isang file ay nasa Git directory na, matuturing na itong commited.
Kung ito ay binago at nadagdag na sa staging area, ito ay staged.
At kung ito ay nabago simula noong na checkout ito ngunit hindi pa staged, ito ay modified.
Sa <<_git_basics_chapter#_git_basics_chapter>>, matutunan mo pa ang tungkol sa mga estadong ito at kung paano mo ito samantalahin o tuluyang laktawan ang staged na parte.
