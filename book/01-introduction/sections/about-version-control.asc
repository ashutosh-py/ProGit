=== Tungkol sa Version Control

(((version control)))
Ano ang ``version control'', at bakit ka dapat makiaalam?
Ang version control ay isang sistema na nagrerekord na mga pagbabago sa isang file o grupo ng mga files sa paglipas ng panahon para mabalikan mo ang partikular na mga bersyon mamaya.
Para sa mga halimbawa sa aklat na ito, ikaw ay gagamit ng isang software na source code bilang mga files na naka version controlled, sa totoo lang maaari mo itong gawin sa kahit anong tipo ng file sa isang kompyuter.

Kung ikaw ay isang graphic o web designer at gusto mong itago ang bawat bersyon ng isang larawan o layout (kung saan kadalasan ay gusto mo talaga), ang Version Control System (VCS) ay isang mainam na bagay para gagamitin.
Ito ay nagbibigay-daan din para maibalik mo sa dating estado ang mga napiling mga files, i-revert ang buong proyekto pabalik sa nakaraang estado, ikumpara ang mga pagbabago paglipas ng panahon, tingnan kung sino ang nagbago ng mga files na maaaring nagdulot ng problema, sino ang nagdala ng problema at kailan at iba pa.
Ang paggamit ng VCS din ay ibig sabihin na kung pumalpak ka sa mga bagay-bagay o nawalan ng mga files, madali ka lang maka-recover.
Higit pa dito, makukuha mo ang lahat ng ito sa napakaliit na overhead lang.

==== Lokal na mga Version Control Systems
(((version control,local)))
Karamihan sa mga napiling version-control na pamamaraan ng mga tao ay ang pagkopya ng mga files sa ibang directory (marahil ay isang directory na naka-timestamp, kung sila ay bihasa).
Ang pamamaraan na ito napakaraniwan dahil ito ay napakasimple lang, ngunit ito rin ay malamang magkakaroon ng mga kamalian.
Madali lang makalimot kung saang directory ka naroon at aksidenteng magsulat sa mali na file o palitan ang mga files na hindi mo talaga ginusto.

Para malutas ang problemang ito, ang mga programmer noon pa ay gumawa ng lokal na mga VCS na mayroong isang simpleng database na nagsusubaybay sa lahat ng mga pagbabago sa mga files sa loob ng isang revision control.

.Lokal na version control.
image::images/local.png[Local version control diagram]

Isa sa mga mas kilalang VCS na mga kagamitan ay isang sistema na tinatawag na RCS, kung saan ginagamit pa sa maraming mga kompyuter ngayon.
Ang RCS ay gumagana sa pamamagitan ng paglagay ng mga grupo ng mga patch (ito ay, ang kaibahan ng mga files) sa isang espesyal na format sa disk; maaari nitong ilikha ulit kung ano ang dating laman ng mga file sa kahit anong oras sa pamamagitan ng pagdagdag sa lahat ng mga patch.

==== Centralized Version Control Systems

(((version control,centralized)))
Ang sunod na pangunahing problema na nararanasan ng mga tao ay ang pangangailangan na makipagtulungan sa ibang mga developer na nasa ibang mga sistema.
Para malutas ang problemang ito, nagawa ang Centralized Version Control na mga Sistema (CVCSs).
Ang mga sistemang ito, gaya ng CVS, Subversion, at Perforce, ay mayroong isang server na naglalaman ng lahat ng mga nakabersyon na mga files, at mga iilang bilang ng mga kliyente na nagsusuri sa mga files mula sa sentrong lugar na ito. (((CVS)))(((Subversion)))(((Perforce)))
Sa maraming mga taon, ito ang naging pamatayan para sa version control.

.Centralized na version control.
image::images/centralized.png[Centralized version control diagram]

Ang setup na ito ay nagbubunga ng napakaraming pakinabang, lalong lano kapag lokal na mga VCS.
Halimbawa, kahit na sino ay may nalalaman kung ano ang ginagawa ng kahit na sinong nasa proyekto.
Ang mga tagapangasiwa ay mayroong fine-grained na kontrol sa kung sino ang makakagawa nito, at ito ay sobra ka napakadaling pangasiwaan kung ihambing sa pag-susuri sa mga lokal na mga database sa bawat kliyente.

Gayunman, ang setup na ito ay mayroon ding mga seryosong negatibong epekto.
Ang pinakahalata ay ang single point of failure na kinakatawan ng mga sentralisadong server.
Kung ang server na iyan ay hindi magagamit sa loob ng isang oras, sa oras na iyan walang sinuman ang maaaring makipag-collaborate o mag-save ng mga nakabersyon na mga pagbabago sa kahit anong tinatrabaho nila.
Kung ang hard disk ng sentrong database ay naging corrupted, at walang itinago na mga tamang backup, mawawala sa iyo ang lahat -- ang buong kasaysayan ng proyekso maliban na lang sa mga single snapshops na meron ang iba sa kanilang mga lokal na makina.
Ang Lokal na VCS na mga sistema ay mayroon ding parehong problema -- kung nasa isang lugar ang buong kasaysayan ng proyekto, maaari mong mawala ang lahat.

==== Distributed na Version Control na mga Sistema

(((version control,distributed)))
Ito ay kung saan dumating ang Distributed Version Control Systems (DVCSs).
Sa isang DVCS (gaya ng Git, Mercurial, Bazaar o Darcs), ang mga kliyente ay hindi lang basta mag-checkout sa pinakabagong snapshot ng mga files; sa halip, tuluyan nilang kinopya ang repository, kalakip na ang buong kasaysayan nito. Kaya naman, kung may mamamatay na server, at ang mga sistemang ito ay nakikipag-collaborate sa pamamagitan ng server na iyo, ang kahit alin sa mga repository ng mga kliyente ay maaaring kopyahin papunta sa server para ma-restore ito.
Bawat kopya ay talagang isang buong backup ng lahat ng mga datos.

.Distributed na version control.
image::images/distributed.png[Distributed version control diagram]

Higit pa dito, karamihan sa mga sistemang ito ay mahusay sa pagkaroon ng iilang mga remote repository na magagamit nila, kaya maaari kang makipag-collaborate sa iba't ibang mga grupo ng tao sa iba't ibang pamamaraan ng sabay-sabay sa isang parehong proyekto.
Nagbibigay daan ito para ma-setup mo ang iilang tipo ng mga workflow na hindi posible sa isang sentralisadong mga sistema, gaya ng hierarchical na mga modelo.
