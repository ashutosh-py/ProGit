=== Rreth Kontrollit të Versionit

(((version control)))
Çfarë është "`kontrolli i versionit”`"dhe pse duhet të na interesojë? Kontrolli i versionit është një sistem që regjistron ndryshimet në një dokument ose grup dokumentash në një hapësirë kohe të caktuar, në mënyrë që të shikosh versione specifike të atij dokumenti apo atyre grup dokumentash më vonë. Për shembull , në këtë libër ju do të përdorni kodin e burimit (source code) të një software-i për të praktikuar versionin e kontrollit, edhe pse kontolli funksionon me çfarëdolloj dokumenti në një kompjuter.


If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use.
It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.
Using a VCS also generally means that if you screw things up or lose files, you can easily recover.
In addition, you get all this for very little overhead.

==== Sisteme të Kontrollit të Versionit lokal

(((version control,local)))
Metoda e preferuar e kontrollit të versionit të shumë njerëzve është kopjimi i dokumentave në një dosje tjetër (ndoshta një dosje me stampë kohore , nëse tregohen të zgjuar). Kjo qasje është shumë e zakonshme sepse është e thjeshtë, por në të njëjtën kohë  është e prirur për të pasur shumë gabime. Lehtësisht mund të harroni se në ciliën dosje po punoni dhe aksidentalisht mund të shkruani në dokumentin e gabuar apo të kopjoni pa qëllim dokumentat e gabuara.
Për ta ballafaquar këtë problem, shumë kohë më parë, programuesit zhvilluan VCS-të lokale që kishin një bazë të dhënash ku ruanin çdo ndryshim në dokumenta nën rishikimin e kontrollit.


.Local version control
image::images/local.png[Local version control diagram]

One of the most popular VCS tools was a system called RCS, which is still distributed with many computers today.
https://www.gnu.org/software/rcs/[RCS^] works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.

==== Centralized Version Control Systems

(((version control,centralized)))
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.

.Centralized version control
image::images/centralized.png[Centralized version control diagram]

This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what, and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything -- the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCSs suffer from this same problem -- whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.
Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.

.Distributed version control
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
