[[_first_time]]
=== First-Time Git Setup

Now that you have Git on your system, you'll want to do a few things to customize your Git environment.
You should have to do these things only once on any given computer; they'll stick around between upgrades.
You can also change them at any time by running through the commands again.

Git comes with a tool called `git config` that lets you get and set configuration variables that control all aspects of how Git looks and operates.(((git commands, config)))
These variables can be stored in three different places. 

==== Git for Linux

1. `/etc/gitconfig` file: Contains values for every user on the system and all their repositories.
  If you pass the option `--system` to `git config`, it reads and writes from this file specifically.
2. `~/.gitconfig` or `~/.config/git/config` file: Specific to your user.
  You can make Git read and write to this file specifically by passing the `--global` option.
3. `config` file in the Git directory (that is, `.git/config`) of whatever repository you're currently using: Specific to that single repository.

==== Git for Windows

If Git for Windows installed *without* admin rights then:

1. `%AllUsersProfile%\Git\config` or `%ProgramData%\Git\config` file (this is the same file for Windows 7 and newer): Contains values for every user on the system and all their repositories.  
2. `%LocalAppData%\Programs\Git\mingw64\etc\gitconfig` file: Specific to your user. If you pass the option `--system` to `git config`, it reads and writes from this file specifically. In the Git for Linux version the `--system` key points to the file are common for *all* local users. Therefore for Git for Windows it would be more logically if this key would be using for `%ProgramData%\Git\config`, but unfortunately implementation Git for Windows is made differently. So, you are to use `-f` key for `%ProgramData%\Git\config` file changing.
3. `%UserProfile%\.gitconfig` file: Specific to your user. You can make Git read and write to this file specifically by passing the `--global` option.  
4. `config` file in the Git directory (that is, `.\.git\config`) of whatever repository you're currently using: Specific to that single repository. Also you can make Git read and write to this file specifically by passing the `--local` option.

If Git for Windows installed *with* admin rights then:

1. `%AllUsersProfile%\Git\config` or `%ProgramData%\Git\config` file (this is the same file for Windows 7 and newer): Contains values for every user on the system and all their repositories.  
2. `%ProgramFiles%\Git\mingw64\etc\gitconfig` file: Contains values for every user on the system and all their repositories. If you pass the option `--system` to `git config`, it reads and writes from this file specifically. For changing this file are necessary admin rights.  
3. `%UserProfile%\.gitconfig` file: Specific to your user. You can make Git read and write to this file specifically by passing the `--global` option.  
4. `config` file in the Git directory (that is, `.\.git\config`) of whatever repository you're currently using: Specific to that single repository. Also you can make Git read and write to this file specifically by passing the `--local` option.

By default some of these files are not exist, but they will be created by Git when you will edit the settings through the `--system` and `--global` keys. Also any config file of Git can accesseble via `git config -f <file>`:

[source,console]
----
$ git config -f "/C/ProgramData/Git/config" --list
----

Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.

==== Your Identity

The first thing you should do when you install Git is to set your user name and email address.
This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
If you want to override this with a different name or email address for specific projects, you can run the command without the `--global` option when you're in that project.

Many of the GUI tools will help you do this when you first run them.

==== Your Editor

Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system's default editor, which is system dependant.

If you want to use a different text editor, such as Emacs, you can do the following:

[source,console]
----
$ git config --global core.editor emacs
----

While on a Windows system, if you want to use a different text editor, such as Notepad++, you can do the following:

On a x86 system
[source,console]
----
$ git config --global core.editor "'%ProgramFiles%/Notepad++/notepad++.exe' -multiInst -nosession" 
----
On a x64 system
[source,console]
----
$ git config --global core.editor "'%ProgramFiles(x86)%/Notepad++/notepad++.exe' -multiInst -nosession" 
----

[NOTE]
====
Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix based systems like Linux and OS X or a Windows system.
If you are not familiar with either of these editors, you may need to search for specific instructions for how to set up your favorite editor with Git.
====

[WARNING]
====
You may find, if you don't setup an editor like this, you will likely get into a really confusing state when they are launched.
Such example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.
====

==== Checking Your Settings

If you want to check your settings, you can use the `git config --list` command to list all the settings Git can find at that point:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.

You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

==== Proxy settings

By default the new Git versions read the proxy settings from your web-browser, but old Git versions couldn't do it. When you are using old Git for Windows in the Windows domain you will not get Internet access for Git without these settings.

For Git versions older than v.2.5.2 you can to set the proxy settings for the `http.proxy` property through such format:

[source,console]
----
$ git config --global http.proxy http://<Login>:<Password>@<Proxy>:<Port>
----

It is bad and unsafe way... But for Git newer than v.2.5.2 it is possible to use these settings without pointing your login and password:

[source,console]
----
$ git config --global http.proxy http://@<Proxy>:<Port>
----

For example:

[source,console]
----
$ git config --global http.proxy http://@proxy2:8080
----

In the Windows domain some ports can be locked by your domain admins (for example, port 22). Therefore can appear problems of connection to BitBucket service from Git for Windows. But you can fix this problem:

[source,console]
----
$ git config --global --add url."ssh://git@altssh.bitbucket.org:443/".insteadOf \
"git@bitbucket.org:"
$ git config --global --add url."ssh://git@altssh.bitbucket.org:443/".insteadOf \
"https://Andrey-Bushman@bitbucket.org/"
----

You are to use your BitBucket account instead of `Andrey-Bushman` in the prewious sample. Also read the Use the *SSH protocol with Bitbucket Cloud* (https://confluence.atlassian.com/bitbucket/use-the-ssh-protocol-with-bitbucket-cloud-221449711.html)[https://confluence.atlassian.com/bitbucket/use-the-ssh-protocol-with-bitbucket-cloud-221449711.html]) article.

The same problem exists for GitHub service. At this case read the *Using SSH over the HTTPS port* (https://help.github.com/articles/using-ssh-over-the-https-port/)[https://help.github.com/articles/using-ssh-over-the-https-port/]) article.

==== Import settings

You can create additional files with your settings and import them. For working with such files you are to use `-f` option and the file name:

[source,console]
----
$ git config -f "/C/ProgramData/Git/config" --list
----

[Note]
====
Also, you can use `-f` key for working with config files which are accessible through the `--system`, `--global`, and `--local` keys.
====

The `include.path` contains the names of import files. Each `path` item contains own record. The `include` section can have more than one `path` item. You are to use `--add` key for adding the new `path` item:

[source,console]
----
$ git config --system --add include.path "//hyprostr/dfs/groups/developers/etc/gitconfig.txt"
$ git config --system --add include.path "d:/dev/settings/gitconfig.txt"
----

==== Removing the settings

Removing the `user.email` settings:

[source,console]
----
$ git config --global --unset user.email
----

Removing the `user` section completely:

[source,console]
----
$ git config --global --remove-section user
----

==== Rename section

[source,console]
----
$ git config --global --rename-section old_name new_name
----

==== Edit the set of items

Some settings groups have a set of the elements with the same name: for example, `include` group:

>[include]  
>  path = d:/dev/settings/gitconfig_01.txt  
>  path = d:/dev/settings/gitconfig_02.txt  
>  path = d:/dev/settings/gitconfig_03.txt  
>  path = d:/dev/settings/gitconfig_04.txt  
  
Add new `path` item:

[source,console]
----
$ git config --global --add include.path "d:/dev/settings/gitconfig_05.txt"
----

To edit one of a set of the records of the same name, it needs to be identified by means of the regular expression set after associated value:

[source,console]
----
$ git config --global include.path "d:/dev/settings/gitconfig_06.txt" "_03.txt"
----

In this case value of the third path element (see composition of include group is higher) will be changed on new since this record contains the value which matches to our regular expression.

To delete one of the available records of section of the same name, it is also necessary to use a filter by means of the regular expression:

[source,console]
----
$ git config --global --unset include.path "_06.txt" 
----

If it is necessary to delete the set of records which have the same name match to some filter, then it is necessary to use the `--unset-all` key:

[source,console]
----
$ git config --global --unset-all include.path
----

or

[source,console]
----
$ git config --global --unset-all include.path ".txt"
----

==== Encoding

Some versions of Git for Windows can incorrect to display non-english text. At this case read about the `i18n.commitencoding` and `i18n.logoutputencoding` settings in the Git documentation.

==== About location of config files in the network

Unfortunately, in Git for Windows 2.4.5, there were bugs because of which Git cannot to edit correctly of the configuration files are placed on a network.

.Remote config file editing bug.
image::images/config_edit_bug.png[Remote config file editing bug]


In this case in the directory of placement of the target configuration file there is a temporal `gitconfig.txt.lock` file. It comprising changes which shall be written in the configuration file. Attempts to answer `y` the designated question lead to the infinite loop of appearing of the same question. If to select `n` option, operation of the `git config` command comes to the end and the `gitconfig.txt.lock` file disappears, but thus the target configuration file remains not edited.

[NOTE]
====
This problem was fixed in Git for Windows v2.5.2.
====

The decission of this problem for the old Git for Windows versions is creation of the script executing the set of necessary operations, then to assign to it an alias on which it can be вызыван in the Git Bash:

[source,console]
----
# edit_config.sh
# This is a workaround of the problem described here:
# https://github.com/git-for-windows/git/issues/241
# Arguments:
# $1 - target config file
# $2 - parameter full name
# $3 - parameter value
random_file_name=$RANDOM
mv $1 $random_file_name
git config -f $random_file_name $2 $3
mv $random_file_name $1
----

Then we can create an alias for the script using:

[source,console]
----
$ git config --global alias.editconfig '!sh "d:/sample/edit_config.sh"'
----

The sample of using:

[source,console]
----
$ git editconfig "//hyprostr/dfs/groups/developers/settings/gitconfig.txt" \
"http.proxy" "http://@proxy2:8080"
----
