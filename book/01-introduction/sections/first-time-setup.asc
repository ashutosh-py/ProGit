[[_first_time]]
=== Persediaan Git untuk Kali Pertama

Sekarang anda sudah mempunyai Git pada sistem anda, anda perlu melakukan beberapa perkara lagi untuk menyesuaikan persekitaran Git anda.
Anda sepatutnya melakukan perkara-perkara ini sekali sahaja pada mana-mana komputer yang akan anda gunakan; mereka akan kekal di antara proses peningkatan.
Anda juga boleh menukarkannya pada bila-bila masa sahaja dengan menjalankan perintah ataupun *commands* lagi.

Git juga dilengkapi dengan alat yang kenali sebagai konfig git ataupun *`git config`* yang membolehkan anda mendapatkan dan menetapkan pembolehubah konfigurasi yang mengawal semua aspek bahawa bagaimana Git akan kelihatan dan beroperasi. (((git commands, config)))
Pembolehubah ini boleh disimpan di dalam tiga tempat berbeza:

1. fail `/etc/gitconfig`: Mengandungi nilai-nilai yang diaplikasikan kepada setiap pengguna pada sistem dan kesemua repositori mereka.
  Jika anda meluluskan pilihan `--system` kepada `git config`, ia akan membaca dan menulis daripada fail ini secara spesifik.
  (Kerana ini adalah merupakan suatu fail konfigurasi sistem, anda akan memerlukan hak istimewa pentadbir ataupun **admin** atau superpengguna ataupun **superuser** untuk melakukan perubahan terhadapnya.)
2. fail `~/.gitconfig` atau `~/.config/git/config`: Nilai-nilai yang khususnya bersifat peribadi bagi anda, sebagai seorang pengguna.
  Anda boleh mengarahkan Git untuk membaca dan menulis kepada fail ini secara khususnya dengan meluluskan pilihan `--global`.
3. fail `config` dalam direktori Git (iaitu, `.git/config`) bagi mana-mana sahaja repositori yang sedang anda gunakan: Ia akan khususnya kepada suatu repositori sahaja.

Setiap tahap akan menggantikan nilai di tahap sebelumnya itu, maka nilai-nilai dalam `.git/config` akan menggantikan nilai yang berada di dalam `/etc/gitconfig`.

Dalam sistem Windows, Git akan mencarikan fail `.gitconfig` di dalam direktori `$HOME` (`C:\Users\$USER` bagi kebanyakan orang).
Ia juga akan masih mencarikan `/etc/gitconfig`, walaupun ia adalah bersifat relatif bagi akar MSys, yang merupakan di mana tempat yang telah anda putuskan untuk memasang Git dalam sistem Windows anda semasa anda menjalankan pemasang ataupun **installer**.
Jika anda sedang menggunakan versi 2.x atau yang lebih lanjut bagi Git untuk Windows, terdapat juga suatu fail konfigurasi tahap sistem di
`C:\Documents and Settings\All Users\Application Data\Git\config` dalam Windows XP, dan di `C:\ProgramData\Git\config` dalam Windows Vista dan versi yang lebih baru.
Fail konfigurasi ini hanya boleh diubahkan melalui `git config -f <file>` sebagai seorang pentadbir.

==== Identiti Anda

Perkara pertama yang perlu anda lakukan apabila anda memasang Git adalah anda harus menetapkan nama pengguna dan alamat e-mel anda.
Ini adalah penting kerana setiap commit Git menggunakan maklumat ini, dan ia tidak dapat diubah ke dalam commit yang telah anda mula mencipta:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Sekali lagi, anda haruslah melakukan ini sekali sahaja jika anda meluluskan pilihan `--global`, kerana kemudiannya Git akan selalu menggunakan maklumat itu bagi apa sahaja yang anda lakukan pada sistem tersebut.
Jika anda mahukan untuk menggantikan ini dengan suatu nama atau alamat e-mel yang lain bagi projek-projek spesifik, anda boleh menjalankan command tanpa pilihan `--global` apabila anda berada di dalam projek tersebut.

Kebanyakan alat GUI akan membantu anda untuk melakukan sebegini apabile anda menjalankan mereka untuk kali pertama.

==== Penyunting Anda

Sekarang identiti anda telah siap disediakan, anda boleh mengkonfigurasikan penyunting teks lalai yang akan digunakan apabila Git memerlukan anda untuk menaipkan sesuatu mesej.
Jika ia tidak dikonfigurasikan, Git akan menggunakan penyunting lalai sistem anda.

Jika anda mahukan untuk menggunakan suatu penyunting teks yang berbeza, misalnya Emacs, anda boleh melakukan yang demikian:

[source,console]
----
$ git config --global core.editor emacs
----

Dalam suatu sistem Windows, jika anda mahukan untuk menggunakan suatu penyunting teks yang berbeza, anda mestilah menyatakan jalan penuh untuk mencapai failnya yang boleh dijalankan.
Jalan ini boleh berbeza bergantung kepada bagaimankah penyunting anda telah dibungkuskan ataupun **packaged**.

Dalam kes bagi Notepad++, suatu penyunting pengaturcaraan yang popular, anda berkemungkinan besar akan mahukan untuk menggunakan versi 32-bit, memandangkan pada waktu menuliskan ini, versi 64-bit tidak dapat menyokong semua plug-ins.
Jika anda berada di dalam suatu sistem Windows 32-bit Windows, atau anda mempunyai suatu penyunting 64-bit dalam suatu sistem 64-bit, anda akan perlu menulis sesuatu sebegini:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

Jika anda mempunyai suatu penyunting 32-bit dalam suatu sistem 64-bit, program tersebut akan dipasang dalam `C:\Program Files (x86)`:

[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTA]
====
Vim, Emacs dan Notepad++ adalah penyunting teks popular yang sering digunakan oleh para pembangun dalam sistem yang berasaskan Unix seperti Linux dan macOS atau suatu sistem Windows.
Jika anda tidak biasa dengan penyunting-penyunting ini, anda mungkin perlu mencarikan arahan spesifik bagi bagaimana untuk menyediakan penyunting kegemaran anda dengan Git.
====

[AMARAN]
====
Anda mungkin mendapati bahawa, jika anda tidak menyediakan penyunting anda sebegini, anda akan masuk ke dalam suatu keadaan yang cukup mengelirukan apabila Git mencuba untuk menjalankannya.
Salah satu contoh dalam suatu sistem Windows ialah ia mungkin termasuk operasi Git yang dihentikan secara pramatang semasa suatu sunting Git dijalankan.
====

==== Menyemak Tetapan Anda

Jika anda mahukan untuk menyemak tetapan konfigurasi anda, anda boleh menggunakan command `git config --list` untuk menyenaraikan semua tetapan yang boleh dicarikan oleh Git pada masa itu:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Anda mungkin melihat kekunci lebih daripada satu kali, kerana Git membaca kekunci yang sama daripada fail yang berlainan (`/etc/gitconfig` dan `~/.gitconfig`, sebagai contohnya).
Dalam kes ini, Git menggunakan nilai terakhir bagi setiap kekunci unik yang dilihat olehnya.

Anda juga boleh menyemak apakah nilai sesuatu kekunci tertentu yang difikirkan oleh Git dengan menaipkan `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTA]
====
Memandangkan Git mungkin membaca nilai pembolehubah konfigurasi yang sama daripada lebih daripada satu fail, ia adalah berkemungkinan bahawa anda akan mempunyai suatu nilai yang tidak dijangka bagi salah satu nilai tersebut dan anda tidak tahu mengapakah sedemikian.
Dalam kes sebegini, anda boleh bertanyakan Git untuk mendapatkan _keasalan_ ataupun _*origin*_ bagi nilai tersebut, dan ia akan memberitahu anda apakah fail konfigurasi yang mempunyai kata mutlak dalam menetapkan nilai tersebut:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
