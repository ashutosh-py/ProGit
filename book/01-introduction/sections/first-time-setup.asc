[[_first_time]]
=== Git Basis-Konfiguration

Nachdem Git jetzt auf Ihrem System installiert ist, sollte Sie Ihre Git Konfiguration noch anpassen.
Dies muss nur einmalig auf dem jeweiligen System durchgeführt werden. Die Konfiguration bleibt bestehen, wenn Sie Git auf eine neuere Version aktualisieren.
Die Git Konfiguration kann auch jederzeit geändert werden, indem die nachfolgenden Befehle einfach noch einmal ausgeführt werden.

Git umfasst das Werkzeug `git config`, welches die Möglichkeit bietet, Konfigurationswerte zu verändern. Auf diese Weise können Sie anpassen, wie Git aussieht und arbeitet.(((Git Befehle,config)))
Die Konfiguration ist an drei verschiedenen Orten gespeichert:

1. Die Datei `/etc/gitconfig` enthält Parameter, die für jeden Anwender des Systems und alle Projekte gelten. 
 Wenn man `git config` mit der Option `--system` verwendet, wird von dieser Datei gelesen bzw. in diese Datei geschrieben.
2. Die Werte in der Datei `~/.gitconfig` gelten ausschließlich für den jeweiligen Benutzer. 
 Wenn man `git config` mit der Option `--global` verwendet, wird von dieser Datei gelesen bzw. in diese Datei geschrieben.
3. Die Datei `config` im Git Verzeichnis (also `.git/config) enthält Parameter, die für das jeweilige Projekt gelten. 

Diese drei Dateien haben unterschiedliche Prioritäten. Die oberste Priorität haben die Werte aus `.git/config`, dann folgt `~/.gitconfig` und zuletzt `/etc/gitconfig`. Ist zum Beispiel ein Parameter in `.git/config` und `/etc/gitconfig` mit unterschiedlichen Werten gesetzt, so gilt in diesem Fall der höherpriore Wert aus der Datei `.git/config`.

Auf Windows Systemen sucht Git nach der Datei `.gitconfig` im `$HOME` Verzeichnis (Normalerweise zeigt `$HOME` bei den meisten Systemen auf `C:\Users\$USER`).
Git schaut auch immer nach `/etc/gitconfig`, auch wenn dieses relativ zu dem MSys Wurzelverzeichnis ist, welches das ist, wohin man Git bei der Installation in Windows installiert hat.

==== Ihre Identität

Nachdem Sie Git installiert haben, sollten Sie als aller erstes Ihren Namen und E-Mail Adresse in Git konfigurieren.
Das ist wichtig, weil Git diese Information für jeden Commit, der von Ihnen angelegt wird, hinterlegt. Diese Daten sind unveränderlich mit in Ihren erstellten Commits integriert:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Wie schon erwähnt, brauchen Sie diese Konfiguration nur einmal vorzunehmen, wenn Sie die Option `--global` verwenden. Auf Grund der oben erwähnten Prioritäten gilt diese dann für all Ihre Projekte.
Wenn Sie für ein spezielles Projekt einen anderen Namen oder eine andere E-Mail Adresse verwenden möchten, können Sie den Befehl ohne die `--global` Option innerhalb des Projektes ausführen.

Viele der grafischen Oberflächen helfen einem bei diesem Schritt, wenn man sie zum allerersten mal startet.

==== Texteditor

Nachdem Sie Ihre Identität konfiguriert haben, können Sie als nächstes einstellen, welchen Texteditor Git in Situationen verwenden soll, in denen Sie einen Text oder Nachricht eingeben müssen. Normalerweise verwendet Git den Standard-Texteditor des jeweiligen Systems – das ist üblicherweise Vim. Wenn Sie einen anderen Texteditor, z.B. Emacs, verwenden wollen, können Sie das wie folgt festlegen:

[source,console]
----
$ git config --global core.editor emacs
----

[WARNING]
====
Auf Unix basierten Betriebssystemen, wie Linux und Mac, verwenden Entwickler häufig die weit verbreiteten Texteditoren Vim und Emacs. Wenn Sie sich in beiden Editoren nicht auskennen oder mit einem Windowssystem arbeiten, müssen Sie vielleicht ein wenig suchen, wie man Ihren favorisierten Texteditor für Git konfiguriert. Im Internet oder in der Hilfe Ihres Editors finden Sie bestimmt eine Hilfestellung.
Wenn Sie Git nicht so konfigurieren, dass es Ihren Texteditor verwendet und Sie keine Ahnung davon haben, wie man Vim oder Emacs benutzt, werden Sie ein wenig überfordert sein, wenn diese zum ersten Mal von Git gestartet werden.
====

==== Einstellungen überprüfen

Wenn Sie Ihre persönlichen Einstellungen überprüfen wollen, können Sie mit dem Befehl `git config --list` alle Einstellungen anzeigen lassen, die Git an dieser Stelle (z.B. innerhalb eines bestimmten Projektes) bekannt sind:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Manche Parameter werden möglicherweise mehrfach aufgelistet, weil Git denselben Parameter in verschiedenen Dateien (z.B. `/etc/gitconfig` und `~/.gitconfig`) gefunden hat.
In diesem Fall verwendet Git dann den jeweils zuletzt aufgelisteten Wert.

Außerdem können Sie mit dem Befehl `git config <key>` prüfen, welchen Wert Git für einen bestimmten Parameter verwendet:(((Git Befehle, config)))

[source,console]
----
$ git config user.name
John Doe
----
